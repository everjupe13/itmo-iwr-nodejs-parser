[
    {
        "title": "Руководство по миграции сервера Parse для разработчиков",
        "body": "Если вы использовали услуги хостинга Parse в качестве бэкенда для своих мобильных приложений, то сейчас вероятно настал идеальный момент попробовать Azure App Service. В связи с последними новостями, ребята из Parse предложили пути миграции существующих бэкендов с Parse на другие площадки. Мы рассчитываем, что когда вы станете искать такую альтернативную площадку, то попробуете и Azure.\nЛегкий путь миграции\nКак предлагается в руководстве по миграции, вы можете мигрировать бэкенд Parse вашего приложения на другой хост, на котором развернут сервер с Parse API размещенный на базе Express. Azure App Service предлагает замечательную альтернативу для хостинга вашей реализации сервера Parse. В конце концов, Node.js-бэкенд предлагаемый в Mobile App в сервисе Azure App Service – это тоже Express. Для того чтобы еще сильнее упростить первые шаги, команда Azure App Service предложила готовый процесс развертывания, который сильно упрощает для вас запуск первого сервера Parse в App Service.\n\nПеред тем как начать, вам стоит почитать руководство по миграции Parse, для того чтобы понять что поддерживается, а что нет в новом сервере Parse. Одной из основных функций, которые отсутствуют в сервере Parse являются пуш-уведомления, но служба Azure Notification Hubs предложит вам готовую альтернативу.\n\nКогда миграция будет завершена, вы можете продолжить использовать клиентские Parse SDK в своих приложениях для доступа к данным (конечно, клиенты должны будут обновлены для использования новых версий SDK и использовать новое расположение сервиса.).\n",
        "link": "https://habr.com/ru/company/microsoft/blog/276407/"
    },
    {
        "title": "Бесплатный реалтайм список онлайн юзеров (Parse.com + Pubnub)",
        "body": "Как-то раз написал мне знакомый задачу для практики: напиши приложение, где есть одна кнопка логина/разлогина и список онлайн пользователь. При этом, пользователи должны «жить» только 30 секунд. Как это всегда бывает, при первичном рассмотрении задачи я подумал: ха, что тут делать то? Используем облачное хранилище и сервер для юзеров, а дальше дело за малым… но не тут то было.\n\nПод катом я расскажу, с какими проблемами при разработке бэкэнда на Parse.com мне пришлось столкнуться, почему пришлось использовать его в связке с Pubnub, и как это всё связать при разработке под Android.\n\nТо, что вышло в итоге:\n\n\n\n",
        "link": "https://habr.com/ru/post/266617/"
    },
    {
        "title": "Сайт без бекэнда: аутентификация пользователя в BaaS parse.com через социальные сети",
        "body": "Я буду каждое утро развертывать мир, как резиновую ленту на мяче для гольфа, а вечером завертывать обратно. Если очень попросишь — покажу, как это делается.Р. Брэдбери\n\nUPDATE: Parse не будет работать к 2017 году.\n\nВведение\nВ статье описан Backend-as-a-Service подход к хранению и обработки данных. Рассказаны преимущества и недостатки представителя такого подхода — сервиса parse.com. Коротко представлен сервис аутентификации пользователей через соц. сети uLogin. Основное назначение — показать, как эти два сервиса могут взаимодействовать, чтобы проект не требовал регистрации пользователей по логину и паролю, но в то же время сохранилась возможность авторизации пользователей к действиям над объектами.\n\nО BaaS и parse.com\nParse.com — один из самых популярных провайдеров backend-as-a-service (BaaS). BaaS подход позволяет не поднимать свой сервер для хранения и обработки данных приложения. Это используется в мобильных разработках и в обычном вебе. Parse.com имеет свои SDK под несколько платформ, в том числе серверных. Но я расскажу о javascript.\n\nВозможность работать с базой данных через javascript, не поднимая свой сервер, открывает отличные возможности, например, для Single page application (SPA), которое можно хостить на Github Pages, Bitbucket и многих других бесплатных. Первый вопрос, который у меня возник, когда я услышал про работу с БД из клиентского кода — это разграничение прав доступа, так как ключи общеизвестны. Изучив документацию parse.com, я выяснил, что для этого используется авторизация пользователей. Каждый пользователь имеет свой логин и пароль. SDK имеет методы регистрации нового пользователя по логину и паролю, аутентификации по этим же данным. Можно добавить email, при этом сам parse.com умеет отправлять настраиваемые письма для верификации email.\n",
        "link": "https://habr.com/ru/post/248511/"
    },
    {
        "title": "Облачный сервис Parse и Intel Edison",
        "body": "\n\nХотите удалённо использовать своё устройство для интернета вещей? Тогда попробуйте Parse — облачный сервис, позволяющий соединять большое количество устройств и легко использовать их через веб-интерфейс. В нём есть всё, что вы ожидаете от облачного провайдера, включая аналитику, статистику, базы данных, push-уведомления, программирование на стороне сервера и многое другое. Система разработки Parse Embedded SDK доступна для множества платформ и мобильных IoT-устройств. \n",
        "link": "https://habr.com/ru/company/intel/blog/388673/"
    },
    {
        "title": "Безопасность Parse в iOS приложении",
        "body": "\n\nParse — прекраснейший BaaS, позволяющий в кратчайшее время поднять полноценную серверную инфраструктуру для мобильного приложения. Возможно, именно из-за этой простоты многие разработчики и забывают о появляющихся проблемах безопасности и открывающихся уязвимостях.\n",
        "link": "https://habr.com/ru/post/247541/"
    },
    {
        "title": "Почему Facebook не стала поддерживать Parse?",
        "body": "\n\nЗакрытие Parse стало одним из неприятных сюрпризов этого года. На момент своей работы Parse оставался одним из самых популярных mBaaS-сервисов (mobile Backend-as-a-Service). Журналисты издания VentureBeat решили разобрать причины отказа Facebook от продолжения поддержки платформы для пользователей сервиса.",
        "link": "https://habr.com/ru/post/298442/"
    },
    {
        "title": "Parse.com закрывается",
        "body": "Привет, друзья!\n\nПо информации из официального блога, известный и популярный среди разработчиков мобильных (и не только) приложений сервис Parse.com прекратит свою работу.\n\nСервис будет полностью отключен 28 января 2017 — у существующих пользователей есть ровно год на миграцию данных и перенос своих приложений в другое место. \n",
        "link": "https://habr.com/ru/post/276135/"
    },
    {
        "title": "Facebook купил бэкенд Parse для сторонних мобильных приложений",
        "body": "\n\nFacebook сегодня официально превратилcя в поставщика платных облачных услуг для разработчиков мобильных приложений. Социальная сеть купила предположительно за $85 млн стартап Parse, который разрабатывает облачный бэкенд для мобильных приложений (mBaaS: mobile-backend-as-a-service). О сделке официально объявлено сегодня и в блоге Parse, и на Facebook.\n",
        "link": "https://habr.com/ru/post/178053/"
    },
    {
        "title": "Parse & Android: рекомендации начинающим разработчикам",
        "body": "Аннотация\nВ данной статье я бы хотел поделиться общими впечатлениями от использования BaaS – решения под названием Parse для разработки бэкэнда Android-приложения, рассказать о всех «подводных камнях», с которыми мне пришлось столкнуться в период разработки. Впервые эту платформу мне посоветовали коллеги по работе, когда я был юниором, и за плечами был всего 1 коммерческий проект. Мотивацией к написанию данной статьи послужили нервы и время, которые я потратил для поиска совместимых версий библиотек и обдумывание странных решений разработчиков платформы, ну или просто потому, что я до сих пор не нашел статей по этому поводу. Так же я ничего не буду рассказывать о том, что такое Parse и как его подключить и настроить, но на всякий случай я оставлю все необходимые ссылки, где можно почитать об этом. ",
        "link": "https://habr.com/ru/post/435424/"
    },
    {
        "title": "Parse.com снижает цены",
        "body": "Привет, друзья!\nЕсли вы разрабатываете приложения для мобильных устройств, то наверняка пользовались (или рассматривали возможность использования) какой-то из существующих BaaS (Backend as a Service) платформ — на данный момент их существует уже несколько десятков.\n\nСпешу поделиться приятной новостью от Parse.com — одной из самых популярных и известных платформ. Сервис пересмотрел ценовую политику (не изменявшуюся с момента старта в 2011 году) и кардинально улучшил условия бесплатного тарифа для новых и существующих пользователей.\n",
        "link": "https://habr.com/ru/post/221549/"
    },
    {
        "title": "Альтернативы сервису parse.com",
        "body": "Как известно, в следующем январе сервис Parse будет закрыт. Большинство разработчиков ищут альтернативу для этого сервиса. В одном из проектов guthub собралось достаточно много альтернатив, со ссылками и описанием. Перед вами — перевод этой страницы.\n \nЧасть 1: универсальные сервисы \nПровайдеры, предоставляющие информацию в реальном времени, помечены (*).\n \nAnyPresence MBaaS (Mobile backend as a service). Упрощает процесс создания мобильных приложений предприятия, работающих на разных устройствах, не ущемляя гибкость средств, доступных разработчику. Легок в использовании даже для неопытных пользователей. Опытные разработчики получают доступ к исходникам всех компонентов.\n \nApiOmat позволяет процессам предприятия работать как мобильным приложениям. Мобилизует сложные бизнес-структуры и процессы путём объединения существующих IT-систем с мобильными приложениями и устройствами. Его можно устанавливать прямо в дата-центре компании, что позволит работникам выполнять свою работу через приложения вне зависимости от их местонахождения.\n \nAppcelerator Arrow (*) Состоит из двух основных компонентов, Builder и Cloud. Arrow Builder позволяет быстро создавать API, модели данных и соединители данных как через мастер настройки, так и через написание кода. Arrow Cloud – это эластичный облачный сервис, где выполняются API и происходит анализ их использования, плюс обеспечивается работа двух десятков смежных сервисов (гео, хранение фотографий и т.п.) с использованием ArrowDB\n \nAppery.io Интегрированные сервисы MBaaS – чтобы разработчики могли сконцентрироваться на приложениях, не отвлекаясь на инфраструктуру.\n ",
        "link": "https://habr.com/ru/post/277979/"
    },
    {
        "title": "Печатаем документ в виде чека с помощью Python и Parse",
        "body": "Не так давно передо мной встала задача: распечатка документа определенного формата с помощью мобильного устройства. На телефоне должны были вводиться определенные значения, отправляться на сервер (для того, чтобы потом можно было использовать эти данные на веб сайте) и печать документ с этими данными. С самого начала мой выбор пал на Google cloud print, так как он максимально прост в использовании и решении подобных задач. Но при использовании этого варианта есть несколько недостатков: \n\n\nОчень медленная обработка запроса \nНужно где-то формировать PDF документ и возвращать ссылку на него\nПостоянно нужно выбирать принтер (если у вас подключен только один принтер к Google cloud print, то все равно нужно выбирать между ним и сохранением на Google Drive)\n \nПоэтому я решил написать свой скрипт для подобных операций.\n",
        "link": "https://habr.com/ru/post/246989/"
    },
    {
        "title": "Куда переехать с Parse Push?",
        "body": "Сервис Parse, позволявший, в числе прочего, легко запрограммировать отправку пуш-уведомлений, закрывается 28 января; осталось 8 дней. Самое время переехать  (это шутка, на самом деле нужно было переехать уже давно).\n\nМы знаем два хороших сервиса на замену:\n",
        "link": "https://habr.com/ru/company/meduza/blog/320062/"
    },
    {
        "title": "Open Source Java library with stacktrace filtering, Silent String parsing and Version comparison",
        "body": "Over some time in different jobs, I came across a need for several utilities that I couldn't find available at the time. And I saw that I needed them several times over and over again. So I wrote my own small library that I found very useful. So I just published it as an open-source java library. \n\nHere is the Github link\n\nJavadoc online is available here\n\nAlso, this library is available on Maven Central. Here are the Maven artifacts (the version 1.5.1.2 is the latest at the time of writing of this article but might change in the future. To check for the latest version search for artifact «MgntUtils» at http://search.maven.org/):\n\n<dependency>\n     <groupId>com.github.michaelgantman</groupId>\n     <artifactId>MgntUtils</artifactId>\n     <version>1.5.1.2</version>\n</dependency>\n\n <dependency>\n     <groupId>com.github.michaelgantman</groupId>\n     <artifactId>MgntUtils</artifactId>\n     <version>1.5.1.2</version>\n     <classifier>javadoc</classifier>\n</dependency>\n\n<dependency>\n     <groupId>com.github.michaelgantman</groupId>\n     <artifactId>MgntUtils</artifactId>\n     <version>1.5.1.2</version>\n     <classifier>sources</classifier>\n</dependency>\n\nBelow is just a short explanation of what is there. The library comes with a nicely written (I hope) JavaDoc with a detailed description. So here is the list of features:",
        "link": "https://habr.com/ru/post/480268/"
    },
    {
        "title": "Выпускник Y Combinator привлек $1,5 миллиона в раунде с участием основателя Parse Ильи Сухаря",
        "body": "Основатель Parse и партнер фонда Y Combinator Илья Сухарь инвестировал в компанию Yhat. Она занимается разработкой технологий работы с данными в научной сфере – data science. \n\nВ раунде также участвовали Тихон Бернстайн, Джастин Кан, KEC Ventures и некоторые другие инвесторы. По итогам раунда Yhat получила $1,5 миллиона, передает Firrma. \n\nYhat – выпускник площадки для стартапов Y Combinator. На сегодняшний день у компании два приложения – ScienceOps и ScienceBox. ScienceOps – флагманский продукт Yhat. Это экспертная система, анализирующая большие объемы данных. Она позволяет принимать решения и продвигаться в создании продукта на основании проведенного анализа. \n\nВ мае Илья Сухарь вложился во французский стартап Algolia. Компания занимается оптимизацией поисковых движков сайтов. Суммарный объем раунда составил $18,3 миллиона.\n\nParse – облачная платформа для разработки игр и приложений. Илья Сухарь запустил ее в 2011 году. На начальном этапе ему удалось привлечь $7 миллионов. После этого он получал предложения от таких компаний, как Dropbox, Google и Yahoo! Однако в 2013 году стартап выкупила компания Facebook за $85 миллионов.",
        "link": "https://habr.com/ru/news/t/291190/"
    },
    {
        "title": "Prett Parsing — метод Вогана Пратта для разбора выражений",
        "body": "В тему компиляций и вычислений выражений.\n\nВ далёком 1973 году Воган Прэтт (Vaughan Pratt) предложил простой и эффективный метод разбора выражений, не использующий ни автоматы, ни грамматику как таковую.\n\nИдея заключается в том, что каждый символ (token) наделяется свойствами:\nlbp = приоритет связывания символа слева, \nnud = функция, определяющая результат применения оператора в начале выражения, \nled = функция, определяющая результат применения в середине выражения.\n\nОсновной разбор осуществляется по схеме:\nразбор(приоритет продолжения):\n    вытолкнуть символ из входного потока\n    результат = вызов nud этого символа\n    пока приоритет lbp следующего в потоке символа > приоритета продолжения:\n        вытолкнуть символ из входного потока\n        результат = применени led этого символа к текущему результату\n\nКонстанты и переменные имеют приоритет связывания 0, а функция nud возвращает их значение (или ссылку). Поэтому применение разбора к константам сразу возратит их значение.\nДля бинарных операторов функция led рекурсивно вызывает продолжение разбора (справа) вплоть до более низкого приоритета, и делает что-нибудь с уже накопленым (слева) результатом, и полученным рекурсивно.\nРезультат применения оператора аггрегируется для внешнего вызова.\nМного-арные операторы — получают аргументы дополнительным вызовом функции разбора.\nПрефиксные операторы делаются с помощью определения для них функции nud.\nДля правостороннего связывания меняется приоритет продолжения рекурсивного разбора.\n\nНа сайте effbot.org приводится подробная реализация на питоне. \nТам же есть ссылки для жаваскрипта и схемы.\n",
        "link": "https://habr.com/ru/post/50349/"
    },
    {
        "title": "Особенности функций Mikrotik script. Сode из :parse",
        "body": "Исследование функций и скриптов в Mikrotik script. Рассматриваются разные способы создания и вызова функций и скриптов с передачей в них параметров. Оператор :parse и особый тип данных code.",
        "link": "https://habr.com/ru/post/650795/"
    },
    {
        "title": "AngularJs $parse hacks",
        "body": "Предлагаю перевод публикации «AngularJs $parse hacks».\n\nВ недрах AngularJs прячется одна маленькая и замечательная функция: $parse. Обычно она используется внутри фрэймворка для интерполяции значений, например при двусторонней провязке данных (two way data binding):\n",
        "link": "https://habr.com/ru/post/244001/"
    },
    {
        "title": "Flash XML parsing: win vs mac",
        "body": "Простой и понятный с виду код:\npackage {\n  import flash.display.Sprite;\n  \n  public class XCDATATest extends Sprite {\n    public function XCDATATest() {\n      var node:XML = <format>\n       <![CDATA[<b>ds3 - CSV Settings:</b> \nignore_first_row=<b>true</b> \ncolumns_separator=<b>;</b> \nrows_separator=<b>\\n</b>]]> \n      </format>;\n      trace (String(node));\n    }\n  }\n}\n\n* This source code was highlighted with Source Code Highlighter.\nМожет привести к очень «веселым» последствиям разной работы swf-ки под разными системами.\n",
        "link": "https://habr.com/ru/post/89905/"
    },
    {
        "title": "Parse it!",
        "body": "Какое-то время назад мне по работе пришлось провести небольшое исследование. Суть его состояла в поиске наилучшего pdf-парсера реализованного на java. \n\nНемного о проекте. В нем реализована система пересылки внутренних сообщений, к которым могут быть прикреплены файлы. Также есть поиск, который должен осуществляться по содержимому аттачментов. Большую часть подобных аттачментов составляют pdf-ки.\nСобственно работа механизма довольно проста: при отсылке сообщения данные аттачмента парсятся и по ним стороится индекс.\n\nДолгое время документы парсились при помощи библиотеки PDFBOX, работа которой не вызвала ни у кого радости: долго и со сбоями.\nВ итоге были выбраны 4 библиотеки, сравнением которых я занялся: PDFBOX, JPod, iText и Acrobat.\n",
        "link": "https://habr.com/ru/post/57076/"
    },
    {
        "title": "Парсим weblancer используя PROXY",
        "body": "Цель работы\n\nПарсим сайт, используя прокси-сервера.\nСохраняем данные в формате CSV.\nПишем поисковик по найденным данным.\nСтроим интерфейс.\n\n\n\nИспользовать будем язык программирования Python. Сайт, с которого мы будем качать данные — www.weblancer.net (парсинг старой версии этого сайта был размещен здесь), в нем есть предложения работы по адресу www.weblancer.net/jobs. С него мы и будем получать данные — это название, цена, количество заявок, категория, краткое описание предлагаемой работы. \n\nВход с использованием прокси означает — вход на сайт под ненастоящим адресом. Пригодится для парсинга сайта с защитой бана по IP адресу (то есть, если вы слишком часто, за короткий отрезок времени, входите на сайт).",
        "link": "https://habr.com/ru/post/322608/"
    },
    {
        "title": "Компилятор на JavaScript с использованием ANTLR",
        "body": "\n\n\nВ начале этого года я присоединилась к команде, работающей над MongoDB Compass — графическим интерфейсом для MongoDB. Пользователи Compass через Intercom запросили инструмент, позволяющий писать запросы к базе данных, используя любой удобный им язык программирования, поддерживаемый драйвером MongoDB. То есть нам нужна была возможность трансформировать (компилировать) язык Mongo Shell в другие языки и обратно.\n\nДанная статья может стать как практическим руководством, помогающим при написании компилятора на JavaScript, так и теоретическим ресурсом, включающим основные понятия и принципы создания компиляторов. В конце приведен не только полный список всех используемых при написании материалов, а также ссылки на дополнительную литературу, направленную на более глубокое изучение вопроса. Информация в статье подается последовательно, начиная с исследования предметной области и далее постепенно усложняя функционал разрабатываемого в качестве примера приложения. Если во время прочтения вам кажется, что вы не улавливаете переход от одного шага к другому, вы можете обратиться к полной версии данной программы и возможно это поможет устранить возникший пробел.",
        "link": "https://habr.com/ru/post/351906/"
    },
    {
        "title": "Создание языка программирования с использованием LLVM. Часть 2: Реализация парсера и AST",
        "body": "Добро пожаловать в Главу 2 учебника «Создание языка программирования с LLVM». В этой главе мы увидим, как использовать лексический анализатор, созданный в Главе 1, чтобы построить полный синтаксический анализатор для нашего языка Kaleidoscope. После того, как у нас будет готов парсер, мы будем строить Abstract Syntax Tree (AST) (Абстрактное синтаксическое дерево).\n",
        "link": "https://habr.com/ru/post/120005/"
    },
    {
        "title": "Automation VS Chaos",
        "body": "\n\nIT technologies evolution allowed to control huge data flows. Business has a lot of IT solutions: CRM, ERP, BPM, accounting systems or at least just Excel and Word. Companies are different too. Some of companies are composed of plenty branches. Let’s name such as “Pyramid”. Pyramids have data synchronization issue for pile of IT systems. Software vendors and versions differ for branches significantly. In addition management company continuously modify reporting requirements that causes frustration assaults in the branches. This is a story about the project I happened to encounter chaos that needed to be systematized and automated. Low budget and tight deadlines limited the use of most existing industrial solutions but opened up scope for creativity.",
        "link": "https://habr.com/ru/post/436240/"
    },
    {
        "title": "Парсеры Пратта для чайников",
        "body": "Рекурсивный спуск работает идеально, когда вы можете принимать решение относительно разбираемого куска кода с помощью текущего контекста и токена.\nКартину портят выражения: постфиксные, инфиксные и прочие. Проблема: вы не можете понять, какого типа выражение вы обрабатываете до тех пор, пока не разберёте его первую половину. Зачастую для вас также важны приоритет операции и её ассоциативность, чтобы построенное AST имело правильную структуру.\nВ этой статье мы напишем парсер для диалекта Go, особенности которого мы рассмотрим чуть ниже. Как вы сможете убедиться, алгоритм Пратта решает большинство наших проблем.\n",
        "link": "https://habr.com/ru/post/494316/"
    },
    {
        "title": "Парсим базу юриков ФНС (велосипедостроение с xml, csv, SQLite и Питоном)",
        "body": "Замечания: статья для совсем маленьких и крутым спецам по кодингу будет не интересно, лучше ее пропустить. В коде первым комментарием поставлена ссылка на расположение файла с этим кодом для удобства и простоты. Главная задача была получить результат в виде таблицы SQLite. Качество кода оцениваем как ниже среднего, но с заявкой на максимальную простоту. Код написан достаточно просто и без пояснений, но готовы исправиться, поясниться.ВводнаяЧто хотим сделать: взять данные по юридическим лицам (ЮЛ) РФ за 2019 год (идентификаторы ЮЛ: наименование и ИНН(ЮЛ), оборот, расход) и положить в SQLite. ",
        "link": "https://habr.com/ru/post/577148/"
    },
    {
        "title": "Распарсить HTML в .NET и выжить: анализ и сравнение библиотек",
        "body": "\nВ ходе работы над одним домашним проектом, столкнулся с необходимостью парсинга HTML. Поиск по гуглу выдал комментарий  Athari и его микро-обзор актуальных парсеров HTML в .NET за что ему огромное спасибо. \n\nК сожалению, никаких цифр и/или аргументов в пользу того или иного парсера найдено не было, что послужило поводом к написанию данной статьи.\n\nСегодня я протестирую популярные, на данный момент, библиотеки для работы с HTML, а именно: AngleSharp, CsQuery, Fizzler, HtmlAgilityPack и, конечно же, Regex-way. Сравню их по скорости работы и удобству использования.\n\n\nTL;DR: Код всех бенчмарков можно найти на github. Там же лежат результаты тестирования. Самым актуальным парсером на данный момент является AngleSharp — удобный, быстрый, молодежный парсер с удобным API.\n\nТем, кому интересен подробный обзор — добро пожаловать под кат.\n",
        "link": "https://habr.com/ru/post/273807/"
    },
    {
        "title": "Регулярные выражения и математический парсер",
        "body": "Когда-то давно мне понадобился парсер математических выражений на C#. Конечно, скачать готовую реализацию — не проблема. Но вот только Интернета у меня в те годы не было. В итоге абсолютно без раздумий и без теоретических основ парсеров, конечных автоматов и прочего он был написан через регулярные выражения. Минут за 10. Стоит отметить, что нужны были только арифметический действия и скобки. Поддержка тригонометрических функций и прочего не требовалась.\n",
        "link": "https://habr.com/ru/post/271285/"
    },
    {
        "title": "Использование нейронных сетей для поиска ответов в таблицах",
        "body": "Большая часть информации в мире хранится в виде таблиц, которые можно найти в Интернете или в базах данных и документах. В таблицах может находиться всё что угодно, от технических характеристик потребительских товаров до финансовой статистики и данных экономического развития страны, спортивных результатов и многого другого. Для того, чтобы найти ответ, сейчас необходимо вручную просматривать эти таблицы или полагаться на специальную службу, которая дает ответы на конкретные вопросы (например, о спортивных результатах). Однако эта информация была бы намного более доступной и полезной, если бы ее можно было запрашивать на естественном языке.\nНапример, на следующем рисунке показана таблица с рядом вопросов, которые люди могут задать. Ответ на эти вопросы может быть найден в одной или нескольких ячейках таблицы («У какого рестлера было больше всего побед?» — «Which wrestler had the most number of reigns?»), или может потребоваться объединение нескольких ячеек таблицы («Сколько чемпионов мира имеют только одну победу?» — «*How many world champions are there with only one reign?»).\n\nТаблица и вопросы с ожидаемыми ответами. Ответы можно выбрать напрямую из таблицы (#1, #4) или вычислить на основе данных таблицы (#2, #3).",
        "link": "https://habr.com/ru/post/582248/"
    },
    {
        "title": "One of the ways to dynamically deserialize a part of a JSON document with an unknown structure",
        "body": "In this topic, I will tell you how to dynamically parse and deserialize only part of the whole JSON document. We will create an implementation for .NET Core with C# as a language.For example, we have the next JSON as a data source for the report. Notice that we will get this JSON in the runtime and at the compile step we don't know the structure of this document. And what if you need to select only several fields for processing?",
        "link": "https://habr.com/ru/post/559122/"
    },
    {
        "title": "Простая библиотека для парсинга HTML",
        "body": "Недавно зарелизил Leaf, это небольшая библиотека для парсинга HTML на Python. \nОна уже довольно долгое время покрывает все мои нужды в парсинге, но еще есть идеи для развития.\nЭта библиотека по сути обертка над lxml, которая делает работу с ней гораздо приятней. \n",
        "link": "https://habr.com/ru/post/115135/"
    },
    {
        "title": "Продолжаем велосипедостроение с Python, xml, csv, sqlite. Часть 2. Ищем и правим ошибки, пока не налетаем на…",
        "body": "Примечание. Как и первая часть эта тоже для совсем маленьких кодеров-велосипедостроителей на Питоне. Для прожженных кодеров будет скучно. Изначально хотели внести исправления сразу в первую статью по мере нахождения ошибок, но после некоторого раздумия решили, что это неудобно. Ошибки исчезнут совсем, а именно ошибки приносят максимальную пользу для начинающего кодера. А посему ошибки оставляем в первой части, а в этой начинаем от них избавляться.окончание трилогии тут (часть 3): \"Последний велосипедно-питоний бой с ошибками импорта sqlite за 2 174 433 строчки. Часть 3\"",
        "link": "https://habr.com/ru/post/585592/"
    },
    {
        "title": "Парсим русский язык",
        "body": "\nВ прошлый раз (почти год назад) мы определяли части речи в русском тексте, производили морфологический анализ слов. В этой статье мы пойдем на уровень выше, к синтаксическому анализу целых предложений.\n\nНаша цель заключается в создании парсера русского языка, т.е. программы, которая на вход бы принимала произвольный текст, а на выходе выдавала бы его синтаксическую структуру. Например, так:\n\n\"Мама мыла раму\":\n\n(предложение\n    (именная гр. (сущ мама))\n    (глаг. гр. (глаг мыла)\n        (именная гр. (сущ раму)))\n    (. .)))\n\n\nЭто называется синтаксическим деревом предложения. В графическом виде его можно представить следующим образом (в упрощенном виде):\n",
        "link": "https://habr.com/ru/post/148124/"
    },
    {
        "title": "Искусство парсинга или DOM своими руками",
        "body": "Привет, Хабр! Недавно я задался идеей создать простой язык разметки наподобие markdown, который отлично подходил бы для моих задач, а именно — быстрого написания лекций с форматированием и возможностью вставки математических формул «на лету», с применением одной лишь клавиатуры. Чтобы перевести текст, написанный в таком формате, в более понятную форму, например, документ LibreOffice Writer, нужен синтаксический анализатор, проще говоря — парсер. Поскольку я привык делать велосипеды, то направился в поисковые системы с запросами «parser example», «html to DOM», «how to parse html» и др. К моему разочарованию, на всех найденных ресурсах либо приводились элементарные примеры типа калькулятора Страуструпа с рекурсивным спуском, либо использовались готовые решения, такие как flex, bison, llvm и yacc. Библиотек, предназначенных для парсинга строго определённых языков, нашлось ещё больше (gumbo, jsoup, rapidjson, инструменты Qt и др.) Ни то, ни другое не входило в мои планы по написанию парсера своей разметки на C++ с использованием лишь стандартной библиотеки, поэтому моим источником знаний об искусстве парсинга вместо электронных ресурсов стали методички технических институтов. О том, как взять текст и построить из него AST (абстрактное синтаксическое дерево), о некоторых подводных камнях, на которые я натыкался в процессе, о возможных ошибках я сегодня и расскажу.\n\nСразу оговорюсь, — если ваша цель — свой скриптовый язык или что ещё сложнее, этой статьи будет недостаточно для его реализации. В идеале нужно на отлично знать теорию автоматов и дискретные структуры. Но в качестве отправной точки можно пока ограничиться и моим опытом, которым я щедро поделюсь под катом. Это не совсем то, что я задумывал изначально, зато идеально подходит для примера. Парсить мы будем HTML, как простой и всем знакомый язык.",
        "link": "https://habr.com/ru/post/442964/"
    },
    {
        "title": "Искусство парсинга 2 или транслитерация собственной разметки",
        "body": "+БОНУС: взаимное включение классов друг в друга в C++\nПривет, Хабр! Эта статья — прямое продолжение статьи Искусство парсинга или DOM собственными руками, где мы разобрали HTML-документ и построили на его основе абстрактное синтаксическое дерево (AST) с доступом к любому элементу через индексацию при помощи лишь стандартной библиотеки C++, проще говоря, научились самостоятельно парсить XML-подобные штуки. Напомню, что процесс парсинга, или синтаксического анализа/разбора состоит из двух этапов: лексического разбора (разбора текста на токены) и построения AST. Если первый мы рассмотрели очень подробно, с примерами и исходниками, то описание второго похоже на пустую куколку бабочки, у которой есть только оболочка, а прекрасное содержимое автор извлёк перед публикацией. На то была причина, для HTML построить дерево действительно просто, нужно всего 4 класса: пустой тег, блок, текстовый узел и корень документа, наследуемый от блока. Сегодня мы оставим такую простоту позади и построим дерево, где свойства элементов, и пустых, и блочных, будут содержаться не в атрибутах тегов, а непосредственно в классах, а для этого классов придётся создать много. Действительно много. Строить будем не из простых известных языков разметки, а создадим свой, с правилами, показанными на изображении под катом. Плюс в конце ещё переведём, или, говоря правильнее, транслитируем документ с предыдущей статьёй, размеченной нашим языком, в HTML, а в качестве бонуса я отвечу начинающим программистам C++ на тривиальный, но труднонаходимый вопрос: как включать классы «друг в друга»?",
        "link": "https://habr.com/ru/post/444876/"
    },
    {
        "title": "Работаем с XML как с массивом, на PHP",
        "body": "Всем привет. Хочу поделиться своим опытом в парсинге XML, хочу рассказать об инструменте который мне в этом помогает.XML ещё жив и иногда его приходиться парсить. Особенно если вы работаете со СМЭВ (привет всем ребятам для которых \"ФОИВ\" не пустой звук :) ).Цели у такого парсинга могут быть самые разные, от банального ответа на вопрос какое пространство имён используется в xml-документе, до необходимости получить структурированное представление для документа вцелом.Инструмент для каждой цели будет свой. Пространство имён можно найти поиском подстроки или регулярным выражением. Что бы сделать из xml-документа структурированное представление (DTO) - придётся писать парсер.Для работы с XML в PHP есть пара встроенных классов. Это XMLReader и SimpleXMLElement.",
        "link": "https://habr.com/ru/post/599067/"
    },
    {
        "title": "Разбор URL в Zend Framework 2",
        "body": "Задача: \nИметь метод, разбирающий на составляющие строку содержащую URL. Строка может содержать как абсолютный, так и относительный URL, и оба эти варианты должны быть правильно разобраны.\n Причём в стоке допустим «неправильный» формат абсолютной ссылки — без «http://». Далее по тексту ссылки «неправильного» формата будем называть неполными абсолютными ссылками.\nРеализовать поддержку «РФ» доменов.\n\n",
        "link": "https://habr.com/ru/post/198614/"
    },
    {
        "title": "Как я парсил БД C-Tree, разработанную 34 года назад",
        "body": "\nПрилетела мне недавно задача дополнить функционал одной довольно старой програмки (исходного кода программы нет). По сути нужно было просто сканить периодически БД, анализировать информацию и на основе этого совершать рассылки. Вся сложность оказалась в том, что приложение работает с БД c-tree, написанной аж в 1984 году.\n\nПорывшись на сайте производителя данной БД нашёл некий odbc драйвер, однако у меня никак не получалось его подключить. Многочисленные гугления так же не помогли нормально сконнектиться с базой и доставать данные. Позже было решено связаться с техподдержкой и попросить помощи у разработчиков данной базы, однако ребята честно признались что уже прошло 34 года, всё поменялось 100500 раз, нормальных драйверов для подключения на такое старьё у них нет и небось уже тех программистов в живых тоже нету, которые писали сие чудо.\nПорывшись в файлах БД и изучив структуру, я понял, что каждая таблица в БД сохраняется в два файла с расширением *.dat и *.idx. Файл idx хранит информацию по id, индексам и т.д. для более быстрого поиска информации в базе. Файл dat содержит саму информацию, которая хранится в табличках.\n\nРешено было парсить эти файлики самостоятельно и как-то добывать эту информацию. В качестве языка использовался Go, т.к. весь остальной проект написан на нём.",
        "link": "https://habr.com/ru/post/351658/"
    },
    {
        "title": "Последний велосипедно-питоний бой с ошибками импорта  sqlite за 2 174 433 строчки. Часть 3",
        "body": "Замечание. Вся трилогия (часть 1 тут, часть 2 тут) о велосипедостроении с sqlite, xml, csv только для совсем маленьких Питоньих кодеров. Не для крутых кодеров, они умрут от скуки в нашем опусе и ничего нового не увидят. В третьей части заканчиваем все, что начали ранее.Начинаем изыски причины и местонахождения ошибки.Итак: правильный ответ: ошибки в коде нет. Ну точнее ошибка возникает при работе кода из-за ошибки данных в файлах. Чтобы убедиться, что это так, добавим в код обработку исключений. Совсем немного поправим наш код, добавим обработку и вывод на печать исключений:",
        "link": "https://habr.com/ru/post/588066/"
    },
    {
        "title": "Социальная сеть без сервера. История разработки iOS-клиента и backend",
        "body": "Интро\nЯ хочу рассказать об опыте разработки iOS-клиента для социальной сети и бэкенда реализованного с помощью BaaS Parse.com Нижe приведена архитектура, которая у нас получилась, некоторые tips&tricks и размышления по поводу работы с parse.com.\nИзначально клиент думал о сервере на RoR, но, видимо, они не рискнули вкладывать сразу много денег. Мы подписали строгое NDA, поэтому ссылку на Appstore я дать не могу. По доброй традиции всех IT книг, хочу выразить благодарность заказчику Х и компании Y за то что мне довелось поработать над этим проектом и подчерпнуть весь этот опыт. Также спасибо А. за то, что написал часть про модуль для встроеных покупок.\n",
        "link": "https://habr.com/ru/post/198864/"
    },
    {
        "title": "Простой лидерборд на Unity3D с facebook-ом",
        "body": "После участия в Ludum Dare 31 у нас появилась игра, в которой можно соревноваться с друзьями и мы решили добавить к ней лидерборд, с авторизацией через Facebook. Какие сложности могут возникнуть и как сделать подобный в своей игре читайте под катом.\n\n\n",
        "link": "https://habr.com/ru/post/245985/"
    },
    {
        "title": "Поверхностный обзор javascript-enabled BaaS платформ",
        "body": "Будучи начинающим javascript разработчиком, я заинтересовался темой межплатформенной разработки мобильных приложений. В этой области, в настоящее время, балом правят Cordova (phonegap) www.phonegap.com, Appcelerator Titanium www.appcelerator.com, Mosync www.mosync.com.\n\nРано или поздно, после выпуска первых мини-приложений, основанных на этих системах, разработчику захочется создать что-нибудь Большое и Светлое, и хотелось бы, чтоб в этом новом приложении/сервисе были пользователи (c аватарами и проч.), push-notifications, user-generated-content и т.д… Но при этом, не хотелось бы тратить время и деньги на написание своей серверной инфраструктуры, а хотелось бы воспользоваться чем-нибудь недорогим, вплоть до бесплатного, и простым в освоении (и ещё чтоб «в облаке»!).\n\nКак раз подобного рода тяжести и взяли на себя многочисленные Backend-as-a-Service (не путать с другими aaS). Я хочу кратко пробежаться по некоторым игрокам на этом рынке. Подчеркну, что меня в первую очередь интересовали те платформы, которые можно было бы легко и безопасно использовать с мобильным javascript (Phonegap/Titanium). Если платформа просто предоставляет REST API, этого мало, т.к. вопрос безопасности требует наличия некоторого специального ограничительного функционала: AccessControlList/permissions/masterKeys/etc. И вообще, желательно отдельный javascript SDK.\n\n(Так как это «поверхностный обзор», я не буду подробно писать кому и зачем нужен BaaS и почему вместо всего этого не использовать старый-добрый PHP/MySQL на VPS или новый-добрый node.js в облаке)\n\nЯ начал поиск с www.programmableweb.com/apis/directory/1?apicat=Backend там перечислено почти 40 платформ, просмотрев их, я оставил для обзора те, что легко можно использовать с javascript:\n",
        "link": "https://habr.com/ru/post/150729/"
    },
    {
        "title": "BaasCMS – бэкенд не нужен",
        "body": "\n\nBaasCMS — это JavaScript CMS, использующая в качестве бэкенда популярных провайдеров BaaS. На данный момент поддерживается только Parse.com.\n\nИсходный код BaasCMS доступен на GitHub.\n\nBaasCMS Demo на GitHub Pages\nТоже самое BaasCMS Demo на Tumblr\n\nМожно посмотреть Админ-панель для этого демо (изменения/добавление запрещены). В соответвующую форму на главной странице админки нужно вставить следующие ключи:\n\n\nApplication ID: nM7P7NnFA95CK1WrqWOf9wa3mskctaTOdk9vYflj\nJavascript Key: 0zHfA9FG8L1xR699qmFXjxkZ1pDxgml0MWZMpqJG\n\n",
        "link": "https://habr.com/ru/post/234409/"
    },
    {
        "title": "Средства, которые позволили нам ускорить разработку игры",
        "body": "\nРаньше я работал над созданием мобильных игр как гейм-дизайнер или продюсер, но сам еще никогда профессионально не писал код. Несколько месяцев назад мне захотелось это исправить и сделать игру своими руками. Так, спустя два месяца работы, силами трех человек в App Store и Google Play появились «Котики». В своей истории я хочу поделиться приобретенным опытом и рассказать о средствах разработки, которые позволили нам быстро сделать эту игру.",
        "link": "https://habr.com/ru/post/250847/"
    },
    {
        "title": "Обзор новорождённой платформы Scorocode",
        "body": "\n\nBaaS-платформы (Backend as a Service) сделали разработку и сопровождение backend'а для мобильных и веб-приложений достаточно простыми и предсказуемыми процессами. Одним из флагманов движения BaaS стала компания Parse, но в 2016 году она заявила о прекращении обслуживания клиентов с 2017 года.\n\nВ связи с закрытием их сервиса и отсутствием русскоязычных облачных BaaS, мы решили создать собственный аналог — Scorocode. Об этом под катом.\n",
        "link": "https://habr.com/ru/company/scorocode/blog/303954/"
    },
    {
        "title": "Итоги и прогнозы года для онлайн-издателей: Социальные медиа помогают увеличивать посещаемость изданий",
        "body": "То, что СМИ — тормоза, доказывать уже не надо. Журналисты — как немногочисленные городские таксисты, а пользователи соцсетей — как Uber, то есть везде и всюду. Поэтому становится интересней «борьба» на более высоком уровне — между поисковиками и соцсетями, где поисковикам в среднесрочке тоже ничего не светит, ввиду запретов для поисковиков (технологических или юридических), которые выставляют крупные соцсети для сбора сообщений пользователей.\n\nРазделение на пары архивы/поисковики и оперативное/соцмедиа вполне естественны, человеческий мозг — с кратковременной и долговременной памятью — отлично сочетаются и помогают решать многочисленные задачи.\n\nЧто делать издателям-блогерам-людям в динамическом мире изменяющихся привычек подрастающего человечества? Слушать, слышать, реагировать и формировать тренды. Далее — перевод статьи коллег из Parse.ly с небольшой аналитикой популярных (для англоязычных читателей) материалов в онлайн-СМИ и предложениями по действиям издателям в новом году. Насколько соответствует — решайте сами. Ловите тренды.\n",
        "link": "https://habr.com/ru/company/palitrumlab/blog/298966/"
    },
    {
        "title": "Как разобрать URL в JavaScript?",
        "body": "\n\nДоброго времени суток, друзья! \n\nПредставляю Вашему вниманию перевод заметки «How to Parse URL in JavaScript: hostname, pathname, query, hash» автора Dmitri Pavlutin. \n\nУнифицированный указатель ресурса или, сокращенно, URL — это ссылка на веб-ресурс (веб-страницу, изображение, файл). URL определяет местонахождения ресурса и способ его получения — протокол (http, ftp, mailto). \n\nНапример, вот URL данной статьи:\n\nhttps://dmitripavlutin.com/parse-url-javascript\n\nЧасто возникает необходимость получить определенные элементы URL. Это может быть название хоста (hostname, dmitripavlutin.com) или путь (pathname, /parse-url-javascript). \n\nУдобным способом получить отдельные компоненты URL является конструктор URL(). \n\nВ этой статье мы поговорим о структуре и основных компонентах URL. ",
        "link": "https://habr.com/ru/post/510742/"
    },
    {
        "title": "«Правильный» html парсинг",
        "body": "\n\nПервый раз я запустил Eclipse еще весной, почитал книжки на английском, поставил SDK, немного поигрался и забросил. В начале зимы я купил себе первый смартфон на базе Android, но вновь вернутся к разработке меня подтолкнул недавний пост, в котором говорилось, что можно обойтись и знанием C#, с которым в отличии от Java я знаком. Мне было достаточно одного вечера, чтобы понять, что за связку Visual Studio и Monodroid я больше не сяду, позже я прочитал этот пост, где полностью согласился с автором.\n\nПосле небольшого вступления перейду к теме топика. Довольно большое количество приложений под мобильные устройства взаимодействуют с сайтами и не секрет, что порой нужно получить какую-то информацию со страницы — это может быть курс валют или что-нибудь другое, и нет никакого желания делать это посредством браузера.\n\nБольшинство разработчиков, получают html код страницы и перегоняют его в xml, что является неправильным подходом, так как html является «правильным» xml не всегда, вроде на хабре писали, что для браузера не обязателен тег html (современный браузер и без него должен отобразить страницу) или просто будут ошибки, тогда на помощь приходят библиотеки. Из них я выбрал HtmlCleaner.\n\nПод катом я расскажу, как подключить эту библиотеку, а также напишем простой парсер stackoverflow.com.\n",
        "link": "https://habr.com/ru/post/115127/"
    },
    {
        "title": "URL.js или дружим JavaScript с обработкой ссылок",
        "body": "\n\nДоброго времени суток, уважаемые хабравчане!\n\nВозникла передо мной сегодня задача генерации GET-параметров и всего URL в целом, на стороне клиента, прям вот щас, без возможности «поговорить» с сервером. Сразу оговорюсь, про этот  пост я узнал вот прям перед написанием данной статьи ибо сначала закончил писать, а потом уже прибег к поиску, да и пост тот — не со всем про то же самое, что у меня.\n\nИтак, к делу.\n\nЗадача и проблемы\nПроблемы — те же что и в посте, который я привел выше:\n\nНевозможность использовать window.location для «приготовления» URL;\nНельзя работать сразу с несколькими window.location в силу политики безопасности браузеров;\nОтсутствие известных готовых решений ( да и сейчас, уже апосля, я не нашел подобного кода )\n\nЗадачи которые я поставил перед собой:\n\nУдобный синтаксис\nВозможность как читать части URL так и изменять их\nРабота с GET-параметрами\nКроссбраузерность и универсальность\n\n\nПисал я на чистейшем JavaScript, причем без использования prototype.__defineGetter__ или prototype.__defineSetter__ в угоду кроссбраузерности ибо IE < 9 такого не умеет. Более подробно про getters/setters написано в этом посте.\n\nДля тех кому интересно — сядем разберем, а кому надо готовое решение — милости прошу в конец поста, ссылки на скачивание — там.\n\nПриступим! Раньше сядем — раньше выйдем.\n",
        "link": "https://habr.com/ru/post/232073/"
    },
    {
        "title": "Базовые подходы к парсингу",
        "body": "ВступлениеУ меня бывают ситуации на проектах, когда нужна база данных какой-то статической информации. Но увы, пошарив в интернетах, какого то публичного хранилища найти не удалось, но тем не менее, я вижу кучу ресурсов, которые это используют. В моем случае мне понадобилась база данных пород кошек, но среди этих примеров может быть что угодно, от базы данных имен, названия городов, областей и т.д. Эта статья о базовых подходах и практиках парсинга данных с веб ресурсов. Хочу подметить, что хоть в моих жилах течет дотнет, в этом примере я буду использовать Node JS, потому что так быстрее, и удобнее в плане парсинга. Чем именно удобней - я расскажу позже в статье.Можем ли мы спарсить?Да, к сожалению (или счастью) веб - он не однообразен, и каждый ресурс может быть уникален по своему, но в нашем деле, ключевым моментом будет то, есть ли на этом ресурсе Server-Side Rendering (SSR), или там Client-Side Rendering и важная для нас информация подтягивается позже с помощью JS. К примеру, нативные апки на React или тот же Angular by default есть CSR. И что бы прикрутить там SSR нужно порой очень сильно попотеть.Тем не менее, большинство сайтов с топ серч результатов любой поисковой системы будут поддерживать именно SSR, потому что таков мир SEO-оптимизаций.",
        "link": "https://habr.com/ru/post/646117/"
    },
    {
        "title": "Еще о парсинге на Prolog'е",
        "body": "Вот тут наткнулся на, в общем-то, простую задачку состоящую в парсинге текстового файла, содержащего 5 миллионов float'ов (и подсчете их суммы). Файл генерируется следующим C#-кодом:\nstatic void Main(string[] args)\n{\n  using (Stream stm = new FileStream(@\"d:\\numbers_large.txt\", FileMode.Create))\n  {\n    TextWriter wr = new StreamWriter(stm);\n    System.Random r = new System.Random();\n    for (int i = 0; i < 5000000; i++)\n    {\n      double d=10000*r.NextDouble() * (r.NextDouble() > 0.7 ? -1.0 : 1.0);\n      wr.Write(\"{0} \", d);\n    }\n    wr.Flush();\n  }\n\n\nЗадача ставилась в контексте обсуждения производительности haskell'я в применении его к задачам парсинга. Я знал, что на прологе подобные задачи решаются красиво и непринужденно используя технику DCG (Definite clause grammar: 1, 2, 3, 4). Фактически, это описание грамматик на языке Пролог, и парсинг по ним, основанный на переборно-откатном принципе работы пролога.\n\nНу то есть обычно получается очень кратко и красиво (например, вот решение задачки о сбалансированности скобок этим методом: программа из 7 строк), но, я подозревал, что не всегда быстро. Собственно, это мне захотелось проверить.\n",
        "link": "https://habr.com/ru/post/60430/"
    },
    {
        "title": "Парсинг (разбор) XML документов с помощью CSS селекторов",
        "body": "Привет. Заметил что постов посвященных Symfony 2.0 все еще не много. Постараюсь это исправить в ближайшее время топиками и переводами про компоненты фреймворка. Сейчас же представляю вашему вниманию перевод статьи с блога Фабьена (Fabien Potencier) который всегда интересно читать. Перевод, возможно не всегда дословный, но смысл я старался передавать четко. Итак начнем.\n\n — HTML и XML документы это как хлеб и масло для веб-разработчиков. День за днем вы, скорее всего, создаете множество HTML документов. И наверняка вам приходится парсить некоторые из них время от времени: потому что вы используете веб службы и хотите извлечь некоторую информацию, или потому, что вы хотите получить данные с нужных веб страниц, или просто потому, что хотите написать функциональные тесты для веб сайта. Получить содержимое достаточно просто, но как его разобрать, чтобы выделить нужную информацию?",
        "link": "https://habr.com/ru/post/90664/"
    },
    {
        "title": "Подходы к извлечению данных из веб-ресурсов",
        "body": "В предыдущей статье мы рассмотрели основные понятия и термины в рамках технологии Data Mining. Сегодня более детально остановимся на Web Mining и подходах к извлечению данных из веб-ресурсов. \n\nWeb Mining — это процесс извлечения данных из веб-ресурсов, который, как правило, имеет больше практическую составляющую нежели теоретическую. Основная цель Web Mining — это сбор данных (парсинг) с последующим сохранением в нужном формате. Фактически, задача сводится к написанию HTML парсеров, и как раз об этом поговорим более детально. \n",
        "link": "https://habr.com/ru/post/99918/"
    },
    {
        "title": "Приходилось ли вам писать парсеры?",
        "body": " ",
        "link": "https://habr.com/ru/post/117914/"
    },
    {
        "title": "Парсер на shell с обходом XOR-шифрования при аутентификации",
        "body": "Недавно возникла необходимость в парсере интернет-счета банковской карты для дальнейшего уведомления об операциях посредством смс\\e-mail. Сделать это было решено по-быстрому шел-скриптом, который будет парсить страницу со счетом с определенной периодичностью при помощи задания в cron, а в случае изменения баланса счета — высылать сообщение на мобильный телефон или e-mail. Ничего сложного на первый взгляд, однако в ходе написания пришлось решить некоторые сложности, о которых вы сможете прочесть под катом.\n\n",
        "link": "https://habr.com/ru/post/127451/"
    },
    {
        "title": "Grab — python библиотека для парсинга сайтов",
        "body": "Лет пять-шесть назад, когда я ещё программировал преимущественно на PHP, я начал использовать библиотеку curl для парсинга сайтов. Мне нужен был инструмент, который позволял эмулировать сессию пользователя на сайте, отсылать заголовки обычного браузера, давать удобный способ отсылки POST-запросов. Сначала я пытался использовать напрямую curl-расширение, но его интерфейс оказался очень неудобным и я написал обёртку с более простым интерфейсом. Время шло, я пересел на python и столкнулся с таким же дубовым API curl-расширения. Пришлось переписать обёртку на python.",
        "link": "https://habr.com/ru/post/127584/"
    },
    {
        "title": "Haskell в реальном мире",
        "body": "В этом блоге уже много написано о самом языке Haskell, и было несколько статей о его практическом применении. Сейчас я вдохновенно расскажу еще об одном реальном применении языка в производстве.\n",
        "link": "https://habr.com/ru/post/129235/"
    },
    {
        "title": "Первые шаги в программировании на Python",
        "body": "Пару месяцев назад взялся я за изучение Python. Прочитав про используемые структуры, работу со строками, генераторы, основы ООП, размышлял какую полезную программу написать, что бы это все применить на реальной задаче.\nПо счастливому стечению обстоятельств ко мне обратились знакомые с просьбой скачать мультфильм «Чудеса на виражах».\n",
        "link": "https://habr.com/ru/post/134863/"
    },
    {
        "title": "Фреймворк для парсинга Grab:Spider",
        "body": "Я автор python библиотеки Grab, которая упрощает написание парсеров веб-сайтов. Я о ней писал вводную статью некоторое время назад на хабре. Недавно я решил вплотную занять парсингом, стал искать free-lance заказы по парсингу и мне понадобился инструмент для парсинга сайтов с большим количеством страниц.\n\nРаньше я реализовывал мультипоточные парсеры с помощью python-тредов с помощью такой вот библиотечки. У threading-подхода есть плюсы и минусы. Плюс в том, что мы запускаем отдельный поток(thread) и делаем в нём, что хотим: можем делать последовательно несколько сетевых вызовов и всё это в пределах одного контекста — никуда не надо переключаться, что-то запоминать и вспоминать. Минус в том, что треды тормозят и жрут память.\n\nКакие альтернативы?",
        "link": "https://habr.com/ru/post/134918/"
    },
    {
        "title": "Небольшая заметка о feature detection",
        "body": "В современном вебе используются две основные технологии определения возможностей браузера:\n(а) распарсить юзер-агент, определить версию браузера и писать в коде свитчи по версии браузера;\n(б) пытаться определять поддержку фич путём проверки нужных полей / вызовов нужных методов.\n\nИсторически сложилось так, что второй вариант считается более true, и именно его реализуют все современные проекты. Достаточно сказать, что этим путём идёт jQuery.\n\nИ, вроде бы, аргументация-то правильная: (а) не нужно хранить базу регулярок, (б) если в каком-то браузере появляется новая фича, она начинает работать автоматически без изменения кода, (в) неизвестные (экзотические, новые) браузеры будут работать без дополнительных телодвижений, (г) если у пользователя подменён юзер-агент, то код всё равно будет работать.\n\nЭто всё хорошо и правильно, но только для небольших проектов.\n\n",
        "link": "https://habr.com/ru/post/153121/"
    }
]