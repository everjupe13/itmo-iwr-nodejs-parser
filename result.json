[
    {
        "title": "Руководство по миграции сервера Parse для разработчиков",
        "body": "Если вы использовали услуги хостинга Parse в качестве бэкенда для своих мобильных приложений, то сейчас вероятно настал идеальный момент попробовать Azure App Service. В связи с последними новостями, ребята из Parse предложили пути миграции существующих бэкендов с Parse на другие площадки. Мы рассчитываем, что когда вы станете искать такую альтернативную площадку, то попробуете и Azure.\nЛегкий путь миграции\nКак предлагается в руководстве по миграции, вы можете мигрировать бэкенд Parse вашего приложения на другой хост, на котором развернут сервер с Parse API размещенный на базе Express. Azure App Service предлагает замечательную альтернативу для хостинга вашей реализации сервера Parse. В конце концов, Node.js-бэкенд предлагаемый в Mobile App в сервисе Azure App Service – это тоже Express. Для того чтобы еще сильнее упростить первые шаги, команда Azure App Service предложила готовый процесс развертывания, который сильно упрощает для вас запуск первого сервера Parse в App Service.\n\nПеред тем как начать, вам стоит почитать руководство по миграции Parse, для того чтобы понять что поддерживается, а что нет в новом сервере Parse. Одной из основных функций, которые отсутствуют в сервере Parse являются пуш-уведомления, но служба Azure Notification Hubs предложит вам готовую альтернативу.\n\nКогда миграция будет завершена, вы можете продолжить использовать клиентские Parse SDK в своих приложениях для доступа к данным (конечно, клиенты должны будут обновлены для использования новых версий SDK и использовать новое расположение сервиса.).\n",
        "link": "https://habr.com/ru/company/microsoft/blog/276407/"
    },
    {
        "title": "Бесплатный реалтайм список онлайн юзеров (Parse.com + Pubnub)",
        "body": "Как-то раз написал мне знакомый задачу для практики: напиши приложение, где есть одна кнопка логина/разлогина и список онлайн пользователь. При этом, пользователи должны «жить» только 30 секунд. Как это всегда бывает, при первичном рассмотрении задачи я подумал: ха, что тут делать то? Используем облачное хранилище и сервер для юзеров, а дальше дело за малым… но не тут то было.\n\nПод катом я расскажу, с какими проблемами при разработке бэкэнда на Parse.com мне пришлось столкнуться, почему пришлось использовать его в связке с Pubnub, и как это всё связать при разработке под Android.\n\nТо, что вышло в итоге:\n\n\n\n",
        "link": "https://habr.com/ru/post/266617/"
    },
    {
        "title": "Сайт без бекэнда: аутентификация пользователя в BaaS parse.com через социальные сети",
        "body": "Я буду каждое утро развертывать мир, как резиновую ленту на мяче для гольфа, а вечером завертывать обратно. Если очень попросишь — покажу, как это делается.Р. Брэдбери\n\nUPDATE: Parse не будет работать к 2017 году.\n\nВведение\nВ статье описан Backend-as-a-Service подход к хранению и обработки данных. Рассказаны преимущества и недостатки представителя такого подхода — сервиса parse.com. Коротко представлен сервис аутентификации пользователей через соц. сети uLogin. Основное назначение — показать, как эти два сервиса могут взаимодействовать, чтобы проект не требовал регистрации пользователей по логину и паролю, но в то же время сохранилась возможность авторизации пользователей к действиям над объектами.\n\nО BaaS и parse.com\nParse.com — один из самых популярных провайдеров backend-as-a-service (BaaS). BaaS подход позволяет не поднимать свой сервер для хранения и обработки данных приложения. Это используется в мобильных разработках и в обычном вебе. Parse.com имеет свои SDK под несколько платформ, в том числе серверных. Но я расскажу о javascript.\n\nВозможность работать с базой данных через javascript, не поднимая свой сервер, открывает отличные возможности, например, для Single page application (SPA), которое можно хостить на Github Pages, Bitbucket и многих других бесплатных. Первый вопрос, который у меня возник, когда я услышал про работу с БД из клиентского кода — это разграничение прав доступа, так как ключи общеизвестны. Изучив документацию parse.com, я выяснил, что для этого используется авторизация пользователей. Каждый пользователь имеет свой логин и пароль. SDK имеет методы регистрации нового пользователя по логину и паролю, аутентификации по этим же данным. Можно добавить email, при этом сам parse.com умеет отправлять настраиваемые письма для верификации email.\n",
        "link": "https://habr.com/ru/post/248511/"
    },
    {
        "title": "Облачный сервис Parse и Intel Edison",
        "body": "\n\nХотите удалённо использовать своё устройство для интернета вещей? Тогда попробуйте Parse — облачный сервис, позволяющий соединять большое количество устройств и легко использовать их через веб-интерфейс. В нём есть всё, что вы ожидаете от облачного провайдера, включая аналитику, статистику, базы данных, push-уведомления, программирование на стороне сервера и многое другое. Система разработки Parse Embedded SDK доступна для множества платформ и мобильных IoT-устройств. \n",
        "link": "https://habr.com/ru/company/intel/blog/388673/"
    },
    {
        "title": "Безопасность Parse в iOS приложении",
        "body": "\n\nParse — прекраснейший BaaS, позволяющий в кратчайшее время поднять полноценную серверную инфраструктуру для мобильного приложения. Возможно, именно из-за этой простоты многие разработчики и забывают о появляющихся проблемах безопасности и открывающихся уязвимостях.\n",
        "link": "https://habr.com/ru/post/247541/"
    },
    {
        "title": "Почему Facebook не стала поддерживать Parse?",
        "body": "\n\nЗакрытие Parse стало одним из неприятных сюрпризов этого года. На момент своей работы Parse оставался одним из самых популярных mBaaS-сервисов (mobile Backend-as-a-Service). Журналисты издания VentureBeat решили разобрать причины отказа Facebook от продолжения поддержки платформы для пользователей сервиса.",
        "link": "https://habr.com/ru/post/298442/"
    },
    {
        "title": "Parse.com закрывается",
        "body": "Привет, друзья!\n\nПо информации из официального блога, известный и популярный среди разработчиков мобильных (и не только) приложений сервис Parse.com прекратит свою работу.\n\nСервис будет полностью отключен 28 января 2017 — у существующих пользователей есть ровно год на миграцию данных и перенос своих приложений в другое место. \n",
        "link": "https://habr.com/ru/post/276135/"
    },
    {
        "title": "Facebook купил бэкенд Parse для сторонних мобильных приложений",
        "body": "\n\nFacebook сегодня официально превратилcя в поставщика платных облачных услуг для разработчиков мобильных приложений. Социальная сеть купила предположительно за $85 млн стартап Parse, который разрабатывает облачный бэкенд для мобильных приложений (mBaaS: mobile-backend-as-a-service). О сделке официально объявлено сегодня и в блоге Parse, и на Facebook.\n",
        "link": "https://habr.com/ru/post/178053/"
    },
    {
        "title": "Parse & Android: рекомендации начинающим разработчикам",
        "body": "Аннотация\nВ данной статье я бы хотел поделиться общими впечатлениями от использования BaaS – решения под названием Parse для разработки бэкэнда Android-приложения, рассказать о всех «подводных камнях», с которыми мне пришлось столкнуться в период разработки. Впервые эту платформу мне посоветовали коллеги по работе, когда я был юниором, и за плечами был всего 1 коммерческий проект. Мотивацией к написанию данной статьи послужили нервы и время, которые я потратил для поиска совместимых версий библиотек и обдумывание странных решений разработчиков платформы, ну или просто потому, что я до сих пор не нашел статей по этому поводу. Так же я ничего не буду рассказывать о том, что такое Parse и как его подключить и настроить, но на всякий случай я оставлю все необходимые ссылки, где можно почитать об этом. ",
        "link": "https://habr.com/ru/post/435424/"
    },
    {
        "title": "Parse.com снижает цены",
        "body": "Привет, друзья!\nЕсли вы разрабатываете приложения для мобильных устройств, то наверняка пользовались (или рассматривали возможность использования) какой-то из существующих BaaS (Backend as a Service) платформ — на данный момент их существует уже несколько десятков.\n\nСпешу поделиться приятной новостью от Parse.com — одной из самых популярных и известных платформ. Сервис пересмотрел ценовую политику (не изменявшуюся с момента старта в 2011 году) и кардинально улучшил условия бесплатного тарифа для новых и существующих пользователей.\n",
        "link": "https://habr.com/ru/post/221549/"
    },
    {
        "title": "Альтернативы сервису parse.com",
        "body": "Как известно, в следующем январе сервис Parse будет закрыт. Большинство разработчиков ищут альтернативу для этого сервиса. В одном из проектов guthub собралось достаточно много альтернатив, со ссылками и описанием. Перед вами — перевод этой страницы.\n \nЧасть 1: универсальные сервисы \nПровайдеры, предоставляющие информацию в реальном времени, помечены (*).\n \nAnyPresence MBaaS (Mobile backend as a service). Упрощает процесс создания мобильных приложений предприятия, работающих на разных устройствах, не ущемляя гибкость средств, доступных разработчику. Легок в использовании даже для неопытных пользователей. Опытные разработчики получают доступ к исходникам всех компонентов.\n \nApiOmat позволяет процессам предприятия работать как мобильным приложениям. Мобилизует сложные бизнес-структуры и процессы путём объединения существующих IT-систем с мобильными приложениями и устройствами. Его можно устанавливать прямо в дата-центре компании, что позволит работникам выполнять свою работу через приложения вне зависимости от их местонахождения.\n \nAppcelerator Arrow (*) Состоит из двух основных компонентов, Builder и Cloud. Arrow Builder позволяет быстро создавать API, модели данных и соединители данных как через мастер настройки, так и через написание кода. Arrow Cloud – это эластичный облачный сервис, где выполняются API и происходит анализ их использования, плюс обеспечивается работа двух десятков смежных сервисов (гео, хранение фотографий и т.п.) с использованием ArrowDB\n \nAppery.io Интегрированные сервисы MBaaS – чтобы разработчики могли сконцентрироваться на приложениях, не отвлекаясь на инфраструктуру.\n ",
        "link": "https://habr.com/ru/post/277979/"
    },
    {
        "title": "Печатаем документ в виде чека с помощью Python и Parse",
        "body": "Не так давно передо мной встала задача: распечатка документа определенного формата с помощью мобильного устройства. На телефоне должны были вводиться определенные значения, отправляться на сервер (для того, чтобы потом можно было использовать эти данные на веб сайте) и печать документ с этими данными. С самого начала мой выбор пал на Google cloud print, так как он максимально прост в использовании и решении подобных задач. Но при использовании этого варианта есть несколько недостатков: \n\n\nОчень медленная обработка запроса \nНужно где-то формировать PDF документ и возвращать ссылку на него\nПостоянно нужно выбирать принтер (если у вас подключен только один принтер к Google cloud print, то все равно нужно выбирать между ним и сохранением на Google Drive)\n \nПоэтому я решил написать свой скрипт для подобных операций.\n",
        "link": "https://habr.com/ru/post/246989/"
    },
    {
        "title": "Куда переехать с Parse Push?",
        "body": "Сервис Parse, позволявший, в числе прочего, легко запрограммировать отправку пуш-уведомлений, закрывается 28 января; осталось 8 дней. Самое время переехать  (это шутка, на самом деле нужно было переехать уже давно).\n\nМы знаем два хороших сервиса на замену:\n",
        "link": "https://habr.com/ru/company/meduza/blog/320062/"
    },
    {
        "title": "Open Source Java library with stacktrace filtering, Silent String parsing and Version comparison",
        "body": "Over some time in different jobs, I came across a need for several utilities that I couldn't find available at the time. And I saw that I needed them several times over and over again. So I wrote my own small library that I found very useful. So I just published it as an open-source java library. \n\nHere is the Github link\n\nJavadoc online is available here\n\nAlso, this library is available on Maven Central. Here are the Maven artifacts (the version 1.5.1.2 is the latest at the time of writing of this article but might change in the future. To check for the latest version search for artifact «MgntUtils» at http://search.maven.org/):\n\n<dependency>\n     <groupId>com.github.michaelgantman</groupId>\n     <artifactId>MgntUtils</artifactId>\n     <version>1.5.1.2</version>\n</dependency>\n\n <dependency>\n     <groupId>com.github.michaelgantman</groupId>\n     <artifactId>MgntUtils</artifactId>\n     <version>1.5.1.2</version>\n     <classifier>javadoc</classifier>\n</dependency>\n\n<dependency>\n     <groupId>com.github.michaelgantman</groupId>\n     <artifactId>MgntUtils</artifactId>\n     <version>1.5.1.2</version>\n     <classifier>sources</classifier>\n</dependency>\n\nBelow is just a short explanation of what is there. The library comes with a nicely written (I hope) JavaDoc with a detailed description. So here is the list of features:",
        "link": "https://habr.com/ru/post/480268/"
    },
    {
        "title": "Выпускник Y Combinator привлек $1,5 миллиона в раунде с участием основателя Parse Ильи Сухаря",
        "body": "Основатель Parse и партнер фонда Y Combinator Илья Сухарь инвестировал в компанию Yhat. Она занимается разработкой технологий работы с данными в научной сфере – data science. \n\nВ раунде также участвовали Тихон Бернстайн, Джастин Кан, KEC Ventures и некоторые другие инвесторы. По итогам раунда Yhat получила $1,5 миллиона, передает Firrma. \n\nYhat – выпускник площадки для стартапов Y Combinator. На сегодняшний день у компании два приложения – ScienceOps и ScienceBox. ScienceOps – флагманский продукт Yhat. Это экспертная система, анализирующая большие объемы данных. Она позволяет принимать решения и продвигаться в создании продукта на основании проведенного анализа. \n\nВ мае Илья Сухарь вложился во французский стартап Algolia. Компания занимается оптимизацией поисковых движков сайтов. Суммарный объем раунда составил $18,3 миллиона.\n\nParse – облачная платформа для разработки игр и приложений. Илья Сухарь запустил ее в 2011 году. На начальном этапе ему удалось привлечь $7 миллионов. После этого он получал предложения от таких компаний, как Dropbox, Google и Yahoo! Однако в 2013 году стартап выкупила компания Facebook за $85 миллионов.",
        "link": "https://habr.com/ru/news/t/291190/"
    },
    {
        "title": "Prett Parsing — метод Вогана Пратта для разбора выражений",
        "body": "В тему компиляций и вычислений выражений.\n\nВ далёком 1973 году Воган Прэтт (Vaughan Pratt) предложил простой и эффективный метод разбора выражений, не использующий ни автоматы, ни грамматику как таковую.\n\nИдея заключается в том, что каждый символ (token) наделяется свойствами:\nlbp = приоритет связывания символа слева, \nnud = функция, определяющая результат применения оператора в начале выражения, \nled = функция, определяющая результат применения в середине выражения.\n\nОсновной разбор осуществляется по схеме:\nразбор(приоритет продолжения):\n    вытолкнуть символ из входного потока\n    результат = вызов nud этого символа\n    пока приоритет lbp следующего в потоке символа > приоритета продолжения:\n        вытолкнуть символ из входного потока\n        результат = применени led этого символа к текущему результату\n\nКонстанты и переменные имеют приоритет связывания 0, а функция nud возвращает их значение (или ссылку). Поэтому применение разбора к константам сразу возратит их значение.\nДля бинарных операторов функция led рекурсивно вызывает продолжение разбора (справа) вплоть до более низкого приоритета, и делает что-нибудь с уже накопленым (слева) результатом, и полученным рекурсивно.\nРезультат применения оператора аггрегируется для внешнего вызова.\nМного-арные операторы — получают аргументы дополнительным вызовом функции разбора.\nПрефиксные операторы делаются с помощью определения для них функции nud.\nДля правостороннего связывания меняется приоритет продолжения рекурсивного разбора.\n\nНа сайте effbot.org приводится подробная реализация на питоне. \nТам же есть ссылки для жаваскрипта и схемы.\n",
        "link": "https://habr.com/ru/post/50349/"
    },
    {
        "title": "Особенности функций Mikrotik script. Сode из :parse",
        "body": "Исследование функций и скриптов в Mikrotik script. Рассматриваются разные способы создания и вызова функций и скриптов с передачей в них параметров. Оператор :parse и особый тип данных code.",
        "link": "https://habr.com/ru/post/650795/"
    },
    {
        "title": "AngularJs $parse hacks",
        "body": "Предлагаю перевод публикации «AngularJs $parse hacks».\n\nВ недрах AngularJs прячется одна маленькая и замечательная функция: $parse. Обычно она используется внутри фрэймворка для интерполяции значений, например при двусторонней провязке данных (two way data binding):\n",
        "link": "https://habr.com/ru/post/244001/"
    },
    {
        "title": "Flash XML parsing: win vs mac",
        "body": "Простой и понятный с виду код:\npackage {\n  import flash.display.Sprite;\n  \n  public class XCDATATest extends Sprite {\n    public function XCDATATest() {\n      var node:XML = <format>\n       <![CDATA[<b>ds3 - CSV Settings:</b> \nignore_first_row=<b>true</b> \ncolumns_separator=<b>;</b> \nrows_separator=<b>\\n</b>]]> \n      </format>;\n      trace (String(node));\n    }\n  }\n}\n\n* This source code was highlighted with Source Code Highlighter.\nМожет привести к очень «веселым» последствиям разной работы swf-ки под разными системами.\n",
        "link": "https://habr.com/ru/post/89905/"
    },
    {
        "title": "Parse it!",
        "body": "Какое-то время назад мне по работе пришлось провести небольшое исследование. Суть его состояла в поиске наилучшего pdf-парсера реализованного на java. \n\nНемного о проекте. В нем реализована система пересылки внутренних сообщений, к которым могут быть прикреплены файлы. Также есть поиск, который должен осуществляться по содержимому аттачментов. Большую часть подобных аттачментов составляют pdf-ки.\nСобственно работа механизма довольно проста: при отсылке сообщения данные аттачмента парсятся и по ним стороится индекс.\n\nДолгое время документы парсились при помощи библиотеки PDFBOX, работа которой не вызвала ни у кого радости: долго и со сбоями.\nВ итоге были выбраны 4 библиотеки, сравнением которых я занялся: PDFBOX, JPod, iText и Acrobat.\n",
        "link": "https://habr.com/ru/post/57076/"
    },
    {
        "title": "Парсим weblancer используя PROXY",
        "body": "Цель работы\n\nПарсим сайт, используя прокси-сервера.\nСохраняем данные в формате CSV.\nПишем поисковик по найденным данным.\nСтроим интерфейс.\n\n\n\nИспользовать будем язык программирования Python. Сайт, с которого мы будем качать данные — www.weblancer.net (парсинг старой версии этого сайта был размещен здесь), в нем есть предложения работы по адресу www.weblancer.net/jobs. С него мы и будем получать данные — это название, цена, количество заявок, категория, краткое описание предлагаемой работы. \n\nВход с использованием прокси означает — вход на сайт под ненастоящим адресом. Пригодится для парсинга сайта с защитой бана по IP адресу (то есть, если вы слишком часто, за короткий отрезок времени, входите на сайт).",
        "link": "https://habr.com/ru/post/322608/"
    },
    {
        "title": "Компилятор на JavaScript с использованием ANTLR",
        "body": "\n\n\nВ начале этого года я присоединилась к команде, работающей над MongoDB Compass — графическим интерфейсом для MongoDB. Пользователи Compass через Intercom запросили инструмент, позволяющий писать запросы к базе данных, используя любой удобный им язык программирования, поддерживаемый драйвером MongoDB. То есть нам нужна была возможность трансформировать (компилировать) язык Mongo Shell в другие языки и обратно.\n\nДанная статья может стать как практическим руководством, помогающим при написании компилятора на JavaScript, так и теоретическим ресурсом, включающим основные понятия и принципы создания компиляторов. В конце приведен не только полный список всех используемых при написании материалов, а также ссылки на дополнительную литературу, направленную на более глубокое изучение вопроса. Информация в статье подается последовательно, начиная с исследования предметной области и далее постепенно усложняя функционал разрабатываемого в качестве примера приложения. Если во время прочтения вам кажется, что вы не улавливаете переход от одного шага к другому, вы можете обратиться к полной версии данной программы и возможно это поможет устранить возникший пробел.",
        "link": "https://habr.com/ru/post/351906/"
    },
    {
        "title": "Создание языка программирования с использованием LLVM. Часть 2: Реализация парсера и AST",
        "body": "Добро пожаловать в Главу 2 учебника «Создание языка программирования с LLVM». В этой главе мы увидим, как использовать лексический анализатор, созданный в Главе 1, чтобы построить полный синтаксический анализатор для нашего языка Kaleidoscope. После того, как у нас будет готов парсер, мы будем строить Abstract Syntax Tree (AST) (Абстрактное синтаксическое дерево).\n",
        "link": "https://habr.com/ru/post/120005/"
    },
    {
        "title": "Automation VS Chaos",
        "body": "\n\nIT technologies evolution allowed to control huge data flows. Business has a lot of IT solutions: CRM, ERP, BPM, accounting systems or at least just Excel and Word. Companies are different too. Some of companies are composed of plenty branches. Let’s name such as “Pyramid”. Pyramids have data synchronization issue for pile of IT systems. Software vendors and versions differ for branches significantly. In addition management company continuously modify reporting requirements that causes frustration assaults in the branches. This is a story about the project I happened to encounter chaos that needed to be systematized and automated. Low budget and tight deadlines limited the use of most existing industrial solutions but opened up scope for creativity.",
        "link": "https://habr.com/ru/post/436240/"
    },
    {
        "title": "Парсеры Пратта для чайников",
        "body": "Рекурсивный спуск работает идеально, когда вы можете принимать решение относительно разбираемого куска кода с помощью текущего контекста и токена.\nКартину портят выражения: постфиксные, инфиксные и прочие. Проблема: вы не можете понять, какого типа выражение вы обрабатываете до тех пор, пока не разберёте его первую половину. Зачастую для вас также важны приоритет операции и её ассоциативность, чтобы построенное AST имело правильную структуру.\nВ этой статье мы напишем парсер для диалекта Go, особенности которого мы рассмотрим чуть ниже. Как вы сможете убедиться, алгоритм Пратта решает большинство наших проблем.\n",
        "link": "https://habr.com/ru/post/494316/"
    },
    {
        "title": "Парсим базу юриков ФНС (велосипедостроение с xml, csv, SQLite и Питоном)",
        "body": "Замечания: статья для совсем маленьких и крутым спецам по кодингу будет не интересно, лучше ее пропустить. В коде первым комментарием поставлена ссылка на расположение файла с этим кодом для удобства и простоты. Главная задача была получить результат в виде таблицы SQLite. Качество кода оцениваем как ниже среднего, но с заявкой на максимальную простоту. Код написан достаточно просто и без пояснений, но готовы исправиться, поясниться.ВводнаяЧто хотим сделать: взять данные по юридическим лицам (ЮЛ) РФ за 2019 год (идентификаторы ЮЛ: наименование и ИНН(ЮЛ), оборот, расход) и положить в SQLite. ",
        "link": "https://habr.com/ru/post/577148/"
    },
    {
        "title": "Распарсить HTML в .NET и выжить: анализ и сравнение библиотек",
        "body": "\nВ ходе работы над одним домашним проектом, столкнулся с необходимостью парсинга HTML. Поиск по гуглу выдал комментарий  Athari и его микро-обзор актуальных парсеров HTML в .NET за что ему огромное спасибо. \n\nК сожалению, никаких цифр и/или аргументов в пользу того или иного парсера найдено не было, что послужило поводом к написанию данной статьи.\n\nСегодня я протестирую популярные, на данный момент, библиотеки для работы с HTML, а именно: AngleSharp, CsQuery, Fizzler, HtmlAgilityPack и, конечно же, Regex-way. Сравню их по скорости работы и удобству использования.\n\n\nTL;DR: Код всех бенчмарков можно найти на github. Там же лежат результаты тестирования. Самым актуальным парсером на данный момент является AngleSharp — удобный, быстрый, молодежный парсер с удобным API.\n\nТем, кому интересен подробный обзор — добро пожаловать под кат.\n",
        "link": "https://habr.com/ru/post/273807/"
    },
    {
        "title": "Регулярные выражения и математический парсер",
        "body": "Когда-то давно мне понадобился парсер математических выражений на C#. Конечно, скачать готовую реализацию — не проблема. Но вот только Интернета у меня в те годы не было. В итоге абсолютно без раздумий и без теоретических основ парсеров, конечных автоматов и прочего он был написан через регулярные выражения. Минут за 10. Стоит отметить, что нужны были только арифметический действия и скобки. Поддержка тригонометрических функций и прочего не требовалась.\n",
        "link": "https://habr.com/ru/post/271285/"
    },
    {
        "title": "Использование нейронных сетей для поиска ответов в таблицах",
        "body": "Большая часть информации в мире хранится в виде таблиц, которые можно найти в Интернете или в базах данных и документах. В таблицах может находиться всё что угодно, от технических характеристик потребительских товаров до финансовой статистики и данных экономического развития страны, спортивных результатов и многого другого. Для того, чтобы найти ответ, сейчас необходимо вручную просматривать эти таблицы или полагаться на специальную службу, которая дает ответы на конкретные вопросы (например, о спортивных результатах). Однако эта информация была бы намного более доступной и полезной, если бы ее можно было запрашивать на естественном языке.\nНапример, на следующем рисунке показана таблица с рядом вопросов, которые люди могут задать. Ответ на эти вопросы может быть найден в одной или нескольких ячейках таблицы («У какого рестлера было больше всего побед?» — «Which wrestler had the most number of reigns?»), или может потребоваться объединение нескольких ячеек таблицы («Сколько чемпионов мира имеют только одну победу?» — «*How many world champions are there with only one reign?»).\n\nТаблица и вопросы с ожидаемыми ответами. Ответы можно выбрать напрямую из таблицы (#1, #4) или вычислить на основе данных таблицы (#2, #3).",
        "link": "https://habr.com/ru/post/582248/"
    },
    {
        "title": "One of the ways to dynamically deserialize a part of a JSON document with an unknown structure",
        "body": "In this topic, I will tell you how to dynamically parse and deserialize only part of the whole JSON document. We will create an implementation for .NET Core with C# as a language.For example, we have the next JSON as a data source for the report. Notice that we will get this JSON in the runtime and at the compile step we don't know the structure of this document. And what if you need to select only several fields for processing?",
        "link": "https://habr.com/ru/post/559122/"
    },
    {
        "title": "Простая библиотека для парсинга HTML",
        "body": "Недавно зарелизил Leaf, это небольшая библиотека для парсинга HTML на Python. \nОна уже довольно долгое время покрывает все мои нужды в парсинге, но еще есть идеи для развития.\nЭта библиотека по сути обертка над lxml, которая делает работу с ней гораздо приятней. \n",
        "link": "https://habr.com/ru/post/115135/"
    },
    {
        "title": "Продолжаем велосипедостроение с Python, xml, csv, sqlite. Часть 2. Ищем и правим ошибки, пока не налетаем на…",
        "body": "Примечание. Как и первая часть эта тоже для совсем маленьких кодеров-велосипедостроителей на Питоне. Для прожженных кодеров будет скучно. Изначально хотели внести исправления сразу в первую статью по мере нахождения ошибок, но после некоторого раздумия решили, что это неудобно. Ошибки исчезнут совсем, а именно ошибки приносят максимальную пользу для начинающего кодера. А посему ошибки оставляем в первой части, а в этой начинаем от них избавляться.окончание трилогии тут (часть 3): \"Последний велосипедно-питоний бой с ошибками импорта sqlite за 2 174 433 строчки. Часть 3\"",
        "link": "https://habr.com/ru/post/585592/"
    },
    {
        "title": "Парсим русский язык",
        "body": "\nВ прошлый раз (почти год назад) мы определяли части речи в русском тексте, производили морфологический анализ слов. В этой статье мы пойдем на уровень выше, к синтаксическому анализу целых предложений.\n\nНаша цель заключается в создании парсера русского языка, т.е. программы, которая на вход бы принимала произвольный текст, а на выходе выдавала бы его синтаксическую структуру. Например, так:\n\n\"Мама мыла раму\":\n\n(предложение\n    (именная гр. (сущ мама))\n    (глаг. гр. (глаг мыла)\n        (именная гр. (сущ раму)))\n    (. .)))\n\n\nЭто называется синтаксическим деревом предложения. В графическом виде его можно представить следующим образом (в упрощенном виде):\n",
        "link": "https://habr.com/ru/post/148124/"
    },
    {
        "title": "Искусство парсинга или DOM своими руками",
        "body": "Привет, Хабр! Недавно я задался идеей создать простой язык разметки наподобие markdown, который отлично подходил бы для моих задач, а именно — быстрого написания лекций с форматированием и возможностью вставки математических формул «на лету», с применением одной лишь клавиатуры. Чтобы перевести текст, написанный в таком формате, в более понятную форму, например, документ LibreOffice Writer, нужен синтаксический анализатор, проще говоря — парсер. Поскольку я привык делать велосипеды, то направился в поисковые системы с запросами «parser example», «html to DOM», «how to parse html» и др. К моему разочарованию, на всех найденных ресурсах либо приводились элементарные примеры типа калькулятора Страуструпа с рекурсивным спуском, либо использовались готовые решения, такие как flex, bison, llvm и yacc. Библиотек, предназначенных для парсинга строго определённых языков, нашлось ещё больше (gumbo, jsoup, rapidjson, инструменты Qt и др.) Ни то, ни другое не входило в мои планы по написанию парсера своей разметки на C++ с использованием лишь стандартной библиотеки, поэтому моим источником знаний об искусстве парсинга вместо электронных ресурсов стали методички технических институтов. О том, как взять текст и построить из него AST (абстрактное синтаксическое дерево), о некоторых подводных камнях, на которые я натыкался в процессе, о возможных ошибках я сегодня и расскажу.\n\nСразу оговорюсь, — если ваша цель — свой скриптовый язык или что ещё сложнее, этой статьи будет недостаточно для его реализации. В идеале нужно на отлично знать теорию автоматов и дискретные структуры. Но в качестве отправной точки можно пока ограничиться и моим опытом, которым я щедро поделюсь под катом. Это не совсем то, что я задумывал изначально, зато идеально подходит для примера. Парсить мы будем HTML, как простой и всем знакомый язык.",
        "link": "https://habr.com/ru/post/442964/"
    },
    {
        "title": "Искусство парсинга 2 или транслитерация собственной разметки",
        "body": "+БОНУС: взаимное включение классов друг в друга в C++\nПривет, Хабр! Эта статья — прямое продолжение статьи Искусство парсинга или DOM собственными руками, где мы разобрали HTML-документ и построили на его основе абстрактное синтаксическое дерево (AST) с доступом к любому элементу через индексацию при помощи лишь стандартной библиотеки C++, проще говоря, научились самостоятельно парсить XML-подобные штуки. Напомню, что процесс парсинга, или синтаксического анализа/разбора состоит из двух этапов: лексического разбора (разбора текста на токены) и построения AST. Если первый мы рассмотрели очень подробно, с примерами и исходниками, то описание второго похоже на пустую куколку бабочки, у которой есть только оболочка, а прекрасное содержимое автор извлёк перед публикацией. На то была причина, для HTML построить дерево действительно просто, нужно всего 4 класса: пустой тег, блок, текстовый узел и корень документа, наследуемый от блока. Сегодня мы оставим такую простоту позади и построим дерево, где свойства элементов, и пустых, и блочных, будут содержаться не в атрибутах тегов, а непосредственно в классах, а для этого классов придётся создать много. Действительно много. Строить будем не из простых известных языков разметки, а создадим свой, с правилами, показанными на изображении под катом. Плюс в конце ещё переведём, или, говоря правильнее, транслитируем документ с предыдущей статьёй, размеченной нашим языком, в HTML, а в качестве бонуса я отвечу начинающим программистам C++ на тривиальный, но труднонаходимый вопрос: как включать классы «друг в друга»?",
        "link": "https://habr.com/ru/post/444876/"
    },
    {
        "title": "Работаем с XML как с массивом, на PHP",
        "body": "Всем привет. Хочу поделиться своим опытом в парсинге XML, хочу рассказать об инструменте который мне в этом помогает.XML ещё жив и иногда его приходиться парсить. Особенно если вы работаете со СМЭВ (привет всем ребятам для которых \"ФОИВ\" не пустой звук :) ).Цели у такого парсинга могут быть самые разные, от банального ответа на вопрос какое пространство имён используется в xml-документе, до необходимости получить структурированное представление для документа вцелом.Инструмент для каждой цели будет свой. Пространство имён можно найти поиском подстроки или регулярным выражением. Что бы сделать из xml-документа структурированное представление (DTO) - придётся писать парсер.Для работы с XML в PHP есть пара встроенных классов. Это XMLReader и SimpleXMLElement.",
        "link": "https://habr.com/ru/post/599067/"
    },
    {
        "title": "Разбор URL в Zend Framework 2",
        "body": "Задача: \nИметь метод, разбирающий на составляющие строку содержащую URL. Строка может содержать как абсолютный, так и относительный URL, и оба эти варианты должны быть правильно разобраны.\n Причём в стоке допустим «неправильный» формат абсолютной ссылки — без «http://». Далее по тексту ссылки «неправильного» формата будем называть неполными абсолютными ссылками.\nРеализовать поддержку «РФ» доменов.\n\n",
        "link": "https://habr.com/ru/post/198614/"
    },
    {
        "title": "Как я парсил БД C-Tree, разработанную 34 года назад",
        "body": "\nПрилетела мне недавно задача дополнить функционал одной довольно старой програмки (исходного кода программы нет). По сути нужно было просто сканить периодически БД, анализировать информацию и на основе этого совершать рассылки. Вся сложность оказалась в том, что приложение работает с БД c-tree, написанной аж в 1984 году.\n\nПорывшись на сайте производителя данной БД нашёл некий odbc драйвер, однако у меня никак не получалось его подключить. Многочисленные гугления так же не помогли нормально сконнектиться с базой и доставать данные. Позже было решено связаться с техподдержкой и попросить помощи у разработчиков данной базы, однако ребята честно признались что уже прошло 34 года, всё поменялось 100500 раз, нормальных драйверов для подключения на такое старьё у них нет и небось уже тех программистов в живых тоже нету, которые писали сие чудо.\nПорывшись в файлах БД и изучив структуру, я понял, что каждая таблица в БД сохраняется в два файла с расширением *.dat и *.idx. Файл idx хранит информацию по id, индексам и т.д. для более быстрого поиска информации в базе. Файл dat содержит саму информацию, которая хранится в табличках.\n\nРешено было парсить эти файлики самостоятельно и как-то добывать эту информацию. В качестве языка использовался Go, т.к. весь остальной проект написан на нём.",
        "link": "https://habr.com/ru/post/351658/"
    },
    {
        "title": "Последний велосипедно-питоний бой с ошибками импорта  sqlite за 2 174 433 строчки. Часть 3",
        "body": "Замечание. Вся трилогия (часть 1 тут, часть 2 тут) о велосипедостроении с sqlite, xml, csv только для совсем маленьких Питоньих кодеров. Не для крутых кодеров, они умрут от скуки в нашем опусе и ничего нового не увидят. В третьей части заканчиваем все, что начали ранее.Начинаем изыски причины и местонахождения ошибки.Итак: правильный ответ: ошибки в коде нет. Ну точнее ошибка возникает при работе кода из-за ошибки данных в файлах. Чтобы убедиться, что это так, добавим в код обработку исключений. Совсем немного поправим наш код, добавим обработку и вывод на печать исключений:",
        "link": "https://habr.com/ru/post/588066/"
    },
    {
        "title": "Социальная сеть без сервера. История разработки iOS-клиента и backend",
        "body": "Интро\nЯ хочу рассказать об опыте разработки iOS-клиента для социальной сети и бэкенда реализованного с помощью BaaS Parse.com Нижe приведена архитектура, которая у нас получилась, некоторые tips&tricks и размышления по поводу работы с parse.com.\nИзначально клиент думал о сервере на RoR, но, видимо, они не рискнули вкладывать сразу много денег. Мы подписали строгое NDA, поэтому ссылку на Appstore я дать не могу. По доброй традиции всех IT книг, хочу выразить благодарность заказчику Х и компании Y за то что мне довелось поработать над этим проектом и подчерпнуть весь этот опыт. Также спасибо А. за то, что написал часть про модуль для встроеных покупок.\n",
        "link": "https://habr.com/ru/post/198864/"
    },
    {
        "title": "Простой лидерборд на Unity3D с facebook-ом",
        "body": "После участия в Ludum Dare 31 у нас появилась игра, в которой можно соревноваться с друзьями и мы решили добавить к ней лидерборд, с авторизацией через Facebook. Какие сложности могут возникнуть и как сделать подобный в своей игре читайте под катом.\n\n\n",
        "link": "https://habr.com/ru/post/245985/"
    },
    {
        "title": "Поверхностный обзор javascript-enabled BaaS платформ",
        "body": "Будучи начинающим javascript разработчиком, я заинтересовался темой межплатформенной разработки мобильных приложений. В этой области, в настоящее время, балом правят Cordova (phonegap) www.phonegap.com, Appcelerator Titanium www.appcelerator.com, Mosync www.mosync.com.\n\nРано или поздно, после выпуска первых мини-приложений, основанных на этих системах, разработчику захочется создать что-нибудь Большое и Светлое, и хотелось бы, чтоб в этом новом приложении/сервисе были пользователи (c аватарами и проч.), push-notifications, user-generated-content и т.д… Но при этом, не хотелось бы тратить время и деньги на написание своей серверной инфраструктуры, а хотелось бы воспользоваться чем-нибудь недорогим, вплоть до бесплатного, и простым в освоении (и ещё чтоб «в облаке»!).\n\nКак раз подобного рода тяжести и взяли на себя многочисленные Backend-as-a-Service (не путать с другими aaS). Я хочу кратко пробежаться по некоторым игрокам на этом рынке. Подчеркну, что меня в первую очередь интересовали те платформы, которые можно было бы легко и безопасно использовать с мобильным javascript (Phonegap/Titanium). Если платформа просто предоставляет REST API, этого мало, т.к. вопрос безопасности требует наличия некоторого специального ограничительного функционала: AccessControlList/permissions/masterKeys/etc. И вообще, желательно отдельный javascript SDK.\n\n(Так как это «поверхностный обзор», я не буду подробно писать кому и зачем нужен BaaS и почему вместо всего этого не использовать старый-добрый PHP/MySQL на VPS или новый-добрый node.js в облаке)\n\nЯ начал поиск с www.programmableweb.com/apis/directory/1?apicat=Backend там перечислено почти 40 платформ, просмотрев их, я оставил для обзора те, что легко можно использовать с javascript:\n",
        "link": "https://habr.com/ru/post/150729/"
    },
    {
        "title": "BaasCMS – бэкенд не нужен",
        "body": "\n\nBaasCMS — это JavaScript CMS, использующая в качестве бэкенда популярных провайдеров BaaS. На данный момент поддерживается только Parse.com.\n\nИсходный код BaasCMS доступен на GitHub.\n\nBaasCMS Demo на GitHub Pages\nТоже самое BaasCMS Demo на Tumblr\n\nМожно посмотреть Админ-панель для этого демо (изменения/добавление запрещены). В соответвующую форму на главной странице админки нужно вставить следующие ключи:\n\n\nApplication ID: nM7P7NnFA95CK1WrqWOf9wa3mskctaTOdk9vYflj\nJavascript Key: 0zHfA9FG8L1xR699qmFXjxkZ1pDxgml0MWZMpqJG\n\n",
        "link": "https://habr.com/ru/post/234409/"
    },
    {
        "title": "Средства, которые позволили нам ускорить разработку игры",
        "body": "\nРаньше я работал над созданием мобильных игр как гейм-дизайнер или продюсер, но сам еще никогда профессионально не писал код. Несколько месяцев назад мне захотелось это исправить и сделать игру своими руками. Так, спустя два месяца работы, силами трех человек в App Store и Google Play появились «Котики». В своей истории я хочу поделиться приобретенным опытом и рассказать о средствах разработки, которые позволили нам быстро сделать эту игру.",
        "link": "https://habr.com/ru/post/250847/"
    },
    {
        "title": "Обзор новорождённой платформы Scorocode",
        "body": "\n\nBaaS-платформы (Backend as a Service) сделали разработку и сопровождение backend'а для мобильных и веб-приложений достаточно простыми и предсказуемыми процессами. Одним из флагманов движения BaaS стала компания Parse, но в 2016 году она заявила о прекращении обслуживания клиентов с 2017 года.\n\nВ связи с закрытием их сервиса и отсутствием русскоязычных облачных BaaS, мы решили создать собственный аналог — Scorocode. Об этом под катом.\n",
        "link": "https://habr.com/ru/company/scorocode/blog/303954/"
    },
    {
        "title": "Итоги и прогнозы года для онлайн-издателей: Социальные медиа помогают увеличивать посещаемость изданий",
        "body": "То, что СМИ — тормоза, доказывать уже не надо. Журналисты — как немногочисленные городские таксисты, а пользователи соцсетей — как Uber, то есть везде и всюду. Поэтому становится интересней «борьба» на более высоком уровне — между поисковиками и соцсетями, где поисковикам в среднесрочке тоже ничего не светит, ввиду запретов для поисковиков (технологических или юридических), которые выставляют крупные соцсети для сбора сообщений пользователей.\n\nРазделение на пары архивы/поисковики и оперативное/соцмедиа вполне естественны, человеческий мозг — с кратковременной и долговременной памятью — отлично сочетаются и помогают решать многочисленные задачи.\n\nЧто делать издателям-блогерам-людям в динамическом мире изменяющихся привычек подрастающего человечества? Слушать, слышать, реагировать и формировать тренды. Далее — перевод статьи коллег из Parse.ly с небольшой аналитикой популярных (для англоязычных читателей) материалов в онлайн-СМИ и предложениями по действиям издателям в новом году. Насколько соответствует — решайте сами. Ловите тренды.\n",
        "link": "https://habr.com/ru/company/palitrumlab/blog/298966/"
    },
    {
        "title": "Как разобрать URL в JavaScript?",
        "body": "\n\nДоброго времени суток, друзья! \n\nПредставляю Вашему вниманию перевод заметки «How to Parse URL in JavaScript: hostname, pathname, query, hash» автора Dmitri Pavlutin. \n\nУнифицированный указатель ресурса или, сокращенно, URL — это ссылка на веб-ресурс (веб-страницу, изображение, файл). URL определяет местонахождения ресурса и способ его получения — протокол (http, ftp, mailto). \n\nНапример, вот URL данной статьи:\n\nhttps://dmitripavlutin.com/parse-url-javascript\n\nЧасто возникает необходимость получить определенные элементы URL. Это может быть название хоста (hostname, dmitripavlutin.com) или путь (pathname, /parse-url-javascript). \n\nУдобным способом получить отдельные компоненты URL является конструктор URL(). \n\nВ этой статье мы поговорим о структуре и основных компонентах URL. ",
        "link": "https://habr.com/ru/post/510742/"
    },
    {
        "title": "«Правильный» html парсинг",
        "body": "\n\nПервый раз я запустил Eclipse еще весной, почитал книжки на английском, поставил SDK, немного поигрался и забросил. В начале зимы я купил себе первый смартфон на базе Android, но вновь вернутся к разработке меня подтолкнул недавний пост, в котором говорилось, что можно обойтись и знанием C#, с которым в отличии от Java я знаком. Мне было достаточно одного вечера, чтобы понять, что за связку Visual Studio и Monodroid я больше не сяду, позже я прочитал этот пост, где полностью согласился с автором.\n\nПосле небольшого вступления перейду к теме топика. Довольно большое количество приложений под мобильные устройства взаимодействуют с сайтами и не секрет, что порой нужно получить какую-то информацию со страницы — это может быть курс валют или что-нибудь другое, и нет никакого желания делать это посредством браузера.\n\nБольшинство разработчиков, получают html код страницы и перегоняют его в xml, что является неправильным подходом, так как html является «правильным» xml не всегда, вроде на хабре писали, что для браузера не обязателен тег html (современный браузер и без него должен отобразить страницу) или просто будут ошибки, тогда на помощь приходят библиотеки. Из них я выбрал HtmlCleaner.\n\nПод катом я расскажу, как подключить эту библиотеку, а также напишем простой парсер stackoverflow.com.\n",
        "link": "https://habr.com/ru/post/115127/"
    },
    {
        "title": "URL.js или дружим JavaScript с обработкой ссылок",
        "body": "\n\nДоброго времени суток, уважаемые хабравчане!\n\nВозникла передо мной сегодня задача генерации GET-параметров и всего URL в целом, на стороне клиента, прям вот щас, без возможности «поговорить» с сервером. Сразу оговорюсь, про этот  пост я узнал вот прям перед написанием данной статьи ибо сначала закончил писать, а потом уже прибег к поиску, да и пост тот — не со всем про то же самое, что у меня.\n\nИтак, к делу.\n\nЗадача и проблемы\nПроблемы — те же что и в посте, который я привел выше:\n\nНевозможность использовать window.location для «приготовления» URL;\nНельзя работать сразу с несколькими window.location в силу политики безопасности браузеров;\nОтсутствие известных готовых решений ( да и сейчас, уже апосля, я не нашел подобного кода )\n\nЗадачи которые я поставил перед собой:\n\nУдобный синтаксис\nВозможность как читать части URL так и изменять их\nРабота с GET-параметрами\nКроссбраузерность и универсальность\n\n\nПисал я на чистейшем JavaScript, причем без использования prototype.__defineGetter__ или prototype.__defineSetter__ в угоду кроссбраузерности ибо IE < 9 такого не умеет. Более подробно про getters/setters написано в этом посте.\n\nДля тех кому интересно — сядем разберем, а кому надо готовое решение — милости прошу в конец поста, ссылки на скачивание — там.\n\nПриступим! Раньше сядем — раньше выйдем.\n",
        "link": "https://habr.com/ru/post/232073/"
    },
    {
        "title": "Базовые подходы к парсингу",
        "body": "ВступлениеУ меня бывают ситуации на проектах, когда нужна база данных какой-то статической информации. Но увы, пошарив в интернетах, какого то публичного хранилища найти не удалось, но тем не менее, я вижу кучу ресурсов, которые это используют. В моем случае мне понадобилась база данных пород кошек, но среди этих примеров может быть что угодно, от базы данных имен, названия городов, областей и т.д. Эта статья о базовых подходах и практиках парсинга данных с веб ресурсов. Хочу подметить, что хоть в моих жилах течет дотнет, в этом примере я буду использовать Node JS, потому что так быстрее, и удобнее в плане парсинга. Чем именно удобней - я расскажу позже в статье.Можем ли мы спарсить?Да, к сожалению (или счастью) веб - он не однообразен, и каждый ресурс может быть уникален по своему, но в нашем деле, ключевым моментом будет то, есть ли на этом ресурсе Server-Side Rendering (SSR), или там Client-Side Rendering и важная для нас информация подтягивается позже с помощью JS. К примеру, нативные апки на React или тот же Angular by default есть CSR. И что бы прикрутить там SSR нужно порой очень сильно попотеть.Тем не менее, большинство сайтов с топ серч результатов любой поисковой системы будут поддерживать именно SSR, потому что таков мир SEO-оптимизаций.",
        "link": "https://habr.com/ru/post/646117/"
    },
    {
        "title": "Еще о парсинге на Prolog'е",
        "body": "Вот тут наткнулся на, в общем-то, простую задачку состоящую в парсинге текстового файла, содержащего 5 миллионов float'ов (и подсчете их суммы). Файл генерируется следующим C#-кодом:\nstatic void Main(string[] args)\n{\n  using (Stream stm = new FileStream(@\"d:\\numbers_large.txt\", FileMode.Create))\n  {\n    TextWriter wr = new StreamWriter(stm);\n    System.Random r = new System.Random();\n    for (int i = 0; i < 5000000; i++)\n    {\n      double d=10000*r.NextDouble() * (r.NextDouble() > 0.7 ? -1.0 : 1.0);\n      wr.Write(\"{0} \", d);\n    }\n    wr.Flush();\n  }\n\n\nЗадача ставилась в контексте обсуждения производительности haskell'я в применении его к задачам парсинга. Я знал, что на прологе подобные задачи решаются красиво и непринужденно используя технику DCG (Definite clause grammar: 1, 2, 3, 4). Фактически, это описание грамматик на языке Пролог, и парсинг по ним, основанный на переборно-откатном принципе работы пролога.\n\nНу то есть обычно получается очень кратко и красиво (например, вот решение задачки о сбалансированности скобок этим методом: программа из 7 строк), но, я подозревал, что не всегда быстро. Собственно, это мне захотелось проверить.\n",
        "link": "https://habr.com/ru/post/60430/"
    },
    {
        "title": "Парсинг (разбор) XML документов с помощью CSS селекторов",
        "body": "Привет. Заметил что постов посвященных Symfony 2.0 все еще не много. Постараюсь это исправить в ближайшее время топиками и переводами про компоненты фреймворка. Сейчас же представляю вашему вниманию перевод статьи с блога Фабьена (Fabien Potencier) который всегда интересно читать. Перевод, возможно не всегда дословный, но смысл я старался передавать четко. Итак начнем.\n\n — HTML и XML документы это как хлеб и масло для веб-разработчиков. День за днем вы, скорее всего, создаете множество HTML документов. И наверняка вам приходится парсить некоторые из них время от времени: потому что вы используете веб службы и хотите извлечь некоторую информацию, или потому, что вы хотите получить данные с нужных веб страниц, или просто потому, что хотите написать функциональные тесты для веб сайта. Получить содержимое достаточно просто, но как его разобрать, чтобы выделить нужную информацию?",
        "link": "https://habr.com/ru/post/90664/"
    },
    {
        "title": "Подходы к извлечению данных из веб-ресурсов",
        "body": "В предыдущей статье мы рассмотрели основные понятия и термины в рамках технологии Data Mining. Сегодня более детально остановимся на Web Mining и подходах к извлечению данных из веб-ресурсов. \n\nWeb Mining — это процесс извлечения данных из веб-ресурсов, который, как правило, имеет больше практическую составляющую нежели теоретическую. Основная цель Web Mining — это сбор данных (парсинг) с последующим сохранением в нужном формате. Фактически, задача сводится к написанию HTML парсеров, и как раз об этом поговорим более детально. \n",
        "link": "https://habr.com/ru/post/99918/"
    },
    {
        "title": "Приходилось ли вам писать парсеры?",
        "body": " ",
        "link": "https://habr.com/ru/post/117914/"
    },
    {
        "title": "Парсер на shell с обходом XOR-шифрования при аутентификации",
        "body": "Недавно возникла необходимость в парсере интернет-счета банковской карты для дальнейшего уведомления об операциях посредством смс\\e-mail. Сделать это было решено по-быстрому шел-скриптом, который будет парсить страницу со счетом с определенной периодичностью при помощи задания в cron, а в случае изменения баланса счета — высылать сообщение на мобильный телефон или e-mail. Ничего сложного на первый взгляд, однако в ходе написания пришлось решить некоторые сложности, о которых вы сможете прочесть под катом.\n\n",
        "link": "https://habr.com/ru/post/127451/"
    },
    {
        "title": "Grab — python библиотека для парсинга сайтов",
        "body": "Лет пять-шесть назад, когда я ещё программировал преимущественно на PHP, я начал использовать библиотеку curl для парсинга сайтов. Мне нужен был инструмент, который позволял эмулировать сессию пользователя на сайте, отсылать заголовки обычного браузера, давать удобный способ отсылки POST-запросов. Сначала я пытался использовать напрямую curl-расширение, но его интерфейс оказался очень неудобным и я написал обёртку с более простым интерфейсом. Время шло, я пересел на python и столкнулся с таким же дубовым API curl-расширения. Пришлось переписать обёртку на python.",
        "link": "https://habr.com/ru/post/127584/"
    },
    {
        "title": "Haskell в реальном мире",
        "body": "В этом блоге уже много написано о самом языке Haskell, и было несколько статей о его практическом применении. Сейчас я вдохновенно расскажу еще об одном реальном применении языка в производстве.\n",
        "link": "https://habr.com/ru/post/129235/"
    },
    {
        "title": "Первые шаги в программировании на Python",
        "body": "Пару месяцев назад взялся я за изучение Python. Прочитав про используемые структуры, работу со строками, генераторы, основы ООП, размышлял какую полезную программу написать, что бы это все применить на реальной задаче.\nПо счастливому стечению обстоятельств ко мне обратились знакомые с просьбой скачать мультфильм «Чудеса на виражах».\n",
        "link": "https://habr.com/ru/post/134863/"
    },
    {
        "title": "Фреймворк для парсинга Grab:Spider",
        "body": "Я автор python библиотеки Grab, которая упрощает написание парсеров веб-сайтов. Я о ней писал вводную статью некоторое время назад на хабре. Недавно я решил вплотную занять парсингом, стал искать free-lance заказы по парсингу и мне понадобился инструмент для парсинга сайтов с большим количеством страниц.\n\nРаньше я реализовывал мультипоточные парсеры с помощью python-тредов с помощью такой вот библиотечки. У threading-подхода есть плюсы и минусы. Плюс в том, что мы запускаем отдельный поток(thread) и делаем в нём, что хотим: можем делать последовательно несколько сетевых вызовов и всё это в пределах одного контекста — никуда не надо переключаться, что-то запоминать и вспоминать. Минус в том, что треды тормозят и жрут память.\n\nКакие альтернативы?",
        "link": "https://habr.com/ru/post/134918/"
    },
    {
        "title": "Небольшая заметка о feature detection",
        "body": "В современном вебе используются две основные технологии определения возможностей браузера:\n(а) распарсить юзер-агент, определить версию браузера и писать в коде свитчи по версии браузера;\n(б) пытаться определять поддержку фич путём проверки нужных полей / вызовов нужных методов.\n\nИсторически сложилось так, что второй вариант считается более true, и именно его реализуют все современные проекты. Достаточно сказать, что этим путём идёт jQuery.\n\nИ, вроде бы, аргументация-то правильная: (а) не нужно хранить базу регулярок, (б) если в каком-то браузере появляется новая фича, она начинает работать автоматически без изменения кода, (в) неизвестные (экзотические, новые) браузеры будут работать без дополнительных телодвижений, (г) если у пользователя подменён юзер-агент, то код всё равно будет работать.\n\nЭто всё хорошо и правильно, но только для небольших проектов.\n\n",
        "link": "https://habr.com/ru/post/153121/"
    },
    {
        "title": "Построение графа социальной сети с помощью Drupal и Feeds",
        "body": "В одном крупном университете на Юге России я разрабатываю программную платформу автоматизированного построения графа социальной сети при помощи обработки интернет страниц социальных сетей. В данной статье я расскажу, как мы обрабатывали данные, собранные из Живого журнала (Livejournal.com). \nПрошел почти год, я думаю, будет интересно узнать, как система применялась для автоматизированного сбора данных в период избирательной кампании в Государственную думу в 2011 году. \n",
        "link": "https://habr.com/ru/post/161207/"
    },
    {
        "title": "Собираем, парсим и отдаём логи с помощью Logstash",
        "body": "Приветствую.\n\nТак уж сложилось, что по долгу работы мне приходится много времени уделять логам. Это и участие в выработке правил и политик сбора/хранения/использования логов, это и разбор разных инцидентов и обнаружение аномалий. За сутки наши программы, сервисы и серверы генерируют ОЧЕНЬ большое количество логов. И потребность копания в логах растёт постоянно.\nМне довелось поработать с коммерческими лог-менеджмент продуктами типа ArcSight, RSA Envision, Q1 Labs. У этих продуктов есть как плюсы, так и минусы. Но в статье речь пойдёт не о них. \nРечь будет о Logstash.\n\nЧто же такое Logstash? Зачем он нужен? Что он умеет?\n",
        "link": "https://habr.com/ru/post/165059/"
    },
    {
        "title": "Bison для JavaScript",
        "body": "Нет, не Jison. А полноценный генератор яваскриптовых парсеров с полной поддержкой бизона.\n\n",
        "link": "https://habr.com/ru/post/183400/"
    },
    {
        "title": "Папа Карло и инкрементальные компиляторы",
        "body": "\n\nКоллеги,\n\nа помните была такая статья-перевод на Хабре Чек-лист разработчика языка программирования Колина Макмиллена о проблемах новых языков программирования? Статья просто изумительная! Если не читали — обязательно посмотрите.\n\nОдна из ключевых проблем, о которых говорит Колин: языки без хорошей поддержки IDE никому не нужны. Конечно это не единственная проблема, которая стоит перед разработчиком языка программирования. Но, я думаю, все согласятся с тем, что при прочих равных язык, поддерживаемый многими редакторами, уже будет иметь неплохое конкурентное преимущество.\n\nПо стечению обстоятельств я как раз занимаюсь компиляторами и языковыми плагинами для IDE уже не первый год. И буду рад поделиться с вами опытом, рассказав о том, как сделать компилятор, который будет намного легче интегрироваться со множеством современных редакторов кода. А заодно немного расскажу о своих собственных наработках в этой области.\n",
        "link": "https://habr.com/ru/post/201774/"
    },
    {
        "title": "Конвертация многостраничного xls/xslx в csv при помощи PHPExcel",
        "body": "В моих проектах часто нужно было собирать данные из разных источников в CSV формат, и пока не нужно было получать данные из нескольких страниц таблиц xls, мне хватало простого fgetcsv() / fputcsv(). Но вот наступил всё-таки тот день, когда передо мной была поставленна задача «получать данные со всех страниц документа». И, как водится, я начал искать готовое решение, чтобы не строить свой «велосипед». Но, к сожалению, именно того, что мне нужно было, я не нашёл: было похожее решение, которое выводило многостраничный документ на экран, но использовалась другая библиотека, которая, как я понял, не поддерживала формат xslx (Excel 2007 +). Ещё немного поискав другие варианты, я понял, что дело гиблое и решил разобраться с библиотекой самостоятельно. Совместив некоторые подсказки по работе с библиотекой PHPExcel в одно целое, я получил следующий скрипт. Итак, приступим.\n",
        "link": "https://habr.com/ru/post/269051/"
    },
    {
        "title": "Про Parboiled (Часть 2)",
        "body": "Часть 2. Сопоставление текста\n\nВо второй части цикла мы поговорим об основных правилах сопоставления символов в Parboiled. Мы не будем касаться всех правил — для этого есть документация, я всего лишь хочу, чтобы вы чувствовали себя уверенно с базовым синтаксисом правил, используемым в Parboiled.\n\nДля закрепления знаний мы напишем простой распознаватель для несложной грамматики. Именно распознаватель (recognizer), а не полноценный парсер, так как он будет только сопоставлять входной текст c описанными нами правилами (также называемыми продукциями), но не будет извлекать из сопоставленного текста какие-либо значения. Распознаватель может быть полезным и сам по себе, так как может работать в качестве валидатора: если вход оказался некорректным, распознаватель даст об этом знать и расскажет, что пошло не так и где. А совсем классным наш распознаватель станет тогда, когда мы узнаем, как извлекать разобранные значения и причем тут какой-то «value stack». Ну что, поехали?\n\nСтруктура цикла:\n\n\nЧасть 1. Почему Parboiled?\nЧасть 2. Сопоставление текста\nЧасть 3. Извлечение данных\nЧасть 4. Суровая действительность\n\n",
        "link": "https://habr.com/ru/post/270531/"
    },
    {
        "title": "Про Parboiled (Часть 3)",
        "body": "Часть 3: Извлечение данных\n\nВ этой статье мы построим парсер для уже описанного нами ранее формата конфигурационных файлов. Также мы реализуем небольшой DSL для упрощенного доступа к элементам полученного дерева. Еще из этой статьи вы узнаете о типах правил, действиях парсера, а так же о «темной материи» Parboiled — стеке значений.\n\nСтруктура цикла:\n\n\nЧасть 1. Почему Parboiled?\nЧасть 2. Сопоставление текста\nЧасть 3. Извлечение данных\nЧасть 4. Суровая действительность\n\n",
        "link": "https://habr.com/ru/post/270609/"
    },
    {
        "title": "Pro Parboiled (Часть 4 заключительная)",
        "body": "Часть 4. Суровая действительность\n\nКак заставить Parboiled работать еще быстрее? Каких ошибок лучше не допускать? Что делать с наследством в виде Parboiled1? На эти, а так же другие вопросы призвана ответить заключающая статья серии.\n\nСтруктура цикла:\n\n\nЧасть 1. Почему Parboiled?\nЧасть 2. Сопоставление текста\nЧасть 3. Извлечение данных\nЧасть 4. Суровая действительность\n\n",
        "link": "https://habr.com/ru/post/271003/"
    },
    {
        "title": "Работа с JSON в Swift",
        "body": "JavaScript Object Notation, или сокращенно JSON является самым распространенным способом связи с сервером и получения информации с него. Он чрезвычайно популярен из-за простоты в использовании и восприятии.\n\nРассмотрим следующий фрагмент JSON:\n[\n  {\n    \"person\": {\n      \"name\": \"Dani\",\n      \"age\": \"24\"\n    }\n  },\n  {\n    \"person\": {\n      \"name\": \"ray\",\n      \"age\": \"70\"\n    }\n  }\n]\n\n",
        "link": "https://habr.com/ru/post/276247/"
    },
    {
        "title": "Как делать парсинг текста голым хардвером, без процессора и без софтвера",
        "body": "Кто-то парсирует текстовый файл программой на Питоне, другой пишет скрипт с регулярными выражениями на Перле, Си-программист стыдливо возится с буферами и указателями, иногда применяя Yacc и Lex.\n\nА можно ли парсировать текст голым железом? Вообще без программы?\n\n — А как это?, — спросил меня знакомый, — С помощью Ардуино?\n\n — Внутри Ардуино стоит вполне фон-неймановский процессор и работает программа, — ответил я, — Нет, еще более голое железо.\n\n — А-а-а-а, этот, микрокод?, — догадался мой товарищ и взглянул на меня победно.\n\n — Нет, термин «микрокод» использовался для специфической организации процессоров в 1970-е годы, потом его использование сошло на нет, — ответил я и добавил, — Правда есть еще микрооперации в интеловских процессорах, в которые перекодируется x86, но это тоже другое. Нет, я имею в виду парсинг текста устройством, состоящим из логических элементов И-ИЛИ-НЕ и Д-триггерами, как на картинке ниже.\n\n — Невозможно! — воскликнул мой приятель, — в таком устройстве где-то сбоку должен сидеть процессор и хитро подмигивать!\n\n — Почему это невозможно?, — парировал я, — Вот машину Тьюринга знаешь? Парсирует текст на ленте, а сбоку никакие интелы и ардуино не подмигивают.\n\n — Нуу, машина Тьюринга, — протянул приятель, — это абстракция, типа Демона Максвелла.\n\n — Никакой абстракции, сейчас увидишь работающую схему, парсирующую текст, — сказал я и прибавил, — но сначала расскажу, зачем мне вообще это понадобилось.\n\n\n",
        "link": "https://habr.com/ru/post/278681/"
    },
    {
        "title": "Web scraping при помощи Node.js",
        "body": "Это первая статья в цикле про создание и использование скриптов для веб-скрейпинга при помощи Node.js.\n\nWeb scraping при помощи Node.js\nWeb scraping на Node.js и проблемные сайты\nWeb scraping на Node.js и защита от ботов\nWeb scraping обновляющихся данных при помощи Node.js\n\nТема веб-скрейпинга вызывает всё больше интереса как минимум потому, что это неисчерпаемый источник небольших, но удобных и интересных заказов для фрилансеров. Естественно, что всё больше людей пытаются выяснить, что это такое. Однако, довольно трудно понять, что такое веб-скрейпинг по абстрактным примерам из документации к очередной библиотеке. Гораздо проще разобраться в этой теме наблюдая за решением реальной задачи шаг за шагом.\nОбычно, задача для веб-скрейпинга выглядит так: есть данные, доступные только на веб-страницах, и их надо оттуда вытащить и сохранить в неком удобоваримом формате. Конечный формат не важен, так как конвертеры никто не отменял. По большей части речь о том, чтобы открыть браузер, пройтись мышкой по ссылкам и скопипейстить со страниц нужные данные. Ну, или сделать то же самое скриптом.\nЦель этой статьи – показать весь процесс создания и использования такого скрипта от постановки задачи и до получения конечного результата. В качестве примера я рассмотрю реальную задачу вроде тех, какие часто можно найти, например, на биржах фриланса, ну, а в качестве инструмента для веб-скрейпинга будем использовать Node.js.",
        "link": "https://habr.com/ru/post/301426/"
    },
    {
        "title": "Web scraping на Node.js и проблемные сайты",
        "body": "Это вторая статья в цикле про создание и использование скриптов для веб-скрейпинга на Node.js.\n\nWeb scraping при помощи Node.js\nWeb scraping на Node.js и проблемные сайты\nWeb scraping на Node.js и защита от ботов\nWeb scraping обновляющихся данных при помощи Node.js\n\nВ первой статье разбиралась простейшая задача из мира веб-скрейпинга. Именно такие задачи достаются веб-скрейперам в подавляющем большинстве случаев – получение данных с незащищённых HTML-страниц стабильно работающего сайта. Быстрый анализ сайта, HTTP-запросы при помощи needle (организованные при помощи tress), рекурсивный проход по ссылкам, DOM-парсинг при помощи cheerio – вот это вот всё.\nВ этой статье разбирается более сложный случай. Не из тех, когда приходится отказываться от взятого с боем заказа, но из тех, которые начинающему скрейперу могут сорвать дедлайн. К слову, эта задача содержалась в реальном заказе на одной международной бирже фриланса, и первый исполнитель её провалил.\nЦель этой статьи (как и прошлой) – показать весь процесс создания и использования скрипта от постановки задачи и до получения конечного результата, однако темы, уже раскрытые в первой статье, освещаются здесь довольно кратко, так что начать я рекомендую с первой статьи. Тут акцент будет на анализ сайта с точки зрения веб-скрейпинга, выявление подводных камней и способы их обхода.",
        "link": "https://habr.com/ru/post/302766/"
    },
    {
        "title": "Пример использования Product API от Fetchee для парсинга товаров интернет-магазина",
        "body": "\n\nВ этой инструкции мы расскажем о том, как с помощью Fetchee Product API получить данные о товаре по URL на примере интернет-магазина lamoda.\n\nДля тех, кто не читал нашу прошлую заметку — Product API будет полезен разработчикам, которым требуется получать данные о товарах из любого магазина, но которые не хотят тратить время на создание собственной системы парсинга или уже осознали, что open-source библиотеки обладают существенными ограничениями и требуют много времени на поддержку. Наш автоматический и не требующий настройки API для парсинга eCommerce данных даёт возможность сосредоточится на разработке основных функций вашего приложения. К тому же попробовать его очень просто. Детали под катом.\n",
        "link": "https://habr.com/ru/company/fetchee/blog/316558/"
    },
    {
        "title": "Как я парсил всю базу данных игр Metacritic-а",
        "body": "Metacritic — англоязычный сайт-агрегатор, собирающий отзывы о музыкальных альбомах, играх, фильмах, телевизионных шоу и DVD-дисках. (с википедии).\n\nИспользованные библиотеки: lxml, asyncio, aiohttp (lxml — библиотека разбора HTML страниц с помощью Python, asyncio и aiohttp будем использовать для асинхронности и быстрого извлечения данных). Также будем активно использовать XPath. Кто не знает, что это такое, отличный туториал.\n",
        "link": "https://habr.com/ru/post/319966/"
    },
    {
        "title": "OSSEC заметка по настройке парсеров (decoders)",
        "body": "Приветствую уважаемое сообщество. В данной статье я хочу описать несколько важных (на мой взгляд) моментов, которые нужно иметь ввиду при настройке программного обеспечения OSSEC (HIDS, SIEM система). Официальная документация по системе представлена в достаточно большом объеме на просторах сети, однако некоторые важные моменты абсолютно нигде не описываются. В качестве «путевых заметок» приведу их ниже. Сразу оговорюсь, что описывать установку системы, развертывание агентов, первичную настройку я не буду. Т.е. предполагаю, что читатель уже знает, что такое decoder и rule в контексте OSSEC. Все нижеперечисленное было проверено на версии по 2.8.1, возможно в будущих версиях это пофиксят. Итак, в бой.\n",
        "link": "https://habr.com/ru/post/323112/"
    },
    {
        "title": "Реализация на Python многопоточной обработки данных для парсинга сайтов",
        "body": "Процесс парсинга усложняется существенными затратами времени на обработку данных. Многопоточность поможет в разы увеличить скорость обработки данных. Сайт для парсинга — «Справочник купюр мира», где получим валюту в соотношении к иным.\n",
        "link": "https://habr.com/ru/post/323238/"
    },
    {
        "title": "Поднимаем сервис мониторинга цен конкурентов",
        "body": "Любой, кто работает в сфере e-commerce, рано или поздно сталкивается с необходимостью быть первым среди конкурентов. Одним из наиболее эффективных инструментов в данном вопросе является управление ценой. Результаты маркетинговых исследований показывают, что среди тех потребителей, которые готовы сменить поставщика промышленного оборудования и инструментов, треть называет низкую цену как решающий фактор выбора нового поставщика. На просторах интернета существует куча разных сервисов, но по тем или иным причинам они не подходили.\n ",
        "link": "https://habr.com/ru/post/328734/"
    },
    {
        "title": "Что делать, если Instagram не дал доступ к API? Дополнение",
        "body": "Здравствуйте ещё раз! Я прочёл её и мне показалось, что её можно продолжить.\n\n\nНи для кого не секрет, что самая популярная и прибыльная площадка для рекламы, бизнеса и прочего — Instagram. Почему им стал именно сервис, в котором по началу можно было загружать только картинки определённого размера (соотношение сторон имеется ввиду) и не было абсолютно ничего, что было в тогдашних соцсетях — совсем непонятно, но факт есть факт. Ввиду чего все стараются проникнуть на площадку Instagram и захватить оттуда наибольшее количество аудитории, и делают, это, конечно же, не вручную. А за этим следует, что Instagram жёстко блокирует доступ для ботов, спамеров и прочему, дабы сеть оставалась чистой.\n\n\nСамые полезные функции (постинг и удаление постов) доступны только из мобильного приложения Instagram, эмуляция запросов сложна, так как надо вытащить из приложения ключ, который с каждой новой версией обновляется.\nWeb-версия обрезана, но радует, что в ней есть возможность лайкать, комментировать и удалять комментарии\nЕсть API, но процедура его получения удручающе долгая и спамерам и ботам такой путь точно не светит. Плюс было много моментов, когда соглашения в API менялись, что не всегда удобно.\n",
        "link": "https://habr.com/ru/post/339620/"
    },
    {
        "title": "Изучаем синтаксические парсеры для русского языка",
        "body": "Привет! Меня зовут Денис Кирьянов, я работаю в Сбербанке и занимаюсь проблемами обработки естественного языка (NLP). Однажды нам понадобилось выбрать синтаксический парсер для работы с русским языком. Для этого мы углубились в дебри морфологии и токенизации, протестировали разные варианты и оценили их применение. Делимся опытом в этом посте.\n\n",
        "link": "https://habr.com/ru/company/sberbank/blog/418701/"
    },
    {
        "title": "Парсим Википедию для задач NLP в 4 команды",
        "body": "Суть\nОказывается для этого достаточно запуcтить всего лишь такой набор команд:\ngit clone https://github.com/attardi/wikiextractor.git\ncd wikiextractor\nwget http://dumps.wikimedia.org/ruwiki/latest/ruwiki-latest-pages-articles.xml.bz2\npython3 WikiExtractor.py -o ../data/wiki/ --no-templates --processes 8 ../data/ruwiki-latest-pages-articles.xml.bz2\nи потом немного отполировать скриптом для пост-процессинга\npython3 process_wikipedia.py\nРезультат — готовый .csv файл с вашим корпусом.",
        "link": "https://habr.com/ru/post/425507/"
    },
    {
        "title": "Пятница программиста, или как я писал библиотеку для лексического и синтаксического анализа кода",
        "body": "Всем привет! Я, как программист, всегда ищу пути для улучшения своих навыков. В один пятничный вечер, в мою голову пришла мысль — «А не написать ли мне компилятор?»\n\nКому интересно узнать, что из этого получилось, добро пожаловать под кат.\n",
        "link": "https://habr.com/ru/post/426151/"
    },
    {
        "title": "Web scraping с помощью R. Сравнение оценок фильмов на сайтах Кинопоиск и IMDB",
        "body": "\nВсемирная паутина — это океан данных. Здесь можно посмотреть практически любую интересующую Вас информацию. Однако, \"вытащить\" эту информацию из интернета уже сложнее. Есть несколько способов получить данные и web-scraping один из них. ",
        "link": "https://habr.com/ru/post/462917/"
    },
    {
        "title": "Web scraping на R, часть 2. Ускорение процесса с помощью параллельных вычислений и использование пакета Rcrawler",
        "body": "\nВ прошлой статье я с помощью скрэпинга-парсинга собрал с сайтов IMDB и Кинопоиск оценки фильмов и сравнил их. Репозиторий на Github. \nКод неплохо справился со своей задачей, однако скрэпинг часто используют для \"соскабливания\" не пары-тройки страниц, а пары-тройки тысяч и для такого \"большого\" скрэпинга код из прошлой статьи не подходит. Точнее будет сказать не оптимален. В принципе, Вам практически ничего не мешает его использовать для задач обхода тысяч страниц. Практически, потому что столько времени у Вас просто нет ",
        "link": "https://habr.com/ru/post/464399/"
    },
    {
        "title": "Free API Moscow Stock Exchange (MOEX) in Google Sheets",
        "body": "Last year the number of private investors at Moscow Stock Exchange (MOEX) has doubled and reached 3.86 million: about 1.9 million people have opened accounts at MOEX in 2019. The Saint Petersburg Stock Exchange which specializes in trading of foreign company shares has seen its accounts increase three times from 910,000 to 3,06 million over the past year.\n\n\n\nThis means that almost 2 million newbies without any actual trading experience and lacking any specialized software for trading/position analysis have entered the market.",
        "link": "https://habr.com/ru/post/487436/"
    },
    {
        "title": "Парсим Википедию, фильтруя, для задач NLP в 44 строки кода",
        "body": "В этой заметке я хотел бы дополнить эту статью и рассказать, как можно гибче использовать экстрактор Википедии WikiExtractor, фильтруя статьи по категориям.",
        "link": "https://habr.com/ru/post/513218/"
    },
    {
        "title": "Конвертируем doc в docx и xml на C#",
        "body": "Продолжаю свой цикл статей, посвященный конвертации различных текстовых файлов с помощью решений, реализованных на языке C#.\nС момента моей последней публикации «Конвертация xls в xlsx и xml на C#» прошло более полугода, за которые я успел сменить как работодателя, так и пересмотреть свои взгляды на некоторые аспекты коммерческой разработки. Сейчас, работая в международной компании с совершенно иным подходом к разработке ПО (ревью кода, юнит-тестирование, команда автотестеров, строгое соблюдение СМК, заботливый менеджер, очаровательная HR и прочие корпоративные плюшки), я начинаю понимать, почему некоторые из комментаторов интересовались целесообразностью предлагаемых мной велокостылей, когда на рынке есть очень достойные готовые решения, например, от e-iceblue. Но давайте не забывать, что ситуации бывают разные, компании – тем более, и если потребность в решении какой-то задачи с использованием определенного инструментария возникла у одного человека, то со значительной долей вероятности она возникнет и у другого.\n",
        "link": "https://habr.com/ru/company/auriga/blog/528084/"
    },
    {
        "title": "Пишем телеграм-бота, который будет переводить интернет статьи в mp3-файлы",
        "body": "Всем привет! В данной статье я поделюсь своей реализацией бота для telegram, который может переводить статьи из интернета в mp3-файлы. Для этого я буду использовать python 3.6 и соответствующие библиотеки. Итак, приступим...",
        "link": "https://habr.com/ru/post/544796/"
    },
    {
        "title": "Работа со сложными JSON-объектами в Swift (Codable)",
        "body": "Написать эту статью меня сподвиг почти случившийся нервный срыв, причиной которого стало мое желание научиться общаться с сторонними API, конкретно меня интересовал процесс декодирования JSON-докуметов! Нервного срыва я, к счастью, избежал, поэтому теперь настало время сделать вклад в сообщество и попробовать опубликовать свою первую статью на Хабре. Почему вообще возникли проблемы с такой простой задачей?Чтобы понять, откуда проблемы, нужно сначала рассказать об инструментарии, которым я пользовался. Для декодирования JSON-объектов я использовал относительно новый синтезированный (synthesized) протокол библиотеки Foundation - Сodable. Codable - это встроенный протокол, позволяющий заниматься кодированием в объект текстового формата и декодированием из текстового формата. Codable - это протокол-сумма двух других протоколов: Decodable и Encodable. Cтоит сделать оговорку, что протокол называется синтезированным тогда, когда часть его методов и свойств имеют дефолтную реализацию. Зачем такие протоколы нужны? Чтобы облегчить работу с их подписанием, как минимум уменьшив количество boilerplate-кода. Еще такие протоколы позволяют работать с композицией, а не наследованием!Вот теперь поговорим о проблемах: ",
        "link": "https://habr.com/ru/post/548086/"
    },
    {
        "title": "Электронная медицинская карта -собираем анализы",
        "body": "\nНебольшой пост о том, как собрать в единый pdf все записи о сданных анализах в поликлинике из электронной медицинской карты. Данные располагаются на сайте (https://lk.emias.mos.ru/medical-records), однако пользоваться ими неудобно, так как на сайте все свалено в несколько pdf куч. И, чтобы посмотреть, все позиции по анализам, сданным, например, в один день, необходимо заходить в каждую из этих куч и смотреть только эту одну позицию. Итого можно посмотреть до 15 pdf с анализами, сданных в один день. А уж если хочется за несколько дней посмотреть результаты анализов, умножай на n и затем вручную сравнивай! \n\nВ качестве опции также будет осуществлен вывод табличных данных из pdf в excel. ",
        "link": "https://habr.com/ru/post/581424/"
    },
    {
        "title": "Как я спарсил WebGL карту с Федерального сайта",
        "body": "Как я спарсил WebGL карту с Федерального сайта. Написал эту статью для тех, у кого похожая задача. ",
        "link": "https://habr.com/ru/post/591229/"
    },
    {
        "title": "Парсинг контактов адресной книги Яндекс.почты в CSV на Python",
        "body": "Как-то в процессе работы возник вопрос как на корпоративном домене в Яндексе выгрузить все контакты организации из адресной книги Яндекс.почты в файл .csv или .xls, чтобы было красиво и потом удобно работать с этими данными в MS Excel.Оказывается, что стандартными средствами Яндекс.почты можно выгрузить только в Vcard формат, что мне совсем не подходит. Нужно потом его как-то конвертировать сторонними средствами. Такие попадались на просторах интернета, что совсем неудобно.На помощь пришел Python.C помощью библиотеки BeautifulSoup очень удобно и быстро парсить html и вынимать всю нужную нам информацию.Проведя анализ исходного кода страницы и выведя особые закономерности в представлении на ней информации было решено “В бой!”.Для парсинга нам понадобится Python 3, библиотека BeautifulSoup и браузер с инспектором кода.",
        "link": "https://habr.com/ru/post/655205/"
    },
    {
        "title": "BIK Beep – Telegram Bot",
        "body": "Мой путь по созданию бота в Telegram.",
        "link": "https://habr.com/ru/post/657329/"
    },
    {
        "title": "Парсинг FIT файлов c данными тренировок",
        "body": "Мне стало интересно проанализировать данные о своих тренировках за последние несколько лет, и я понял, что обычного функционала приложений типа Garmin Connect или бесплатной версии Strava будет недостаточно. В этой статье я расскажу как получить свои персональные данные о тренировках из устройств Garmin и разместить их в реляционной базе данных с помощью библиотек python.",
        "link": "https://habr.com/ru/post/658675/"
    },
    {
        "title": "ИИ для прогнозирования тренда стоимости Bitcoin на данных Twitter. ч.1",
        "body": "В этой статье я расскажу о первой серии экспериментов для проверки гипотезы влияния данных Twitter на тренд стоимости Bitcoin. Цель не угадать ценник, а предсказать рост, убывание или относительную неизменность цены  ",
        "link": "https://habr.com/ru/post/661141/"
    },
    {
        "title": "Скачивание любого сайта с помощью Python себе на компьютер",
        "body": "Здравствуйте!Сегодня я Вам расскажу про интересную библиотеку для Python под названием Pywebcopy. ​PyWebCopy – бесплатный инструмент для копирования отдельных веб-страниц или же полного копирования сайта на жесткий диск.",
        "link": "https://habr.com/ru/post/669766/"
    },
    {
        "title": "JavaScript: заметка о сканере предварительной загрузки и пропуске невидимого контента",
        "body": "\n\nПривет, друзья!\nВ этой заметке я хочу рассказать о двух вещах:\n\nСканере предварительной загрузки (теоретическая часть).\nПропуске невидимого контента (практическая часть).\n\nОбе технологии используются браузером для повышения скорости загрузки веб-приложений.\nТеоретическая часть представляет собой адаптированный и дополненный перевод этой статьи. Практическая часть — это небольшой эксперимент по применению новых свойств CSS, о которых рассказывается в этой статье (перевод).\nЕсли вам это интересно, прошу под кат.",
        "link": "https://habr.com/ru/company/timeweb/blog/671762/"
    },
    {
        "title": "разбираем файлы MS-office",
        "body": "Недавно передо мной была поставлена задача: вытащить некую информацию из файлов MS-office (.xls, .doc) для ее последующей обработки. По факту, нужно было вытащить текст, содержащийся в документе.\n\n",
        "link": "https://habr.com/ru/post/45375/"
    },
    {
        "title": "Zoomify: В поисках целой картинки",
        "body": "\n\nМногие из Вас использовали карты гугла или яндекса, для того, чтобы посмотреть спутниковые снимки земли, но не многие задумывались каким образом данные снимки хранятся на серверах, ведь если бы пользователь скачивал даже отдельные фотографии, то ему понадобился весьма внушительный канал. Поэтому данные снимки обрабатываются и нарезаются на отдельные небольшие кусочки.\n\nВ данном топике я расскажу о одной из реализаций и о том как склеить Zoomify изображение, чтобы сразу было понятно о чём идёт речь, можете перейти по ссылке: 2 доллара.\n\nГде-то около полугода назад я писал утилиту по преобразованию картинки в Zoomify изображение, хоть на тот момент была бесплатная фирменная утилита, да и Photoshop имеет такой функционал, но там требовалась пакетная обработка, отправка по ftp и ещё некоторые возможности. Спустя какое-то время мне понадобилось сделать обратный функционал, вот об этом и пойдёт речь в данном топике.\n\n",
        "link": "https://habr.com/ru/post/129106/"
    },
    {
        "title": "Технология MIPS SIMD и процессор Байкал-Т1",
        "body": "Коллеги из Байкал Электроникс предложили поработать с процессором Байкал-Т1 [L1] и написать о своих впечатлениях. Для них это способ рассказать разработчикам о возможностях и особенностях своего процессора. Для меня — шанс поближе познакомиться с системой на современном процессорном ядре и в будущем изобретать поменьше \"велосипедов\", добавляя, к примеру, новую функциональность в проект MIPSfpga-plus [L2]. Ну и обычное инженерное любопытство, опять же...\nСегодня речь пойдет о векторном расширении архитектуры MIPS SIMD, которое доступно в ядрах MIPS Warrior P-class P5600 [L3], а значит присутствует и в процессоре Байкал-Т1. Статья ориентирована на начинающих разработчиков.\n",
        "link": "https://habr.com/ru/post/328566/"
    },
    {
        "title": "Возможно, вам не нужен Rust, чтобы ускорить ваш JS",
        "body": "Несколько недель назад я обнаружил пост \"Окисляем Source Maps с Rust и WebAssembly\"\nраспространяющийся по Твиттеру и расказывающий о выигрыше в производительности от замены обычного JavaScript в библиотеке source-map на Rust, скомпилированный в WebAssembly.\nПост возбудил мой интерес не потому, что я большой фанат Rust или WASM, скорее потому что я всегда интересовался фичами языков и оптимизациями, которых не хватает Javascript для того чтобы достичь аналогичной производительности.\nТак что я скачал библиотеку с GitHub и отправился в небольшое исследование производительности, которое я документирую здесь практически дословно.",
        "link": "https://habr.com/ru/post/350018/"
    },
    {
        "title": "Установка последних RedMine + Apache + nginx",
        "body": "\n\nПриведу кратко основное по RedMine:\n\nведение нескольких проектов;\nсистема отслеживания ошибок;\nдиаграммы Ганта;\nнастраиваемые произвольные поля для инцидентов, временных затрат, проектов и пользователей;\nлёгкая интеграция с системами управления версиями (SVN, Git, Mercurial);\n\n\nМне очень Важно было установить свежие версии всех модулей, почерпнул много источников, но практически все с недоделками, и очень таки неудобная конфигурация у них получалась.\nВот и пришлось самому сделать универсальную конфигурацию, которая может работать под любой из основных Веб-серверов.\n",
        "link": "https://habr.com/ru/post/225667/"
    },
    {
        "title": "Implementing Offline traceroute Tool Using Python",
        "body": "Hey everyone! This post was born from a question asked by an IT forum member. The summary of the question looked as follows: \n\nThere is a set of text files containing routing tables collected from various network devices.\nEach file represents one device.\nDevice platforms and routing table formats may vary.\nIt is required to analyze a routing path from any device to an arbitrary subnet or host on-demand.\nResulting output should contain a list of routing table entries that are used for the routing to the given destination on each hop.\n\nThe one who asked a question worked as a TAC engineer. It is often that they collect or receive from the customers some text 'snapshots' of the network state for further offline analysis while troubleshooting the issues. Some automation could really save a lot of time.\nI found this task interesting and also applicable to my own needs, so I decided to write a Proof-of-Concept implementation in Python 3 for Cisco IOS, IOS-XE, and ASA routing table format. \nIn this article, I’ll try to reconstruct the resulting script development process and my considerations behind each step.\nLet’s get started. ",
        "link": "https://habr.com/ru/post/539436/"
    },
    {
        "title": "Анализируй это — Lenta.ru",
        "body": "\nАнализируй это. Lenta.ru (часть 1)\nWhat, How, Why\nДля тех кому лень читать — ссылка на датасет внизу статьи.What — анализ статей новостного ресурса Lenta.ru за последние 18 лет (с 1 сентября 1999 года). How — средствами языка R (с привлечением программы MySterm от Yandex на отдельном участке). Why… В моем случае, коротким ответом на вопрос \"почему\" будет \"получение опыта\" в Big Data. Более развернутым же объяснением будет \"выполнение какого-либо реального задания, в рамках которого я смогу применить навыки, полученные во время обучения, а так же получить результат, который я бы смог показывать в качестве подтверждения своих умений\". ",
        "link": "https://habr.com/ru/post/343838/"
    },
    {
        "title": "Заметки об NLP (часть 3)",
        "body": "(Начало: 1, 2) Что ж, подходим к самому интересному — разбору предложений. Тема эта многогранна и многоуровнева, так что подступиться к ней не очень просто. Но ведь трудности лишь закаляют :) Да и выходные, текст пишется легко…\n\nНачнём с такого понятия, как синтаксический анализ предложений (по-английски parsing). Суть этого процесса состоит в построении графа, «каким-либо образом» отражающего структуру предложения.",
        "link": "https://habr.com/ru/post/79830/"
    },
    {
        "title": "Анализируй это. Mista.ru",
        "body": "\nWhat, How, Why\nФорум Mista.ru — один из самых старых и активных форумов, посвященных 1С. Первое сообщение датировано 2000 годом и на текущий момент счетчик тем перевалил за 800000, а количество сообщений больше 16 000 000. Форум был настолько популярен, что его даже пытались \"зеркалировать\", так как содержал неплохую базу вопросов-ответов по 1С, из-за чего админы форума добавили \"защиту от скачивания\". В этой статье будет описано то, как можно скачать этот (а наверное и любой другой) форум в относительно короткие сроки при помощи Google Cloud Platform.",
        "link": "https://habr.com/ru/post/347096/"
    },
    {
        "title": "PHP microservices framework — Swoft 2.0.5 published",
        "body": "\nWhat is Swoft?\nSwoft is a PHP microservices coroutine framework based on the Swoole extension. Like Go, Swoft has a built-in coroutine web server and a common coroutine client and is resident in memory, independent of traditional PHP-FPM. There are similar Go language operations, similar to the Spring Cloud framework flexible annotations, powerful global dependency injection container, comprehensive service governance, flexible and powerful AOP, standard PSR specification implementation and so on.\nThrough three years of accumulation and direction exploration, Swoft has made Swoft the Spring Cloud in the PHP world, which is the best choice for PHP's high-performance framework and microservices management.\nGithub\n\nhttps://github.com/swoft-cloud/swoft\n",
        "link": "https://habr.com/ru/news/t/462927/"
    },
    {
        "title": "Инженер собрал глобус, который показывает текущее положение МКС",
        "body": "\nИсточник: Instructables.com\n\nИнженер Майкл Саво собрал конструкцию из лазера, глобуса и напечатанной на 3D-принтере базы, которая показывает текущее положение МКС над Землей. Пошаговую инструкцию, в том числе часть о программном коде, он выложил на сайте instructables.com. \n",
        "link": "https://habr.com/ru/news/t/480046/"
    },
    {
        "title": "Обновлены Docker-образы с clickhouse-exporter и clickhouse_fdw",
        "body": "Эта новость — о двух Open Source-решениях с непростой судьбой: clickhouse-exporter и clickhouse_fdw. Именно открытость и сила сообщества помогли им выжить, несмотря на перипетии судьбы (смену разработчиков). Нам же они были важны, поскольку оба используются в проектах, а недавно появился запрос на актуализацию их версий. Так на Docker Hub появились два новых образа: clickhouse-exporter и spilo (включает в себя clickhouse_fdw). Они могут пригодиться тем, кто работает с ClickHouse в Docker или Kubernetes.",
        "link": "https://habr.com/ru/company/flant/news/t/551564/"
    },
    {
        "title": "Анализ таблиц маршрутизации, или зачем ещё сетевому инженеру Python",
        "body": "Hello Habr! Эта моя первая статья на Хабре, и родилась она из вопроса на одном из профессиональных форумов. Выглядел вопрос, несколько перефразируя, следующим образом:\n\nИмеется набор текстовых файлов, содержащих вывод таблиц маршрутизации с различных сетевых устройств;\nКаждый файл содержит информацию с одного устройства;\nУстройства могут иметь различный формат вывода таблицы маршрутизации;\nНеобходимо на основании имеющихся данных по запросу выводить путь до произвольной подсети или IP-адреса с каждого из устройств;\nВывод должен включать на каждом участке пути информацию о записи из таблицы маршрутизации, по которой будет смаршрутизирован пакет. \n\nЗадача мне показалась мне интересной и перекликалась с одной из собственных сетевых утилит, планируемых в перспективе.Поэтому в свободный вечер, поразмыслив над ее решением, написал Proof-of-Concept реализацию на Python 2.7 под формат Cisco IOS, IOS-XE и ASA, отвечающую основным требованиям.\nВ статье попытаюсь воспроизвести ход мысли и прокомментировать основные моменты.\nМатериал рассчитан на людей, уже базово знакомых с основами сетей и Python.\nВсем заинтересовавшимся добро пожаловать под кат!",
        "link": "https://habr.com/ru/post/414043/"
    },
    {
        "title": "Rich text editors from backend perspective",
        "body": "Welcome everyone, in this article I’m going to overview the most popular types of rich text editors, tradeoffs of their use from a backend perspective. By that I mean:\n\n\nStreaming of content from the rich text editor to other infrastructure tools like full-text search, warehouses, etc.\nRetrieving of content to clients: mobile, web, desktop.\nStoring of content in some kind of storage (SQL database in my case)\nAnalyzing of content, which includes point 1, but also analyzing it from the perspective of our application\n",
        "link": "https://habr.com/ru/post/533956/"
    },
    {
        "title": "Парсеры, обработка текста. Просто о сложном. CFG, BNF, LL(k), LR(k), PEG и другие страшные слова",
        "body": "Наверное, каждому программисту приходилось сталкиваться с задачами вида «прочитать что-то в формате А и произвести с ним некие манипуляции». Будь то json, логи nginx, cfg, sql, yaml, csv или что-то еще. Хорошо, когда можно воспользоваться библиотекой, однако, по разным причинам, это удается не всегда. Тогда и встает вопрос создания собственного парсера для заданного формата. И это, как говорят англичане, часто оказывается PITA (болью в ...). В этой статье я постараюсь облегчить эту боль. Кому интересно, добро пожаловать.",
        "link": "https://habr.com/ru/post/348314/"
    },
    {
        "title": "Системы предотвращения вторжений «из коробки». Тест-драйв",
        "body": "Привет, Хабровчане!\n\nСегодня мы хотим поговорить о том, как системы обнаружения/предотвращения вторжений справляются со своей задачей сразу после того, как вы достали их из коробки, провели инициализацию и поставили в свою сеть. В сегодняшнем тест-драйве будут участвовать следующие аппаратные платформы:\n\n• Cisco IPS 4240;\n• IBM Proventia GX4004;\n• StoneGate IPS 1060.\n\nИсходя из нашего опыта, примерно в 80% организаций IPS не настраиваются должным образом. Это обусловлено тем, что их просто некому настроить или систему установили только «для галочки», чтобы соответствовать тем или иным требованиям регуляторов. Поэтому мы решили провести сравнение систем обнаружения вторжений на дефолтных настройках.\n\nВ статье мы хотим поделиться результатами нашего тест-драйва с уважаемыми Хабражителями.\n\nВсех заинтересовавшихся приглашаем под кат.\n",
        "link": "https://habr.com/ru/company/it/blog/209714/"
    },
    {
        "title": "Программа курса и материалы по Scala",
        "body": "Добрый день.\n\nМеня зовут Головач Иван, я практикующий Java Tech Lead с опытом в программировании 10+ лет (Java EE, J2ME, C, C++, M-language, Delphi), который перешел на Scala.\n\nЯ подготовил и прочитал как обычные курсы по программированию (Java Core + Junior Java Developer), так и спецкурсы (Multicore Programming for JVM (раз и два)).\n\nВ данный момент я стартую спецкурс по Scala и в этом топике хочу поделиться материалами, которые я нашел наиболее интересными/информативными (курс готовился более года).\n",
        "link": "https://habr.com/ru/company/golovachcourses/blog/251239/"
    },
    {
        "title": "Что нам стоит… загрузить JSON в Data Platform",
        "body": "Всем привет! В недавней статье мы рассказали, как мы шли к построению нашей Data Platform. Сегодня хотелось бы глубже погрузиться в «желудок» нашей платформы и попутно рассказать вам о том, как мы решали одну из задач, которая возникла в связи с ростом разнообразия интегрируемых источников данных.То есть, если возвращаться к финальной схеме из упомянутой выше  статьи (специально дублирую ее ниже, чтобы уважаемым читателям было удобнее),  то сегодня мы будем более углубленно говорить о реализации «правой  части» схемы — той, что лежит после Apache NiFi.  ",
        "link": "https://habr.com/ru/company/leroy_merlin/blog/563066/"
    },
    {
        "title": "Захват видео с сетевых камер, часть 2",
        "body": "\nВ первой своей статье «измерение расстояния до объекта и его скорости» я рассмотрел захват изображений с веб-камер через Video4Linux2 и через DirectX. В следующей статье «захват видео с сетевых камер, часть 1» я рассмотрел как работать с сетевыми Motion-JPEG камерами. Сейчас я поведаю Вам о захвате изображений с сетевых RTSP камер, в частности поток Motion-JPEG по RTSP.\n\nЗадача эта более сложная нежели Motion-JPEG по HTTP, так как необходимо больше действий, больше подключений, но взамен мы получаем большую гибкость, скорость, функциональность и даже некую универсальность. Честно говоря, RTSP для простых задач избыточен, но я не сомневаюсь, что найдутся ситуации, где он будет необходим.\n\n",
        "link": "https://habr.com/ru/post/117735/"
    },
    {
        "title": "Парсер формул с помощью метода рекурсивного спуска",
        "body": "\n\nДоброго времени суток, уважаемые Хабровчане!\n\nХочу поделится с вами реализацией алгоритма «Метод рекурсивного спуска» на примере написания парсера формул с поддержкой переменных и функций на языке Java\n\nЭта статья в (скорее всего, во всяком случае я надеюсь :) ) будет интересна для новичков, или кому-то применить как фундамент для своего решения данной задачи.\nКому интересно — прошу под кат\n ",
        "link": "https://habr.com/ru/post/122397/"
    },
    {
        "title": "WAF through the eyes of hackers",
        "body": " Today we’re going to talk about one of the modern security mechanism for web applications, namely Web Application Firewall (WAF). We’ll discuss modern WAFs and what they are based on, as well as bypass techniques, how to use them, and why you should never entirely rely on WAF. We’re speaking from the pentesters’ perspective; we’ve never developed WAFs and only collected data from open sources. Thus, we can only refer to our own experience and may be unaware of some peculiarities of WAFs.",
        "link": "https://habr.com/ru/company/dsec/blog/454592/"
    },
    {
        "title": "Поговорим о погоде",
        "body": "За последнее время мне пришлось довольно основательно пообщаться с несколькими сервисами Yahoo! В этой заметке расскажу об одном из них, который для многих может оказаться полезным. Это сервис прогноза погоды Yahoo! Weather.\n\nГода два назад я искал в сети удобный и открытый источник подобных данных, но так ничего и не нашел. Все отечественные сервисы экспортировали данные за деньги (отпугивала скорее не цена, а наличие возни с оплатой), а западные — либо не предоставляли данных в удобном для автоматической обработки формате, либо не знали о существовании города, в котором я живу.\n\nYahoo! Weather порадовал отсутствием перечисленных недостатков. Информация о текущей погоде, а так же прогноз на ближайшие 5 дней экспортируется с их сервера в формате RSS. На мой взгляд, выбор этого формата притянут за уши, т.к. погодная RSS «лента» содержит всего однин item. Те же данные можно было бы экспортировать в более лаконичном виде, но в Yahoo, по всей видимости, расчитывали на стандартные методы обработки RSS, что тоже довольно весомый довод. Стандарт — это все-таки стандарт.\n\nАдрес RSS фида для интересующего города можно найти на сайте weather.yahoo.com.\n\n\n\nВ общем виде URL выглядит следующим образом:\n\nxml.weather.yahoo.com/forecastrss?p=код_города&u=единицы_измерения\n\nПервый параметр — идентификатор интересующего города. Второй параметр определяет, в каких единицах будет выдаваться температура. Значение «c» соответствует градусам Цельсия, «f» — градусам Фаренгейта. ",
        "link": "https://habr.com/ru/post/20461/"
    },
    {
        "title": "Как проанализировать рынок фотостудий с помощью Python (2/3). База данных",
        "body": "В предыдущей статье в рамках коммерческого проекта по анализу рынка фотостудий рассмотрел создание парсинга: выгрузка списка фотостудий, списка залов, данных по бронированию с момента открытия зала до последней брони.\n\nПолученную информацию в кэше хранить нецелесообразно, необходимо использовать базу данных.\n\nВ статье рассмотрю: \n\n\nсоздание простой SQLite базы данных; \nзапись информации с помощь Python; \nчтение данных и перевод в формат DataFrame; \nобновление парсинга с учетом данных БД. \n\n",
        "link": "https://habr.com/ru/post/512208/"
    },
    {
        "title": "R в качестве инструмента мониторинга цен",
        "body": "В данной статье хотел бы коснуться такой темы как мониторинг конкурентов. Понимаю, что у данной темы есть как много сторонников, ведь так или иначе мониторинг необходим для успешного развития почти любой компании, так и противники, которые защищают интересы своего бизнеса от мониторщиков. \n\nТе, кто как то связан с продажами на конкурентном рынке, наверняка знают, что мониторинг конкурентов является важной задачей. Результаты используются для совершенно различных целей — от изменения локальных политик ценообразования и ведения ассортимента до составления стратегических планов развития компании. Автор решил попрактиковаться в решении данной задачи и промониторить одного из крупных ритейлеров электроники в России, чьим регулярным клиентом автор является. Что из этого вышло — ",
        "link": "https://habr.com/ru/post/255173/"
    },
    {
        "title": "Про LL-парсинг: Подход к синтаксическому анализу через концепцию нарезания строки",
        "body": "Приветствую уважаемое сообщество!\n\nПовторение — мать учения, а разбираться в синтаксическом анализе — очень полезный навык для любого программиста, поэтому хочу еще раз поднять эту тему и поговорить в этот раз про анализ методом рекурсивного спуска (LL), обойдясь без лишних формализмов (к ним потом всегда можно будет вернуться).\n\nКак пишет великий Д. Строгов, «понять — значит упростить». Поэтому, чтобы понять концепцию синтаксического разбора методом рекурсивного спуска (оно же LL-парсинг), упростим задачу насколько можно и вручную напишем синтаксический анализатор формата, похожего на JSON, но более простого (при желании можно будет потом его расширить до анализатора полноценного JSON, если захочется поупражняться). Напишем его, взяв за основу идею нарезания строки.",
        "link": "https://habr.com/ru/post/412905/"
    },
    {
        "title": "How to develop and publish a smart-contract in the Telegram Open Network (TON)",
        "body": "What is this article about?\nIn this article, I will tell about my participation in the first (out of two so far) Telegram blockchain contest. I didn't win any prize. However, decided to combine and share the unique experience I have had from the start to finish line, so my observations could help anyone who is interested. \nSince I didn't want to write some abstract code, instead make something useful. I created instant lottery smart-contract and website which shows smart-contract data directly from Telegram Open Network (TON) avoiding any middle storage layers. \nThe article will be particularly useful for those, who want to write their first smart-contract for TON but don't know where to start. \nUsing the lottery as an example, I will go from setting up the environment to publishing a smart contract, interacting with it. Moreover, I will create a website that will show smart-contract data.",
        "link": "https://habr.com/ru/post/494528/"
    },
    {
        "title": "Exceptional situations: part 1 of 4",
        "body": " \nIntroduction\nIt’s time to talk about exceptions or, rather, exceptional situations. Before we start, let’s look at the definition. What is an exceptional situation?\nThis is a situation that makes the execution of current or subsequent code incorrect. I mean different from how it was designed or intended. Such a situation compromises the integrity of an application or its part, e.g. an object. It brings the application into an extraordinary or exceptional state.\nBut why do we need to define this terminology? Because it will keep us in some boundaries. If we don’t follow the terminology, we can get too far from a designed concept which may result in many ambiguous situations. Let’s see some practical examples:\n\n\n struct Number\n {\n     public static Number Parse(string source)\n     {\n         // ...\n         if(!parsed)\n         {\n             throw new ParsingException();\n         }\n         // ...\n     }\n\n     public static bool TryParse(string source, out Number result)\n     {\n        // ..\n        return parsed;\n     }\n }\nThis example seems a little strange, and it is for a reason. I made this code slightly artificial to show the importance of problems appearing in it. First, let’s look at the Parse method. Why should it throw an exception?",
        "link": "https://habr.com/ru/company/clrium/blog/454630/"
    },
    {
        "title": "Support of Visual Studio 2019 in PVS-Studio",
        "body": "\nSupport of Visual Studio 2019 in PVS-Studio affected a number of components: the plugin itself, the command-line analyzer, the cores of the C++ and C# analyzers, and a few utilities. In this article, I will briefly explain what problems we encountered when implementing support of the IDE and how we addressed them.",
        "link": "https://habr.com/ru/company/pvs-studio/blog/454736/"
    },
    {
        "title": "Парсинг JSON — это минное поле",
        "body": "\n\nJSON — это стандарт де-факто, когда заходит речь о (де)сериализации, обмене данными в сети и мобильной разработке. Но насколько хорошо вы знакомы с JSON? Все мы читаем спецификации и пишем тесты, испытываем популярные JSON-библиотеки для своих нужд. Я покажу вам, что JSON — это идеализированный формат, а не идеальный, каким его многие считают. Я не нашёл и двух библиотек, ведущих себя одинаково. Более того, я обнаружил, что крайние случаи и зловредная полезная нагрузка могут привести к багам, падениями и DoS, в основном потому, что JSON-библиотеки основаны на спецификациях, которые со временем развиваются, что оставляет многие вещи плохо или вообще не задокументированными.\n\nСодержание1. Спецификации JSON \n2. Тестирование парсинга\n2.1. Структура\n2.2. Числа (Numbers)\n2.3. Массивы\n2.4. Объекты\n2.5. Строки\n2.6. Двойственные значения RFC 7159 \n3. Архитектура тестирования \n4. Результаты тестирования\n4.1. Полные результаты\n4.2. C-парсеры\n4.3. Objective-C-парсеры\n4.4. Apple (NS)JSONSerialization\n4.5. Freddy (Swift)\n4.6. Bash JSON.sh\n4.7. Другие парсеры\n4.8. JSON Checker\n4.9. Регулярные выражения \n5. Контент парсинга \n6. STJSON \n7. Заключение \n8. Приложение ",
        "link": "https://habr.com/ru/company/vk/blog/314014/"
    },
    {
        "title": "Производительность старта JavaScript",
        "body": "\n\nВеб-разработчики знают, как легко разрастаются размеры веб-страниц. Но загрузка страницы — это не просто передача байтов по проводу. Когда браузер загрузил скрипты, ему нужно их отпарсить, интерпретировать и запустить. В статье мы внимательно рассмотрим эту фазу и узнаем, почему она может стать причиной замедления запуска вашего приложения и как это исправить.\n",
        "link": "https://habr.com/ru/company/vk/blog/321748/"
    },
    {
        "title": "Настройка D-Link DIR-320/NRU + 3G Ростелеком R41 (Sense R41)",
        "body": "В статье описывается настройка маршрутизатора «D-Link DIR-320/NRU» и модема «3G+ Ростелеком R41».\n\nНа странице поддержки маршрутизатора приведён перечень совместимых моделей модемов, и «3G+ Ростелеком R41», также известный как «Sense R41», в их число не входит. При подключении к маршрутизатору модем не определяется в интерфейсе настройки, в логах он отображается как SCSI устройство, и никаких /dev/ttyUSB* устройств не создаётся. То есть без вариантов — требуется альтернативная прошивка маршрутизатора.\n\nПоиск в интернете показал, что данный маршрутизатор можно прошить некоторыми версиями прошивок ZyXEL Keenetic и OpenWRT. Выбор пал на OpenWRT. Наряду с пользовательскими сборками OpenWRT, включающими всё необходимое для подключения 3G модема, поддержка маршрутизатора DIR-320/NRU добавлена в основную ветку OpenWRT, начиная с ревизии 38040. Поэтому для прошивки выбрана последняя стабильная версия OpenWRT — Barrier Breaker 14.07.",
        "link": "https://habr.com/ru/post/265023/"
    },
    {
        "title": "Queries in PostgreSQL. Query execution stages",
        "body": "Hello! I'm kicking off another article series about the internals of PostgreSQL. This one will focus on query planning and execution mechanics.In the first article we will split the query execution process into stages and discuss what exactly happens at each stage.",
        "link": "https://habr.com/ru/company/postgrespro/blog/649499/"
    },
    {
        "title": "Индикаторы ключевой информации на сайтах для Firefox на скорую руку",
        "body": "У многих из нас есть на примете набор сайтов, которые мы периодически открываем не для внимательного чтения, а чтобы бегло ознакомиться с каким-то небольшим участком информации, посмотреть, нет ли новых статей или комментариев, проверить, не сменился ли какой-нибудь параметр и так далее. Сайты часто предоставляют для таких нужд rss или почтовую рассылку, но так бывает далеко не всегда. Попробую описать один из способов автоматизации подобной рутины.\n\n",
        "link": "https://habr.com/ru/post/146594/"
    },
    {
        "title": "The architecture of an exceptional situation: pt.2 of 4",
        "body": " I guess one of the most important issues in this topic is building an exception handling architecture in your application. This is interesting for many reasons. And the main reason, I think, is an apparent simplicity, which you don’t always know what to do with. All the basic constructs such as IEnumerable, IDisposable, IObservable, etc. have this property and use it everywhere. On the one hand, their simplicity tempts to use these constructs in different situations. On the other hand, they are full of traps which you might not get out. It is possible that looking at the amount of information we will cover you’ve got a question: what is so special about exceptional situations?\nHowever, to make conclusions about building the architecture of exception classes we should learn some details about their classification. Because before building a system of types that would be clear for the user of code, a programmer should determine when to choose the type of error and when to catch or skip exceptions. So, let’s classify the exceptional situations (not the types of exceptions) based on various features.",
        "link": "https://habr.com/ru/company/clrium/blog/454882/"
    },
    {
        "title": "Парсер данных по произвольной грамматике в 400 строк",
        "body": "Есть много существующих инструментов для парсинга файлов по заданной грамматике. Например, ANTLR или Yacc. Они используют конечные автоматы и генерируют большие файлы с исходным кодом для парсинга. Действительно ли это так сложно? Попробуем сделать сами.\nВ этой статье я покажу, как можно сделать такой парсер методом рекурсивного спуска. Для сравнения я буду говорить об ANTLR, другие парсеры не рассматриваются. Под катом много примеров кода, без этого сложно объяснить, почему сделано так, а не иначе.\nБудем делать парсер для грамматик в ANTLR-like виде. Вот в таком:\nC:\n    | A1? A2* A3\n    | B1? B2+ B3\n;\nДелать будем на языке PHP. А если получится нормально, перепишем на C++.",
        "link": "https://habr.com/ru/post/506188/"
    },
    {
        "title": "Эволюция игрового фреймворка. Сервер на Python. Часть 1. Слои инфраструктуры",
        "body": "Допустим, у нас большие планы, и мы хотим реализовать серверную часть для всех основных игровых жанров. Однако, прежде, чем приступить к этому, нужно хорошенько подготовиться. Нужно создать такую основу, которая бы подходила для каждой игры, чтобы потом не нужно было ничего переделывать на пол-пути. В том числе и все сделанные на тот момент игры. Главная наша задача — совместить несовместимое, выработать такое решение, которое бы позволяло создавать игровые приложения любой сложности качественно и максимально быстро! Сочетание этих несовместимых, казалось бы, условий обеспечит нам фреймворк, эволюцию которого мы и намерены здесь проследить. В первой статье будет описано создание инфраструктурного фреймворка, а во второй — разработка логики на его основе. Всего — две статьи на описание методологии разработки всей серверной части.В качестве языка программирования выберем Python за его простоту и элегантность. Мы начнем в сокетов (asyncio), а закончим HTTP-сервером. Наша задача состоит в том, чтобы код логики не зависел от типа сервера и задействованных сетевых протоколов.",
        "link": "https://habr.com/ru/post/678658/"
    },
    {
        "title": "Sinon.js — mock-библиотека для JavaScript",
        "body": "Sinon.js — это mock-библиотека для JavaScript, которую можно использовать с любым тестовым фреймворком. Она предоставляет функции для эмуляции и проверки требуемого поведения в JavaScript. В библиотеке представлено три вида тестирования с spy, stub и mock. В данном посте мы рассмотрим документацию по API Sinon.js вместе с кратким введением в концепцию методов данной библиотеки. \n\n\n",
        "link": "https://habr.com/ru/company/ua-hosting/blog/274317/"
    },
    {
        "title": "Technical analysis of the checkm8 exploit",
        "body": "\nMost likely you've already heard about the famous exploit checkm8, which uses an unfixable vulnerability in the BootROM of most iDevices, including iPhone X. In this article, we'll provide a technical analysis of this exploit and figure out what causes the vulnerability.",
        "link": "https://habr.com/ru/company/dsec/blog/472762/"
    },
    {
        "title": "Правильный захват контекста в Javascript",
        "body": " Довольно часто во многих статьях я вижу, как люди захватывают контекст this для использования в анонимной функции и удивляюсь — то, что уже стало стандартом — просто ужасная практика, которая противоречит всем канонам программирования. Вам знакома такая запись?\nvar self = this;\nМожет вам тоже стоит переосмыслить этот аспект?\n",
        "link": "https://habr.com/ru/post/103760/"
    },
    {
        "title": "Заметки об NLP (часть 5)",
        "body": "Что ж, продолжим. (Первые части: 1 2 3 4). Долго выбирал, что будет лучше для следующей темы — пофилософствовать о прагматике языка или поговорить конкретно об алгоритмах разбора. Учитывая, что предыдущая часть была неформальной, решил всё-таки переключиться на конкретику, а там посмотрим.\n\nИтак, синтаксический анализ предложения. Давайте сразу определимся, что речь пойдёт о разборе в рамках концепции dependency parsing, причём определяющей методологией разбора будет точный анализ (не статистический). Начнём с небольшого обзора происходящего вокруг.",
        "link": "https://habr.com/ru/post/79882/"
    },
    {
        "title": "Сборка и запуск HipHop-PHP",
        "body": "\nПочти три недели назад был анонсирован новый проект от Facebook. Он называется HipHop-PHP. \nДля широкой публики исходные коды стали доступны лишь сутки назад.\n\nHipHop был создан для улучшения производительности Facebook. Он преобразует PHP код в C++ код и комплирует его с помощью g++. HipHop доступен под opensource лицензией. \n\nВ данной статье описан процесс сборки HipHop из исходных кодов и его использование.\n\n",
        "link": "https://habr.com/ru/post/85092/"
    },
    {
        "title": "репостинг Twitter (или rss) в статус vkontakte.ru на Haskell",
        "body": "В данной статье речь пойдёт о небольшой программке, которая репостит твиты в статус во вконтакте.\nЗадача довольно простая и совершенно неоригинальная. Началось всё с того, что я прочитал статью на Хабре о том, как это решается на python'е и аналогичную статью про php. В интернетах вроде бы даже какие-то онлайн сервисы есть специально для этой задачи. Но тут весь цимус в том, чтобы решить эту несложную задачу самому, используя свои любимые инструменты. Собственно решение на php появилось позже и с такой же целью.\n\nНу и на чём же писал я? На haskell, natürlich!\nДальше подробно расскажу о том, как я всё сделал и как это повторить. Никаких особых знаний для понимания, пожалуй, не требуется.\n",
        "link": "https://habr.com/ru/post/85894/"
    },
    {
        "title": "Teradata – СУБД, параллельная от рождения",
        "body": "Приветствуем, уважаемые Хабравчане. Последнее время на Хабре стало мелькать название компании Teradata в тех или иных вопросах. И, увидев возможный интерес, мы решили рассказать немного о том, что же такое СУБД Teradata, от первого лица. Мы планируем подготовить небольшую серию статей о самых интересных, на наш взгляд, технических особенностях СУБД и работы с ней. Если у вас есть опыт работы с Teradata или в вашей компании используется наша платформа и у вас есть вопросы – подкидывайте их, и мы либо ответим на них в комментариях, либо подготовим соответствующую полноценную статью. А начнем с небольшого обзора. Для знакомства, так сказать.\n",
        "link": "https://habr.com/ru/company/teradata/blog/160821/"
    },
    {
        "title": "Простой будильник с веб-интерфейсом на Asterisk",
        "body": "Идея создать будильник на базе Asterisk была уже давно, т.к. от обычного будильника проснуться получалось не всегда в отличии от звонка. Идея следующая: на веб-сайте задаем свой номер телефона и время, когда нас надо разбудить (с учетом дней недели). Когда наступает час X и минута Y, то Asterisk звонит по указанному номеру и проигрывает ругательную запись о необходимости скорейшего подъема.\n\n",
        "link": "https://habr.com/ru/post/261151/"
    },
    {
        "title": "Shadow DOM: спецификация",
        "body": "Андрей Глазков, Ито Хаято из Google, а также другие специалисты на Github работают над составлением спецификации Shadow DOM. Уже проделана огромная работа, однако еще много предстоит сделать. В рамках поддержки работы на этом направлении создан перевод существующей версии спецификации от 7 июля.\n\nЭта спецификация описывает способ объединения нескольких DOM-деревьев в одну иерархию, и взаимодействие этих деревьев друг с другом в одном документе, что позволяет построить DOM более правильно.\n\n",
        "link": "https://habr.com/ru/company/plarium/blog/262017/"
    },
    {
        "title": "v3.14.1592-beta2: все, что вы хотели знать о семантическом версионировании",
        "body": "Усилия и деньги, вкладываемые в продвижение языка Go, часто приносят пользу и другим разработчикам. В конце прошлого года на сайте gopheracademy была опубликована очень удачная статья о семантическом версионировании. Том самом, которое используется в npm, начинается с домика ^ и все ломает. Под катом спрятан перевод, который поможет вам быстро осмотреть сад граблей версионирования и как сейчас принято им пользоваться. И немного примеров на Go. Передаем слово автору!\n",
        "link": "https://habr.com/ru/company/Voximplant/blog/281593/"
    },
    {
        "title": "Упрощаем конвертеры для WPF",
        "body": "Около года уже работаю с WPF и некоторые вещи в нем откровенно выбешивают. Одна из таких вещей — конвертеры. Ради каждого чиха объявлять реализацию сомнительно выглядящего интерфейса где-то в недрах проекта, а потом искать его через Ctrl+F по названию, когда он вдруг понадобится. В мульти-конвертерах так вообще сам черт запутается.\n\nСитуацию усугубляет MVVM, благодаря которому не использовать это чудо науки получается довольно редко. Что-же, пришло время немного облегчить рутину создания и использования конвертеров, поехали.\n",
        "link": "https://habr.com/ru/post/326646/"
    },
    {
        "title": "Пишем и парсим на ассемблере MCS-51, как на Бейсике",
        "body": "Доброго времени суток, уважаемые.\n\nВ свободное от работы время увлекаюсь программированием микроконтроллеров, на ассемблере. Пока вожусь в основном со всякими PIC(12,16) и AVR, но и MCS-51 не брезгую, тем более что именно с них я собственно и начал. Уровень мой — «вечно начинающий». Это типа светодиодиком уже умею мигать, даже по таймеру.",
        "link": "https://habr.com/ru/post/337168/"
    },
    {
        "title": "Java Native Image: проверка возможности использования",
        "body": "\n\nНе так давно Oracle выпустил первый релиз проекта GraalVM (https://www.graalvm.org/). Релизу был сразу присвоен номер 19.0.0, видимо, для того чтобы убедить, что проект зрелый и готов к использованию в серьезных приложениях. Одна из частей этого проекта: Substrate VM — фреймворк, который позволяет превращать Java-приложения в нативные исполняемые файлы (а также нативные библиотеки, которые можно подключать в приложениях, написанных, например, на С/С++). Эта возможность пока объявлена экспериментальной. Также стоит отметить, что у нативных приложений на Java есть некоторые ограничения: необходимо перечислять все используемые ресурсы, чтобы включить их в нативную программу; нужно перечислить все классы, которые будут использоваться с помощью reflection и другие ограничения. Полный список указан тут Native Image Java Limitations. Изучив этот список, в принципе понятно, что ограничения не такие значительные, чтобы нельзя было разработать более сложные приложения, чем хелловорлды. Мною была поставлена такая цель: разработка небольшой программы, которая имеет встроенный web-сервер, использует базу данных (через ORM библиотеку) и компилируется в нативный бинарник, который может запускаться на системах без установленной Java машины.",
        "link": "https://habr.com/ru/post/454790/"
    },
    {
        "title": "Алгоритмы быстрой обработки HTTP-строк",
        "body": "В HTTP/2 появилась компрессия стандартных заголовков, но тело URI, Cookie, значения User-Agent по-прежнему могут составлять десятки килобайт и требуют токенизации, поиска и сравнения подстрок. Задача становится критичной, если HTTP-парсер должен обрабатывать интенсивный злонамеренный трафик. Стандартные библиотеки предоставляют обширный инструментарий обработки строк, но у HTTP-строки есть своя специфика. Именно для этой специфики разработан HTTP-парсер Tempesta FW. Его производительность в несколько раз выше по сравнению с современными Open Source решениями и превосходит быстрейшие из них.\n\n\nАлександр Крижановский (krizhanovsky) основатель и системный архитектор Tempesta Technologies, эксперт в области высокопроизводительных вычислений в Linux/x86-64. Александр расскажет об особенностях структуры HTTP-строк, объяснит, почему стандартные библиотеки плохо подходят для их обработки, и представит решение Tempesta FW.\n\nПод катом: как HTTP Flood превращает ваш HTTP-парсер в узкое место, проблемы x86-64 с branch mispredictions, кэшированием и не выровненной памятью на типичных задачах HTTP-парсера, сравнение FSM с прямыми переходами, оптимизация GCC, автовекторизация, strspn()- и strcasecmp()-like алгоритмы для HTTP-строк, SSE, AVX2 и фильтрация инъекционных атак с использованием AVX2.\n",
        "link": "https://habr.com/ru/company/oleg-bunin/blog/493242/"
    },
    {
        "title": "Go: десериализация JSON с неправильной типизацией, или как обходить ошибки разработчиков API",
        "body": "\n\nНедавно мне довелось разрабатывать на Go http-клиент для сервиса, предоставляющего REST API с json-ом в роли формата кодирования. Стандартная задача, но в ходе работы мне пришлось столкнуться с нестандартной проблемой. Рассказываю в чем суть.\n\nКак известно, формат json имеет типы данных. Четыре примитивных: строка, число, логический, null; и два структурных типа: объект и массив. В данном случае нас интересуют примитивные типы. Вот пример json кода с четырьмя полями разных типов:\n\n{\n\t\"name\":\"qwerty\",\n\t\"price\":258.25,\n\t\"active\":true,\n\t\"description\":null,\n}\nКак видно в примере, строковое значение заключается в кавычки. Числовое — не имеет кавычек. Логический тип может иметь только одно из двух значений: true или false (без кавычек). И тип null соответственно имеет значение null (также без кавычек).\n\nА теперь собственно сама проблема. В какой-то момент, при детальном рассмотрении получаемого от стороннего сервиса json-кода, я обнаружил, что одно из полей (назовем его price) помимо числового значения периодически имеет строковое значение (число в кавычках). Т. е. один и тот же запрос с разными параметрами может вернуть число в виде числа, а может вернуть это же число в виде строки. Ума не приложу, как на том конце организован код, возвращающий такие результаты, но видимо, это связано с тем, что сервис сам является агрегатором и тянет данные из разных источников, а разработчики не привели json ответа сервера к единому формату. Тем не менее, надо работать с тем что есть.\n\nНо далее меня ждало еще большее удивление. Логическое поле (назовем его active), помимо значений true и false, возвращало строковые значения «true», «false», и даже числовые 1 и 0 (истина и ложь соответственно).\n",
        "link": "https://habr.com/ru/post/502176/"
    },
    {
        "title": "Ускорение сборки проекта на CMake+GCC: предварительная компиляция заголовочных файлов",
        "body": "Есть несколько причин, почему проект на С++ в среднем собирается дольше сравнимых по величине проектов на других языках, например на Java или C#. Соответственно, есть и несколько способов уменьшить время сборки. Одним из самых известных является использование предварительной компиляции заголовочных файлов (precompiled headers). Сегодня я расскажу, как использование этого способа позволило мне существенно уменьшить время сборки моего проекта.",
        "link": "https://habr.com/ru/post/503302/"
    },
    {
        "title": "Зоны в Dart: операция на открытом сердце для окружения",
        "body": "Привет! Меня зовут Дима, я frontend-разработчик в компании Wrike. Клиентскую часть проекта мы пишем на Dart, однако работать с асинхронными операциями нам приходится не меньше, чем на других технологиях. Зоны — один из удобных инструментов, который Dart для этого предоставляет. Но в Dart-сообществе редко можно встретить о нем полезную информацию, поэтому я решил разобраться и рассказать об этом мощном инструменте подробнее.\n",
        "link": "https://habr.com/ru/company/wrike/blog/510270/"
    },
    {
        "title": "Using Flex (Fast Lexical Analyzer Generator)",
        "body": "Lexical analysis is the first stage of a compilation process. It's used for getting a token sequence from source code. It gets an input character sequence and finds out what the token is in the start position, whether it's a language keyword, an identifier, a constant (also called a literal), or, maybe, some error. A lexical analyzer (also known as tokenizer) sends a stream of tokens further, into a parser, which builds an AST (abstract syntax tree).\n\nIt's possible to write a lexer from scratch, but much more convenient to use any lexer generator. If we define some parsing rules, corresponding to an input language syntax, we get a complete lexical analyzer (tokenizer), which can extract tokens from an input program text and pass them to a parser.\n\nOne of such generators is Flex. In this article, we'll examine how it works in general, and observe some nontrivial nuances of developing a lexer with Flex.",
        "link": "https://habr.com/ru/post/521996/"
    },
    {
        "title": "SIRR, не соизволите ли удалить отражение?",
        "body": "Привет! Меня зовут Артём, я учусь на совместной кафедре анализа данных Яндекса и Физтеха. Хочу поделиться с ML-сообществом Хабра темой, тесно связанной с моей научной работой: «Удаление отражений с помощью свёрточной сети, обученной на синтетическом датасете». А чтобы вы могли попробовать всё описанное далее самостоятельно, прилагаю PyTorch-код на GitHub и в Yandex DataSphere.\n\n\nИсточник: SIRR Using Deep Encoder-Decoder Network",
        "link": "https://habr.com/ru/company/yandex/blog/557158/"
    },
    {
        "title": "Функциональное программирование в Swift. Начало",
        "body": "\n\nПредисловие переводчика.\nОтмечая окончание 2014 года, известная Swift группа SLUG из Сан-Франциско выбрала 5 наиболее популярных Swift видео за 2014 с организованных ею встреч. И среди них оказалось выступление Chris Eidhof «Функциональное программирование в Swift».\nСейчас Chris Eidhof  — известная личность в Swift сообществе, он — автор недавно вышедшей книги «Functional programming in Swift», один из создателей журнала objc.io, организатор конференции «Functional Swift Conference», прошедшей 6-го декабря в Бруклине и будущей конференции UIKonf.\nНо я открыла его, когда он, один из первых, опубликовал очень простую элегантную статью об эффективности функционального подхода в Swift к JSON парсингу.\nВ этой статье нет недоступных для понимания концепций, никаких мистических математических «химер» типа «Монада, Функтор, Аппликативный функтор», на которых Haskell программисты клянутся перед оставшимся миром, закатывая глаза.\nТам нет и таких нововведений Swift, как дженерики (generics) и «вывод типа» (type inference).\nЕсли вы хотите плавно «въехать» в функциональное программирование в Swift, то вы должны познакомиться с его статьей «Parsing JSON in Swift» и выступлением на SLUG  «Functional Programming in Swift».\n",
        "link": "https://habr.com/ru/post/246965/"
    },
    {
        "title": "Как эффективно использовать переговорные комнаты при помощи интернета вещей?",
        "body": "В июле мы открыли в Москве собственный технологический и выставочный хаб — Центр цифрового лидерства. Это новая площадка для мероприятий, демонстрации новых инновационных сценариев, разработанных совместно с клиентами и партнёрами SAP.\n\n\n\nПри строительстве собственного Центра мы решили, что необходимо не просто показывать новые технологии в качестве демо-стендов, но и также внедрять их в работу самого Центра.\nНапример, все залы и аудитории в Центре могут трансформироваться – делиться на несколько частей — и вновь объединяться в единое пространство. Также площадка оборудована «умным офисом» — решениями для управления ресурсами, камерами с функцией распознавания лиц, датчиками для интернета вещей. \n\nВ процессе мы придумали простой и эффективный сценарий на базе SAP Cloud Platform для мониторинга того, как эффективно используются переговорные комнаты. В этой статье мы расскажем, как можно быстро и просто собрать такой сценарий за один день.\n\nДалее — про датчики, IoT-сервис в SAP Cloud Platform и «рейтинг кармы» для сотрудников.\n",
        "link": "https://habr.com/ru/company/sap/blog/422475/"
    },
    {
        "title": "Оверинжиниринг головного мозга",
        "body": "Попалась мне простая развлекательная задача: собрать данные о температуре воды и воздуха с пары HTML страниц и выдать результат, в JSON из API. Задача тривиальная, решается кодом строк в 40 (или около того) с комментариями.  Конечно если писать руководствуясь принципом Quick & Dirty. Тогда написаный код будет с душком и не будет соответствовать современным стандартам программирования",
        "link": "https://habr.com/ru/post/533556/"
    },
    {
        "title": "Оптимизация и Generics в CLR",
        "body": " В этой статье Джон Скит будет описывать как простейшие конструкции языка замедляют вашу программу и как их можно ускорить. \n\nКак и в любой работе, сваязанной с производительностью приложений, результат может варьироваться в зависимости от условий (в частности, например, 64-разрядный JIT может работать несколько иначе), и в большинстве случаев это не должно вас волновать. Несмотря на это, относительно небольшое количество разработчиков пишут продакшен-код, состоящий из большого количества микрооптимизаций. Потому, пожалуйста, не принимайте этот пост как призыв к усложнению кода ради иррациональной оптимизации, которая якобы ускорит вашу программу. Используйте это только там, где это реально может понадобиться.\n",
        "link": "https://habr.com/ru/company/clrium/blog/144193/"
    },
    {
        "title": "Класс для редактирования конфигурационных файлов",
        "body": " В любом веб проекте используются конфигурационные файлы. Чаще всего они редактируются на стадии разработки или переносе проекта а потом надолго остаются нетронутыми. Но бывает что конфиг разрастается и в нем появляются параметры которые приходится изменять чаще. \nЗадача довольно тривиальная, создать форму которая позволяет изменить значения некоторых параметров и занести изменения в существующий файл. Но когда часто сталкиваешься с однотипной задачей хочется найти какое-то более менее универсальное решение чтобы не писать каждый раз унылый велосипед. \n",
        "link": "https://habr.com/ru/post/315384/"
    },
    {
        "title": "Пишем babel плагин, пошаговое руководство",
        "body": "\nСегодня я поделюсь с вами пошаговым руководством как написать свой babel плагин. Вы сможете использовать эти знания для автоматизации правок, рефакторинга или кодогенерации. ",
        "link": "https://habr.com/ru/post/490456/"
    },
    {
        "title": "AngouriMath 1.3 update",
        "body": "Four months of awesome work together with a few new contributors finally result in a new major release, which I'm happy to announce about.Now we get completely new matrices, improved parser, a lot of new functions, almost rewritten interactive package (for working in Jupyter) and many more.This article about a big update in a FOSS symbolic algebra library for .NET, I hope it may be interesting for someone!",
        "link": "https://habr.com/ru/post/565996/"
    },
    {
        "title": "ETL в анализе данных без перерывов на кофе и курилку",
        "body": "\nКадр из фильма «Индиана Джонс: В поисках утраченного ковчега» (1981)\nНаблюдаемая все чаще и чаще картина в задаче анализа данных вызывает удручающее впечатление. Intel, AMD и другие производители непрерывно наращивают вычислительную мощность. Гениальные математики-программисты пишут суперэффективные библиотеки и алгоритмы. И вся эта мощь гасится и распыляется рядовыми аналитиками и разработчиками. Причем начинается это все с нулевого этапа — этап подготовки и загрузки данных для анализа. Многочисленные вопросы и диалоги показывают, что в нынешних программах обучения зияют огромные дыры. Людям просто незнакомы многие концепции и инструменты, уже давно придуманные для этих задач. Для тех, кто хочет увеличить свою продуктивность, далее тезисно будут рассмотрены ряд таких подходов и инструментов в частичной привязке к реальным задачам.\nВ первую очередь, материал ориентирован на аналитиков, которые манипулируют разумными объемами данных, необходимых для решения практических задач. ETL из Бигдаты в котором перекачиваются сотни Тб ежесуточно живет своей отдельной жизнью.\nЯвляется продолжением серии предыдущих публикаций. ",
        "link": "https://habr.com/ru/post/574110/"
    },
    {
        "title": "Преобразование данных на TiDB стало проще",
        "body": "\nСредство формирования данных (Data build tool, dbt) — это популярный инструмент с открытым исходным кодом, который позволяет инженерам-аналитикам преобразовывать данные в своих хранилищах с помощью операторов SQL. Совсем недавно участники профильного соощества выпустили плагин dbt-tidb, который позволит TiDB-распределённой базе данных SQL работать с dbt. Благодаря плагину dbt-tidb инженеры-аналитики, работающие с TiDB, могут напрямую создавать формы и сопоставлять данные через SQL без необходимости думать о процессе создания таблиц или представлений. Теперь можно использовать Jinja, язык шаблонов dbt для написания SQL, тестирования, управления пакетами и других функций, что значительно повышает эффективность работы с данными.",
        "link": "https://habr.com/ru/company/first/blog/673584/"
    },
    {
        "title": "Задачи на собеседованиях в Яндексе",
        "body": "Открытые вакансии на должность разработчика в Яндексе есть всегда. Компания развивается, и хороших программистов не хватает постоянно. И претендентов на эти должности тоже хоть отбавляй. Главная сложность – отобрать действительно подходящих кандидатов. И в этом плане Яндекс мало чем отличается от большинства крупных IT-компаний. Так что базовые принципы, описываемые в этой статье, могут быть применимы не только к Яндексу. \n\nОднако стоит оговориться, что статья все же про подбор разработчиков. Т.е. собственно тех восьмидесяти процентов сотрудников, на которых держится массовая разработка. Часто мы нанимаем людей на специальные вакансии: например, разработчиков систем компьютерного зрения, лингвистов, экспертов по машинному обучению. В этом случае формат собеседования может заметно отличаться.\n\n\n",
        "link": "https://habr.com/ru/company/yandex/blog/206234/"
    },
    {
        "title": "Старое доброе ООП: решаем тестовое задание",
        "body": "\nДа, это еще одна статья, вызванная к жизни все тем же тестовым заданием, про решение которого я уже писал. И которое, вообще-то, объективно не заслуживает такого внимания, но так получилось, что меня оно зацепило. Еще когда я разбирался с крутым решением этого задания во второй посвященной ему статье, меня никак не оставляла в покое мысль — а как решить его, чтобы, с одной стороны, не \"на отвали\" (как в исходной статье), а с другой — без монад и goto, как в крутом решении во второй статье. И тогда я вспомнил про старое доброе объектно-ориентированное программирование (ООП), про те далекие времена, когда я писал сервисы для Windows на Delphi и подумал: а не написать ли мне решение именно в духе того старого доброго ООП. Я подумал — и я написал. И как ненастоящий программист, не обязанный писать код по долгу службы, но пишущий код исключительно ради своего удовольствия, я решил поделиться и кодом, и удовольствием (если получится) с читателями.\nЯ не обещаю в этом решении сократить объем кода, используя крутые сторонние библиотеки, или увеличить его производительность крутой оптимизацией под JIT. Я просто хочу продемонстрировать, как можно решить эту задачу, используя старую добрую объектно-ориентированную парадигму, без монад и без goto, руководствуясь здравым смыслом (ну, и небольшим объемом знаний). И как при этом можно написать код — легко* читаемый (* — если вы привыкли использовать ООП) и легко расширяемый, без сторонних библиотек, и оптимизировать его чисто на алгоритмическом уровне, без помощи тонких настроек JIT. \nИтак, кому интересно решение этого неинтересного тестового задания в духе старого доброго ООП, и кто не забыл ещё (но уже осилил), что означает ключевое слово virtual — добро пожаловать под кат.",
        "link": "https://habr.com/ru/post/595065/"
    },
    {
        "title": "Доступ к скрытым настройкам UEFI BIOS от Insyde",
        "body": "Здравствуй Хабр!\n\nОдно из направлений моей компании — продажа технологических решений в области виртуализации. По долгу службы, приходится делать пилотные проекты или устраивать тестовые стенды. Недавно, компания Citrix выпустила новый продукт под название XenClient XT, который по сути является клиентским гипервизором первого уровня, то есть работает на чистом железе. Основной идеей клиентского гипервизора является создание виртуальных машин на собственном ноутбуке. Где и как это применимо — опустим. \n\nВсе современные процессоры Intel и AMD поддерживают технологию аппаратной виртулизации.\nИ так, в моем распоряжении был ноутбук с H77 чипсетом и Intel Core i7-3820QM процессором. Согласно спецификации от производителя, мой процессор поддерживал Intel Virtualization Technology (VT-x) и Intel Virtualization Technology for Directed I/O (VT-d) технологии. Если первая имеется почти на всех новых ноутбуках, то вторая технология встречается только на топовых моделях. Но она дает много преимуществ, как например прямой проброс GDU в виртуальную среду, соответственно клиентская машина получает полную поддержку 3D. Но давайте не будем углубляться в технологии, отличные от тематики данной статьи. \n\nВ моем биосе была возможность включения VT-x, но вот управление технологией VT-d не было предусмотрено изначально. ",
        "link": "https://habr.com/ru/post/182676/"
    },
    {
        "title": "Эмуляция CORS на стороне клиента: кроссбраузерное решение некоторых пользовательских задач без расширений",
        "body": "I. В чём проблема\n\nРасширения для браузеров — мощный инструмент продвинутого веб-сёрфинга, самая доступная, развитая и распространённая часть целого ряда инструментов. Однако расширения имеют и слабые стороны: каждый браузер требует знания и применения своих правил и форматов, а это дополнительная сложность для создателя. Расширения не кроссбраузерны, что сразу ограничивает их адресат. Есть попытки обобщить создание расширений, но они могут добавлять уже свою дополнительную прослойку форматов и правил.\n\nКогда расширение улучшает специфические стороны браузерного интерфейса, без него не обойтись. Но некоторые задачи универсальны, не связаны с частными средствами браузера и, тем не менее, без расширения их тоже не выполнить. Одна из таких задач — кроссдоменные XMLHttpRequest запросы, нарушающие политику одного источника. ",
        "link": "https://habr.com/ru/post/265013/"
    },
    {
        "title": "Рубрика «Читаем статьи за вас». Октябрь — Ноябрь 2017",
        "body": "\nПривет, Хабр! По традиции, представляем вашему вниманию дюжину рецензий на научные статьи от членов сообщества Open Data Science из канала #article_essense. Хотите получать их раньше всех — вступайте в сообщество ODS!\nСтатьи выбираются либо из личного интереса, либо из-за близости к проходящим сейчас соревнованиям. Напоминаем, что описания статей даются без изменений и именно в том виде, в котором авторы запостили их в канал #article_essence. Если вы хотите предложить свою статью или у вас есть какие-то пожелания — просто напишите в комментариях и мы постараемся всё учесть в дальнейшем.\nСтатьи на сегодня:",
        "link": "https://habr.com/ru/company/ods/blog/343822/"
    },
    {
        "title": "Модернизация IDA Pro. Учимся писать загрузчики на Python",
        "body": "\nПривет всем,\nцикл статей по написанию разных полезных штук для IDA Pro продолжается. В прошлый раз мы исправляли процессорный модуль, а сегодня речь пойдёт о написании модуля-загрузчика (лоадера) для одной винтажной операционной системы, а именно — для AmigaOS. Писать будем на Python. Также я постараюсь раскрыть некоторые тонкости при работе с релоками (они же relocations), которые встречаются во многих исполняемых файлах (PE, ELF, MS-DOS и т.п.).",
        "link": "https://habr.com/ru/company/pt/blog/424457/"
    },
    {
        "title": "PVS-Studio for Java",
        "body": "\nIn the seventh version of the PVS-Studio static analyzer, we added support of the Java language. It's time for a brief story of how we've started making support of the Java language, how far we've come, and what is in our further plans. Of course, this article will list first analyzer trials on open source projects.",
        "link": "https://habr.com/ru/company/pvs-studio/blog/436496/"
    },
    {
        "title": "Internet Issues & Availability Report 2018–2019",
        "body": "\n\nWhile working on the annual report this year we have decided to avoid retelling the news headlines of the previous year and, though it is almost impossible to ignore memories absolutely, we want to share with you the result of a clear thought and a strategic view to the point where we all are going to arrive in the nearest time — the present.\n\nLeaving introduction words behind, here are our key findings:\n\n\nAverage DDoS attack duration dropped to 2.5 hours;\nDuring 2018, the capability appeared for attacks at hundreds of gigabits-per-second within a country or region, bringing us to the verge of “quantum theory of bandwidth relativity”;\nThe frequency of DDoS attacks continues to grow;\nThe continuing growth of HTTPS-enabled (SSL) attacks;\nPC is dead: most of the legitimate traffic today comes from smartphones, which is a challenge for DDoS actors today and would be the next challenge for DDoS mitigation companies;\nBGP finally became an attack vector, 2 years later than we expected;\nDNS manipulation has become the most damaging attack vector;\nOther new amplification vectors are possible, like memcached & CoAP;\nThere are no more “safe industries” that are invulnerable to cyberattacks of any kind.\n\nIn this article we have tried to cherry-pick all the most interesting parts of our report, though if you would like read the full version in English, the PDF is available.",
        "link": "https://habr.com/ru/company/qrator/blog/440058/"
    },
    {
        "title": "How to write the home address right?",
        "body": "How Tax Service, OpenStreetMap, and InterSystems IRIS\ncould help developers get clean addresses\n\nPieter Brueghel the Younger, Paying the Tax (The Tax Collector), 1640\n\nIn my previous article, we just skimmed the surface of objects. Let's continue our reconnaissance. Today's topic is a tough one. It's not quite BIG DATA, but it's still the data not easy to work with: we're talking about fairly large amounts of data. It won't all fit into RAM at once, and some of it won't even fit on the drive (not due to lack of space, but because there's a lot of junk). The name of our subject is FIAS DB: the Federal Information Address System database — the databases of addresses in Russia. The archive is 5.5 GB. And it's a compressed XML file. After extraction, it will be a full 53 GB (set aside 110 GB for extraction). And when you start to parse and convert it, that 110 GB won't be enough. There won't be enough RAM either.",
        "link": "https://habr.com/ru/post/446376/"
    },
    {
        "title": "How I discovered an easter egg in Android's security and didn't land a job at Google",
        "body": " Google loves easter eggs. It loves them so much, in fact, that you could find them in virtually every product of theirs. The tradition of Android easter eggs began in the very earliest versions of the OS (I think everyone there knows what happens when you go into the general settings and tap the version number a few times).\n\nBut sometimes you can find an easter egg in the most unlikely of places. There’s even an urban legend that one day, a programmer Googled “mutex lock”, but instead of search results landed on foo.bar, solved all tasks and landed a job at Google.\n\nReconstruction\n\nThe same thing (except without the happy ending) happened to me. Hidden messages where there definitely couldn’t be any, reversing Java code and its native libraries, a secret VM, a Google interview — all of that is below.",
        "link": "https://habr.com/ru/post/446790/"
    },
    {
        "title": "Стажировка в JetBrains и как мне почти удалось попасть на неё",
        "body": "\n\nКак и многие молодые разработчики, когда появляется желание найти работу/стажировку — я смотрю в сторону крутых IT компаний.\n\nНедавно я попробовал попасть в ряды JetBrains и под катом готов поделиться полученным опытом.",
        "link": "https://habr.com/ru/post/454354/"
    },
    {
        "title": "Организуем ML-проект с помощью Ocean",
        "body": "\nВступление\nЗа годы разработки ML- и DL-проектов у студии Surf накопились и большая кодовая база, и много опыта, и интересные инсайты и выводы. При старте нового проекта эти полезные знания помогают увереннее начать исследование, переиспользовать полезные методы и получить первые результаты быстрее. \nОчень важно, чтобы все эти материалы были не только в головах разработчиков, но и в читаемом виде на диске. Это позволит эффективнее обучить новых сотрудников, ввести их в курс дела и погрузить в проект.\nКонечно, так было не всегда. Мы столкнулись с множеством проблем на первых этапах\n\nКаждый проект был организован по-разному, особенно если их инициировали разные люди.\nНедостаточно отслеживали, что делает код, как его запустить и кто его автор.\nНе использовали виртуализацию в должной степени, зачастую мешая своим коллегам установкой существующих библиотек другой версии.\nЗабывались выводы, сделанные по графикам, которые осели и умерли в горé jupyter-тетрадок.\nТеряли отчеты по результатам и прогрессу в проекте.\n\nДля того, чтобы эти проблемы решить раз и навсегда, мы решили, что нужно работать как над единой и правильной организаций проекта, так и над виртуализацией, абстракцией отдельных компонентов и переиспользуемостью полезного кода. Постепенно весь наш прогресс в этой области перерос в самостоятельный фреймворк — Ocean.\nВишенка на торте — логи проекта, которые агрегируются и превращаются в красивый сайт, автоматически собранный с помощью выполнения одной команды.\nВ статье мы расскажем на маленьком искусственном примере, из каких частей состоит Ocean и как его использовать.",
        "link": "https://habr.com/ru/company/surfstudio/blog/459340/"
    },
    {
        "title": "Интеграция Aviasales API с Amazon Kinesis и простота serverless",
        "body": "Привет, Хабр!\n\nА вы любите летать на самолетах? Я обожаю, но на самоизоляции полюбил еще и анализировать данные об авиабилетах одного известного ресурса — Aviasales.\n\nСегодня мы разберем работу Amazon Kinesis, построим стримминговую систему с реал-тайм аналитикой, поставим NoSQL базу данных Amazon DynamoDB в качестве основного хранилища данных и настроим оповещение через SMS по интересным билетам. \n\nВсе подробности под катом! Поехали!\n\n",
        "link": "https://habr.com/ru/post/500382/"
    },
    {
        "title": "OpenSSL и Network Security Services (NSS) — две стороны одной медали",
        "body": "О какой медали идет речь в заголовке? Речь идет об инфраструктуре открытых ключей (Public Key Infrastructure — PKI/ИОК) на базе стандартов криптографии с открытым ключом (Public Key Cryptography Standards — PKCS). Инфраструктура открытых ключей включает в себя множество различных объектов и механизмов работы с ними, а также протоколы взаимодействия объектов друг с другом (например, протоколы TLS, OCSP). В число объектов ИОК/PKI входят сертификаты x509 и ключевые пары (приватные и публичные ключи), подписанные и зашифрованные документы (pkcs#7, CMS), защищенные контейнеры для хранения приватных ключей (pkcs#8) и личных сертификатов с ключами (pkcs#12) и т.д. В число механизмов входят не только криптографические функции, которые позволяют шифровать и подписывать документы по различным алгоритмам, но и функции, формирующие конечные объекты ИОК в соответствии со стандартами (сертификаты, запросы, подписанные/зашифрованные документы, пакеты протоколов и т.д. и т.п.). Да, и как не вспомнить центральный объект ИОК/PKI — Удостоверяющий Центр (УЦ). ",
        "link": "https://habr.com/ru/post/511704/"
    },
    {
        "title": "MikroTik Скрипт: Массовое создание VPN (PPP) пользователей, из csv файла",
        "body": "Не самая частая задача на устройствах MikroTik - одномоментное создание большого количества VPN/PPP  пользователей. Но когда она возникает, это превращается в очень скучное и нудное дело, что следует исправить. Импортируем PPP пользователей из CSV файла, на устройство MikroTik. - «Что, мой мальчик, получается ли тебе собрать слово Вечность?»- «Трудно, моя госпожа, сложить слово Вечность из букв Ж, П, О и А», - ответил Кай.Скриптовый язык MikroTik никак нельзя назвать полноценным языком программирования, поэтому слово \"Вечность\" будем собирать из того что есть, добавляя костыли и перематывая синей изолентой.",
        "link": "https://habr.com/ru/post/532696/"
    },
    {
        "title": "Cемантическое слияние JSON файлов в Git",
        "body": "Операция слияния (merge), выполняемая стандартными средствами git, хорошо работает для текстовых файлов, содержащих исходные тексты программ. Но слияние текстовых файлов, содержащих жестко структурированные данные, в частности JSON — это большая головная боль.\n\nДля решения этой проблемы можно подключить к git'у отдельный инструмент слияния для JSON-файлов, который не работает построчно, а учитывает структуру JSON-объектов.\n\nПредлагаю использовать для этого скрипт на javascript, который анализирует сливаемые JSON-файлы и делает слияние на основании структуры и вложенности объектов JSON.\n",
        "link": "https://habr.com/ru/post/244839/"
    },
    {
        "title": "Unreal Engine: Unreal header tool и Рефлексия в деталях",
        "body": "Привет Хабр!В этой статье будет разобрана работа Unreal Header tool, рефлексии, и немного затронем VM.",
        "link": "https://habr.com/ru/post/690662/"
    },
    {
        "title": "Полное руководство по написанию утилиты для Go",
        "body": "\nНекоторое время назад я начал делать утилиту, которая упростила бы мне жизнь. Она называется gomodifytags. Утилита автоматически заполняет поля структурных тегов (struct tag) с помощью имён полей. Пример:\nПример использования gomodifytags в vim-go\nЭта утилита облегчает управление многочисленными полями структуры. Она умеет добавлять и удалять теги, управлять их опциями (например, omitempty), определять правила трансформации (snake_case, camelCase и пр.) и многое другое. Как эта утилита работает? Какие Go-пакеты она использует? Наверное, у вас есть много вопросов.\nВ этой очень длинной статье я подробно расскажу о том, как написать и собрать такую утилиту. Здесь вы найдёте много советов и хитростей, а также кода на Go.\nНалейте кофе и начинайте читать!",
        "link": "https://habr.com/ru/company/vk/blog/341822/"
    },
    {
        "title": "Часть 2. Пишем сервис парсинга матчей Dota 2 на Celery и Flask",
        "body": "В предыдущей статье мы распарсили реплей одного матча по Dota 2 и нашли хайлайты с помощью кластеризации. В данной статье увеличим масштаб и напишем сервис для параллельного парсинга реплеев на Celery и Flask.",
        "link": "https://habr.com/ru/post/677200/"
    },
    {
        "title": "Математические выражения в .NET (разбор, дифференцирование, упрощение, дроби, компиляция)",
        "body": "Мне со школьных времен был интересен алгоритм вывода аналитических производных и упрощения выражений. Данная задача была актуальна впоследствии и в вузе. Тогда-то я реализовал ее, только получилось все не так, как хотелось: вместо кода IL у меня просто генерировался C# код в текстовом виде, сборки не выгружались, ну и к тому же не было возможности вывода производных в аналитическом виде. Однако потом я решил все-таки реализовать такую библиотеку, так как интерес остался. Стоит отметить, что таких библиотек в интернете большое количество, но нигде я не нашел именно этапа компиляции выражений в IL код, т.е. по сути везде выполняется интерпретация, которая не столь эффективна, в отличие от компиляции. Ну и к тому же я это разрабатывал чисто для себя, для изучения новых технологий, особо не надеясь, что результат моих трудов может где-нибудь потребоваться. Для нетерпеливых: исходники, программа.\n\nИспользуемые программы и библиотеки\n\nGOLD Parsing System — IDE для написания грамматик и генерации кода лексеров и парсеров под различные языки (C, C#, Java, JavaScript, Objective-C, Perl, Python, Ruby и др.). Основана на LALR парсинге.\nVisual Studio 2010\nGOLD.Engine — сборка под .NET, подключаемая для взаимодействия со сгенерированными таблицами.\nNUnit — Открытая среда юнит-тестирования приложений для .NET.\nILSpy — OpenSource дизассемблер под .NET.\n\nЭтапы, на которые я разбил весь процесс:\n\nПостроение дерева выражения\nВычисление аналитической производной\nУпрощение (симплификация) выражения\nОбработка рациональных дробей\nКомпиляция выражения\n",
        "link": "https://habr.com/ru/post/150043/"
    },
    {
        "title": "Мониторинг БД Oracle с помощью OEM",
        "body": "\n\nПривет! Меня зовут Александра, я работаю в команде тестирования производительности. В этой статье расскажу базовые сведения об OEM от Oracle. Статья будет полезна для тех, кто только знакомится с платформой, но и не только для них. Основная цель статьи — помочь провести быстрый анализ производительности БД и поиск отправных точек для более глубокого анализа.\nOEM (Oracle Enterprise Manager) — платформа для управления БД. OEM предоставляет графический интерфейс для выполнения большого количества операций с базами данных: резервное копирование, просмотр аварийных журналов, графиков производительности. ",
        "link": "https://habr.com/ru/company/tinkoff/blog/525436/"
    },
    {
        "title": "Минимальная реализация Lua на Rust",
        "body": "После того, как вы освоите это руководство, в вашем распоряжении окажется минимальная реализация Lua (парсер, компилятор, виртуальная машина), написанная на Rust с чистого листа. Этот проект получил название Lust, его код можно найти на GitHub. \n\n",
        "link": "https://habr.com/ru/company/ruvds/blog/649973/"
    },
    {
        "title": "Играем в RSS с PlayFramework 2.2 и Scala",
        "body": "\n\nДоброго времени суток, уважаемые хабравчане.\n\nМы, погромпрограммисты, очень часто сталкиваемся с одной и той же проблемой при изучении нового языка X или фреймворка Y — что писать после вступительного туториала Yet Another Hello World? Что-нибудь, что сможет показать какие-то преимущества и недостатки X/Y, но при этом не заняло бы много времени.\n\nМы с товарищами часто задавались подобным вопросом. В итоге родилась простая мысль — напиши RSS читалку. Тут тебе и работа с сетью, и XML парсер, и БД можно подключить, поглядеть на шаблонизатор. Да мало ли.\n\nИтак, здесь начинается увлекательное путешествие в стек Play Framework 2.2 + Scala + MongoDB на бэкэнде и AngularJS + CoffeeScript на фронтенде.\n\nTL;DRВесь проект вместился в ~250-300 строк на Scala с документацией и ~150 строк на CS. Ну и немного HTML. \nКод доступен на Bitbucket\n",
        "link": "https://habr.com/ru/post/197930/"
    },
    {
        "title": "Выразительный JavaScript: Проект: язык программирования",
        "body": "Содержание\n\nВведение\nВеличины, типы и операторы\nСтруктура программ\nФункции\nСтруктуры данных: объекты и массивы\nФункции высшего порядка\nТайная жизнь объектов\nПроект: электронная жизнь\nПоиск и обработка ошибок\nРегулярные выражения\nМодули\nПроект: язык программирования\nJavaScript и браузер\nDocument Object Model\nОбработка событий\nПроект: игра-платформер\nРисование на холсте\nHTTP\nФормы и поля форм\nПроект: Paint\nNode.js\nПроект: веб-сайт по обмену опытом\nПесочница для кода\n\n\nТо, что проверяет и определяет смысл выражений в языке программирования, является в свою очередь просто программой.\n\nХэл Абельсон и Жеральд Сасман, «Структура и интерпретация компьютерных программ».\n\nКогда ученик спросил учителя о природе цикла Данных и Контроля, Юань-Ма ответил: «Подумай о компиляторе, компилирующем самого себя».\n\nМастер Юань-Ма, «Книга программирования»\n\nСоздать свой язык программирования удивительно легко (пока вы не ставите запредельных целей) и довольно поучительно.\n\nГлавное, что я хочу продемонстрировать в этой главе – в построении языка нет никакой магии. Мне часто казалось, что некоторые человеческие изобретения настолько сложны и заумны, что мне их никогда не понять. Однако после небольшого самообразования и ковыряния такие штуки часто оказываются довольно обыденными.\n\nМы построим язык программирования Egg (Яйцо). Он будет небольшим, простым, но достаточно мощным для выражения любых расчётов. Он также будет осуществлять простые абстракции, основанные на функциях.",
        "link": "https://habr.com/ru/post/243277/"
    },
    {
        "title": "PVS-Studio: static code analysis technology",
        "body": "\nPVS-Studio provides static analyzers for C, C++, C# and Java languages on Windows, Linux and macOS platforms. PVS-Studio analyzers can vary slightly due to certain features that the languages have. However, all our analyzers share common technologies and approaches to the implementation of static analysis.",
        "link": "https://habr.com/ru/company/pvs-studio/blog/645065/"
    },
    {
        "title": "Работа с модулями",
        "body": "Задача:\nИспользовать класс, в который можно добавлять новые методы воздействия, чтобы в последующем можно было ими пользоваться. При этом отделить эти методы по разным файлам. \nПредставим космический корабль, в котором используются:\na) методы перемещения по пространству, связанные с двигателем\nб) методы зарядки энергии, связанные с его солнечными батареями\nв) итд\n\nЕсть варианты:\n1) Создание в объекте переменных и инициализация их через __construct, как новые классы. \nНо, при создании каждого нового объекта — мы получаем снижение производительности и постоянную модификацию класса (что может осложнять работу нескольких программистов).\n2) Работа через функции __call, __get, __set.\nВ 3-10 раз более медленная работа этих функций. Особенно при вызове call_user_func_array с параметрами.\n\nЯ предлагаю свой вариант. \nБыстрый, оптимизированный, но при этом есть небольшая сложность в отладке.\n\nВ этом хабратопике я затрону темы:\n1. Overloading\n2. Ускорение загрузки модулей. Объединение модулей.\n3. Оптимизация\n",
        "link": "https://habr.com/ru/post/57024/"
    },
    {
        "title": "Заметки об NLP (часть 6)",
        "body": "(Первые части: 1 2 3 4 5). Надеюсь, разговор о естественном языке читателей ещё не утомил! По-моему, тематика действительно интересная (хотя популярность топиков явно идёт на убыль :) ). Что ж, посмотрим, на сколько частей меня ещё хватит. Думаю, экватор мы уже прошли, но три-четыре темы затронуть ещё можно.\n\nНа сей раз заметка полностью посвящена проекту XDG/XDK, который я пытаюсь изучать на досуге. Назвать себя специалистом по XDG пока ещё не могу. Но потихоньку двигаюсь.",
        "link": "https://habr.com/ru/post/79923/"
    },
    {
        "title": "Если поумнеет",
        "body": "Ох этот скромный {% if %}. Краеугольный камень шаблоной логики Django.\n\nКаждый, кто начинал работать с Django 1.1 (или ранее), почти наверняка спотыкался об этот камень — шаблонный тег {% if %} поддерживает булеву логику только на базовом уровне.",
        "link": "https://habr.com/ru/post/87794/"
    },
    {
        "title": "CISCO ACE — балансировка приложений",
        "body": "Всем привет!\n\nХочу немного рассказать о семействе оборудования для Центров обработки данных от CISCO – CISCO ACE (Application Control Engine). В этой статье будут затронуты такие вопросы как предназначение устройств, архитектурные особенности, возможности применения, настройка основных функций. Больших тонкостей работы материал не предусматривает, скорее рассчитан на тех, кто думает о внедрении подобных устройств, пытается сделать выбор, хочет понять как такое оборудование поможет оптимизировать сетевую инфраструктуру, повысить доступность и время внедрения сервисов.\n\n",
        "link": "https://habr.com/ru/post/143564/"
    },
    {
        "title": "Как локализовать приложение на много языков, чтобы не было мучительно стыдно",
        "body": " На Хабре не раз обсуждались вопросы локализации/интернационализации приложений. Мы – компания ABBYY Language Services – давно работаем в области лингвистических услуг, сервисов и технологий, и локализацией софта занимаемся постоянно. У нас в этом вопросе накопился значительный опыт, мы решили им поделиться, сделав больший акцент на организации всего процесса. Локализация приложений — более сложная задача, чем принято считать, и подойти к ней можно разными способами: можно изначально создать простой и понятный текст, можно вложиться в крутых переводчиков, которые из любого текста вытянут смысл, можно сделать подготовку и перевод текста «как-нибудь», но посадить сообщество или тестировщиков на выверку финального результата. Необходимо только помнить, что выверка исходного текста делается на одном языке, а выверка результата — на всех языках, т. е. усилий надо затратить в N раз больше.\n\nВообще, локализация — это по факту открытие еще одного рынка, и понятно, что, при принятии решения о локализации, руководство рассчитывает получить дополнительную прибыль. При этом зачастую в эту самую локализацию вкладывают лишь малую часть от общего бюджета разработки (скажем, порядка 1–2 %). Т.е. расчет идет на то, что, добавив 1 %, можно получить + 50 % дохода. Насколько реалистичными могут быть такие ожидания? \n",
        "link": "https://habr.com/ru/company/abbyy/blog/168653/"
    },
    {
        "title": "Консольные команды на PHP",
        "body": "У многих, равно как и у меня, периодически возникает потребность в реализации каких-то небольших задач. Например распарсить сайт/API и сохранить данные в xml/json/csv, произвести какие-либо расчеты/пересчеты, перегнать данные из одного формата в другой, собрать статистику и т.д. и т.п. Замечу, что речь о задачах не связанных с текущими проектами.\n\n\n\nСобирать тяжелый фреймворк ради удобных фич, лень, а реализовывать в рамках кода текущих проектов как-то не эстетично. Поэтому для экономии своего времени приходится создавать скрипт, копипастить в него куски кода из предыдущих наработок, подключать разнообразные библиотеки и запускать скрипт из консоли. При этом часто требуется некоторая интерактивность работы скрипта: обработка опций/аргументов, а то и диалоговое взаимодействие. Здесь главное чтобы не было настроения, которое хорошо описывается выражением «Аппетит приходит во время еды», тогда вообще не понятно к чему приведет работа над простой задачкой =)\n\nВ такие моменты я вспоминал удобную симфоническую консоль, к которой успел привыкнуть работая с проектами на \nSymfony 2. Не в обиду другим консолям (zend, yii, django, ror etc), все хороши, просто так сложилось.\n\nКогда в очередной раз потребовалось что-то распарсить, я опять вспомнил про консоль Symfony (Console Component) и тот факт, что это независимый компонент все больше подтолкнул меня к мысли использовать ее возможности.\n\nЗа пару часов получилась простая тулза, в основе которой:\n\nsymfony/console — сама консоль\nsymfony/finder — для поиска и подключения к приложению наших комманд\nsuncat/symfony-console-extra — несколько плюшек для того чтобы это все работало\n\nи менеджер зависимостей Composer, который нам поможет все это быстро собрать, добавлять новые либы, а также возьмет на себя автозагрузку классов.\n",
        "link": "https://habr.com/ru/post/173553/"
    },
    {
        "title": "Контейнер серверного java-кода с поддержкой постоянного соединения",
        "body": " Disclaimer\nВсе, описанное в статье, является личным практическим опытом и не претендует на звание «истины в последней инстанции».\n\n Преамбула\nЗдравствуйте. Я увлекаюсь созданием компьютерных игр. Моим любимым направлением, в котором я постоянно стараюсь совершенствоваться и узнавать что-то новое, являются браузерные многопользовательские игры. \nДля создания прототипа для одной идеи в качестве контейнера сервлетов используется Apache Tomcat. Он общается с клиентской частью по http протоколу. Для такого типа игры схема вполне действующая, причем достаточно простая в реализации.\nНо одной из преждевременных оптимизаций(да, это плохо, но тут я решил себе это позволить) стала идея использовать постоянное соединение между сервером и клиентом, т.к. в такой схеме не тратится время на открытие\\закрытие соединения в каждом запросе. Для реализации схемы рассматривалось WebSocket API для Tomcat, но стало интересно написать свой велосипед, поэтому, встречайте рассказ о разработке под катом. ",
        "link": "https://habr.com/ru/post/188088/"
    },
    {
        "title": "Теория и практика парсинга исходников с помощью ANTLR и Roslyn",
        "body": "В нашем проекте PT Application Inspector реализовано несколько подходов к анализу исходного кода на различных языках программирования:\n\nпоиск по сигнатурам;\nисследование свойств математических моделей, полученных в результате статической абстрактной интерпретации кода;\nдинамический анализ развернутого приложения и верификация на нем результатов статического анализа.\n\nНаш цикл статей посвящен структуре и принципам работы модуля сигнатурного поиска (PM, pattern matching). Преимущества такого анализатора — скорость работы, простота описания шаблонов и масштабируемость на другие языки. Среди недостатков можно выделить то, что модуль не в состоянии анализировать сложные уязвимости, требующие построения высокоуровневых моделей выполнения кода.\n\nК разрабатываемому модулю были, в числе прочих, сформулированы следующие требования:\n\nподдержка нескольких языков программирования и простое добавление новых;\nподдержка анализа кода, содержащего синтаксические и семантические ошибки;\nвозможность описания шаблонов на универсальном языке (DSL, domain specific language).\n\nВ нашем случае все шаблоны описывают какие-либо уязвимости или недостатки в исходном коде.\nВесь процесс анализа кода может быть разбит на следующие этапы:\n\nпарсинг в зависимое от языка представление (abstract syntax tree, AST);\nпреобразование AST в независимый от языка унифицированный формат;\nнепосредственное сопоставление с шаблонами, описанными на DSL.\n\nДанная статья посвящена первому этапу, а именно: парсингу, сравнению функциональных возможностей и особенностей различных парсеров, применению теории на практике на примере грамматик Java, PHP, PLSQL, TSQL и даже C#. Остальные этапы будут рассмотрены в следующих публикациях.",
        "link": "https://habr.com/ru/company/pt/blog/210772/"
    },
    {
        "title": "Веб-сервер за 5 минут на базе PIC и W5100",
        "body": "Все, что вы хотели узнать о том, как за 5 минут запустить простой веб-сервер на чипе W5100, но стеснялись спросить.\n\n\n\nВ статье будет просто, подробно и ясно описано, как запустить, например, веб-сервер, на замечательной и недорогой микросхеме W5100 компании Wiznet.\n\nЧем же она замечательна? \nВо-вторых – недорогая. \nИ во-первых – всю работу она делает за Вас. Вам же остается лишь лениво слать-принимать ТЕКСТОВЫЕ (точнее — HTML) данные.\n",
        "link": "https://habr.com/ru/post/230661/"
    },
    {
        "title": "Несколько интересностей и полезностей для веб-разработчика #24",
        "body": "Доброго времени суток, уважаемые хабравчане. За последнее время я увидел несколько интересных и полезных инструментов/библиотек/событий, которыми хочу поделиться с Хабром. \n\nWebhook\n\n\nWebhook — это платформа для создания сайтов. Важно не путать со статическими генераторами, потому что это именно «CMS builder». Проект успешно завершил кампанию на Kickstarter 14 мая этого года, где смог собрать сумму в два раза большую, чем было необходимо. А буквально недавно состоялся релиз первой версии продукта. Webhook построен с использованием NodeJS, Grunt и Firebase для реалтайма, работает на Windows, Linux и Mac, внутри целая система виджетов со множеством вариаций на выходе, «Django-like templating» с помощью Swig JS, кроссплатформенная админ панель и еще целый ряд плюсов. \n",
        "link": "https://habr.com/ru/post/231151/"
    },
    {
        "title": "Linux Mint 17 и DLNA",
        "body": "Зачем это все надо\nLinux Mint — отличная домашняя ОС. Богатый выбор графических сред на любой вкус, простая и понятная даже новичку установка, сразу после установки имеем основной набор необходимого софта, удобный менеджер приложений, основные мультимедийные кодеки. В общем, отличная система для перехода и ознакомления с Linux.\n\n\n\nНо возникает проблема для тех, у кого нет дома NAS или чего-то подобного, а смотреть контент с ПК на других устройствах, поддерживающих DLNA хочется. Под Linux существует множество различных DLNA-серверов, но оптимальным, все же, является MiniDLNA. И тому есть несколько причин. Во-первых, это типичный Unix-way: этот сервер является именно DLNA-сервером, а не комбайном с кучей свистелок, при этом контент без проблем воспринимается на любом устройстве. Даже телевизоры Samsung со своим AllShare прекрасно подключаются к нему. Также можно отметить и замечательную скорость работы и нетребовательность к ресурсам этого сервера.\n\nИ все бы было хорошо, но вот в с помощью команды sudo apt-get install minidlnaустановить его не получится — нет его в репозитарии.\n\nСуществуют разные варианты устранения этого недоразумения, но самый правильный путь — установка из исходников.\nЧтобы не отвратить возможных новоиспеченных линуксоидов с этого пути и, возможно, помочь кому-то, напишу как обойти подводные камни, ибо информации много, но в начале пути людям нужно попроще.\n",
        "link": "https://habr.com/ru/post/231653/"
    },
    {
        "title": "Эффективный JSON с функциональными концепциями и generics в Swift",
        "body": "Это перевод статьи Tony DiPasquale «Efficient JSON in Swift with Functional Concepts».\n\nПредисловие переводчика\nПередо мной была поставлена задача: закачать данные в формате JSON с Flickr.com о 100 топ местах, в которых сделаны фотографии на данный момент, в массив моделей:\n",
        "link": "https://habr.com/ru/post/244821/"
    },
    {
        "title": "Интегрируем оплату через Paypal в web-приложение",
        "body": "В данной статье рассмотрена интеграция разовых платежей, а также оплаты по подписке с помощью Paypal в веб-приложение. Примеры реализованы на PHP, но, в принципе, без особых проблем то же самое можно сделать с помощью других технологий. Данный метод выбран как компромисс между простотой и гибкостью. Это попытка написать руководство, которое поможет быстро разобраться в теме и интегрировать оплату через Paypal в свой проект.\n\nСтатья ориентирована в основном на тех, кто раньше с этой системой не работал. Знатоки Paypal вряд ли найдут здесь для себя что-то новое. Но, возможно, они укажут на недостатки данного метода или посоветуют, как можно было бы по-другому это реализовать.",
        "link": "https://habr.com/ru/post/266091/"
    },
    {
        "title": "Шифрование на JavaScript с использованием библиотеки pidCrypt",
        "body": "pidCrypt это open source библиотека криптографических алгоритмов. Поддерживает RSA и AES шифрование/дешифрование, и расчёт MD5 и SHA хэшей. \n",
        "link": "https://habr.com/ru/company/comet-server/blog/272507/"
    },
    {
        "title": "Мониторинг торрентов и автоматическая скачка",
        "body": "Совсем недавно на Хабре было 2 статьи о том, как автоматизировать процесс скачивания новых серий с торрентов. Авторы обеих статей поделились своими приложениями. Вот уже год мы тоже разрабатываем подобное приложение и мне кажется, пришло время рассказать хабрасообществу о нашем маленьком, но прекрасном проекте Monitorrent, который, возможно, сделает вашу жизнь настолько проще и удобнее, насколько сделал нашу.\n\nВеб приложение написано на Python 2 (с поддержкой Python 3). Оно позволяет добавлять новые торренты для мониторинга, автоматически скачивать новые серии и добавлять их в торрент клиент.\nМы им пользуемся на постоянной основе с конца прошлого года, а 1 мая 2016 мы выпустили первую релизную версию, которая без каких-либо сбоев крутится до сих пор на cubietruck в docker контейнере.\nЗа подробностями того как оно работает внутри прошу под ",
        "link": "https://habr.com/ru/post/305574/"
    },
    {
        "title": "Выбираем html-парсер для Apache.JMeter",
        "body": "\nСреднее качество работы парсеров (для семи сайтов)\n\nПредлагаю:\n\n\nпосчитать среднее качество полноты извлечения ссылок на встроенные ресурсы html-парсерами Apache.JMeter;\nпроверить правда ли извлечение ссылок в Apache.JMeter 3.0 стало более полным;\nиспытать в деле плагин CsvLogWriter.\n\nКак гласит народная мудрость: Верить верь, но…\n",
        "link": "https://habr.com/ru/post/308254/"
    },
    {
        "title": "Автономный способ обхода DPI и эффективный способ обхода блокировок сайтов по IP-адресу",
        "body": "Провайдеры Российской Федерации, в большинстве своем, применяют системы глубокого анализа трафика (DPI, Deep Packet Inspection) для блокировки сайтов, внесенных в реестр запрещенных. Не существует единого стандарта на DPI, есть большое количество реализации от разных поставщиков DPI-решений, отличающихся по типу подключения и типу работы.\n\nСуществует два распространенных типа подключения DPI: пассивный и активный.\n\nПассивный DPIПассивный DPI — DPI, подключенный в провайдерскую сеть параллельно (не в разрез) либо через пассивный оптический сплиттер, либо с использованием зеркалирования исходящего от пользователей трафика. Такое подключение не замедляет скорость работы сети провайдера в случае недостаточной производительности DPI, из-за чего применяется у крупных провайдеров. DPI с таким типом подключения технически может только выявлять попытку запроса запрещенного контента, но не пресекать ее. Чтобы обойти это ограничение и заблокировать доступ на запрещенный сайт, DPI отправляет пользователю, запрашивающему заблокированный URL, специально сформированный HTTP-пакет с перенаправлением на страницу-заглушку провайдера, словно такой ответ прислал сам запрашиваемый ресурс (подделывается IP-адрес отправителя и TCP sequence). Из-за того, что DPI физически расположен ближе к пользователю, чем запрашиваемый сайт, подделанный ответ доходит до устройства пользователя быстрее, чем настоящий ответ от сайта.",
        "link": "https://habr.com/ru/post/335436/"
    },
    {
        "title": "Vertex Wireless VW210: редкий роутер и его внутренний мир",
        "body": "Лирическое отступление: всё описанное в данной статье производилось исключительно в образовательных целях, цели извлечения материальной выгоды не преследовалось, ни одного котика в процессе (надеюсь) не пострадало. Всё, что здесь описано вы повторяете на свой страх и риск.\nКДПВ курильщика (для тех, у кого дорогой трафик)\n\nНесколько лет в глухой деревне трудится, не покладая рук, этот неуловимый Джо сетевой промышленности. Выбор пал на него, благодаря поддержке единственно рабочего решения для данной местности, а именно CDMA 450 от местного оператора «Сотел» (аля SkyLink). В отличии от других роутеров/модемов для данного стандарта того времени он единственный позволил добиться устойчивой связи с помощью какой-то матери и направленной антенны. Но вот беда: сайт производителя (а возможно и он сам) исчез с горизонта этих наших интернетов в далёком 2011 году. Осталось лишь пафосное видео на YouTube и упоминания их продуктов у разномастных продавцов и операторов.",
        "link": "https://habr.com/ru/post/336942/"
    },
    {
        "title": "Абстракция сетевого слоя с применением «стратегий»",
        "body": "От всех моих предыдущих реализаций сетевого слоя осталось впечатление, что есть еще куда расти. Данная публикация ставит целью привести один из вариантов архитектурного решения по построению сетевого слоя приложения. Речь пойдет не об очередном способе использования очередного сетевого фреймворка.\nЧасть 1. Взгляд на существующие подходы\nДля начала из публикации 21 Amazing Open Source iOS Apps Written in Swift взято приложение Artsy. В нем используется популярный фреймворк Moya, на базе которого и построен весь сетевой слой. Отмечу ряд основных недостатков, которые встретил в данном проекте и часто встречаю в других приложениях и публикациях.",
        "link": "https://habr.com/ru/post/338380/"
    },
    {
        "title": "Интеллектуальная обработка текстов",
        "body": "Работы, связанные с естественным языком, — это одна из ключевых задач для создания искусственного интеллекта. Их сложность долгое время сильно недооценивали. Одной из причин для раннего оптимизма в области естественного языка были пионерские работы Ноама Хомского о порождающих грамматиках. В своей книге «Синтаксические структуры» и других работах Хомский предложил идею, которая сейчас кажется совершенно обычной, но тогда произвела революцию: он преобразовал предложение на естественном языке в дерево, которое показывает, в каких отношениях находятся разные слова в предложении.\n\nПример дерева синтаксического разбора показан на рисунке выше (а — синтаксический анализ на основе структуры непосредственных составляющих; б — на основе грамматики зависимостей). Порождающая грамматика — это набор правил вида S → NP V P или V P → V NP, которыми можно порождать такие деревья. На деревьях синтаксического разбора можно строить довольно строгие конструкции, пытаться определять, например, логику естественного языка, с настоящими аксиомами и правилами вывода.",
        "link": "https://habr.com/ru/company/piter/blog/351732/"
    },
    {
        "title": "Как работает JS: абстрактные синтаксические деревья, парсинг и его оптимизация",
        "body": "\n                        [Советуем почитать] Другие 19 частей цикла\n                        Часть 1: Обзор движка, механизмов времени выполнения, стека вызовов\nЧасть 2: О внутреннем устройстве V8 и оптимизации кода\nЧасть 3: Управление памятью, четыре вида утечек памяти и борьба с ними\nЧасть 4: Цикл событий, асинхронность и пять способов улучшения кода с помощью async / await\nЧасть 5: WebSocket и HTTP/2+SSE. Что выбрать?\nЧасть 6: Особенности и сфера применения WebAssembly\nЧасть 7: Веб-воркеры и пять сценариев их использования\nЧасть 8: Сервис-воркеры\nЧасть 9: Веб push-уведомления\nЧасть 10: Отслеживание изменений в DOM с помощью MutationObserver\nЧасть 11: Движки рендеринга веб-страниц и советы по оптимизации их производительности\nЧасть 12: Сетевая подсистема браузеров, оптимизация её производительности и безопасности\nЧасть 13: Анимация средствами CSS и JavaScript\nЧасть 14: Как работает JS: абстрактные синтаксические деревья, парсинг и его оптимизация\nЧасть 15: Как работает JS: классы и наследование, транспиляция в Babel и TypeScript\nЧасть 16: Как работает JS: системы хранения данных\nЧасть 17: Как работает JS: технология Shadow DOM и веб-компоненты\nЧасть 18: Как работает JS: WebRTC и механизмы P2P-коммуникаций\nЧасть 19: Как работает JS: пользовательские элементы\n                    \nВсе мы знаем о том, что JavaScript-код веб-проектов может разрастаться до прямо-таки огромных размеров. А чем больше размер кода — тем дольше браузер будет его загружать. Но проблема тут не только во времени передачи данных по сети. После того, как программа загрузится, её ещё надо распарсить, скомпилировать в байт-код, и, наконец, выполнить. Сегодня мы представляем вашему вниманию перевод 14 части серии материалов об экосистеме JavaScript. А именно, речь пойдёт о синтаксическом анализе JS-кода, о том, как строятся абстрактные синтаксические деревья, и о том, как программист может повлиять на эти процессы, добившись повышения скорости работы своих приложений.\n\n",
        "link": "https://habr.com/ru/company/ruvds/blog/415269/"
    },
    {
        "title": "Создание ИИ методом «глокой куздры». Интеллектуальная одиссея",
        "body": "Захотелось мне написать разговаривающую программу. Очень захотелось, позарез. \n\nКонечно, мне далеко до профессиональных программистов, и лингвистом я тоже не являюсь, но системное мышление имеется, и чувство языка на месте. Тем более что тематикой ИИ давно интересуюсь, даже пару-тройку постов накатал в свое время. Отчего не реализовать познания в программном коде? Ну и попробовал, насколько смог. \n\nЗнакомьтесь, Ваня Разумный.\n\n\nНиже находится описание проблем, возникших передо мной на этом хоженом-перехоженом пути, и способов их преодоления. \n\nПо поводу результата оговорюсь сразу: целью был не программный код, а формулировка принципов искусственного мышления, функционирующего НЕ на основе физической реальности, как биологические организмы, а на основе СИНТАКСИСА. Поклонники теста Тьюринга, нейронных сетей и машинного обучения могут не беспокоиться.\n\nВнимание, материал объемный.",
        "link": "https://habr.com/ru/post/420197/"
    },
    {
        "title": "Аналоговый индикатор загруженности компьютера",
        "body": "Встретил я как-то пост от ClusterM где он сделал виджет в виде старых индикаторов. Мне эта идея безумно понравилась так как есть приятное чувство винтажа в этом проекте. Но вот незадача — я никогда не работал с самим микроконтроллером и программирую я так себе, поэтому идею долго откладывал. Но недавно я натолкнулся на видео где Алекс доработал с помощью знакомых Open source программу и разработал алгоритм обработки данных со стороны Ардуино. В этой статье я хочу показать как я реализовал эту задачу.",
        "link": "https://habr.com/ru/post/429582/"
    },
    {
        "title": "Болтай, извлекай: архитектура сложных чат-ботов",
        "body": "Пользователи, пообщавшись с умными голосовыми ассистентами, ждут от чат-ботов интеллектуальности. Если вы разрабатываете бота для бизнеса, ожидания еще выше: заказчик хочет, чтобы юзер прошел по нужному, заранее прописанному сценарию, а юзер — чтобы робот толково и желательно человеческим языком ответил на поставленные вопросы, помог решить проблемы, а иногда просто поддержал светскую беседу.\n\n\nМы делаем англоязычные чат-боты, которые общаются с пользователями по разным каналам — Facebook Messenger, SMS, Amazon Alexa и веб. Наши боты заменяют службы поддержки, страховых агентов, и уметь просто поболтать. Каждая из этих задач требует своего подхода в разработке.\n\nВ этой статье мы расскажем, из каких модулей состоит наш сервис, как сделан каждый из них, какой подход мы выбрали и почему. Поделимся нашим опытом анализа разных инструментов: когда генеративные нейронные сети — не лучший выбор, почему вместо Doc2vec мы пользуемся Word2vec, в чем прелесть и ужас ChatScript и так далее.\n",
        "link": "https://habr.com/ru/post/429638/"
    },
    {
        "title": "Introduce Static Analysis in the Process, Don't Just Search for Bugs with It",
        "body": "This article is an authorized translation of the original post. The translation was made with the kind help of the guys from PVS-Studio. Thank you, guys!\n\nWhat encouraged me to write this article is considerable quantity of materials on static analysis, which recently has been increasingly coming up. Firstly, this is a blog of PVS-Studio, which actively promotes itself on Habr posting reviews of errors, found by their tool in open source projects. PVS-Studio has recently implemented Java support, and, of course, developers from IntelliJ IDEA, whose built-in analyzer is probably the most advanced for Java today, could not stay away. \n\nWhen reading these reviews, I get a feeling that we are talking about a magic elixir: click the button, and here it is — the list of defects right in front of your eyes. It seems that as analyzers get more advanced, more and more bugs will be found, and products, scanned by these robots, will become better and better without any effort on our part. \n\nWell, but there are no magic elixirs. I would like to talk about what is usually not spoken in posts like «here are things that our robot can find»: what analyzers are not able to do, what's their real part and place in the process of software delivery, and how to implement the analysis properly.\n\n\nRatchet (source: Wikipedia).",
        "link": "https://habr.com/ru/post/440610/"
    },
    {
        "title": "Приглашаем на неделю NLP в Яндекс",
        "body": "С 26 по 29 марта в Яндексе пройдёт неделя NLP, организованная совместно Школой анализа данных и Yandex.Research. Это четырёхдневный интенсив, рассчитанный на разработчиков и исследователей, хорошо знакомых с Natural Language Processing и глубинным обучением.\n\nЛекторы курса: Mirella Lapata, профессор Школы информатики университета Эдинбурга, и Wilker Aziz, доцент (assistant professor) Института логики, языка и вычислений университета Амстердама. Лекции будут читаться на английском языке в вечернее время. \n\n\n",
        "link": "https://habr.com/ru/company/yandex/blog/443456/"
    },
    {
        "title": "Чем искать уязвимости веб-приложений: сравниваем восемь популярных сканеров",
        "body": "Сканеры веб-приложений — довольно популярная сегодня категория софта. Есть платные сканеры, есть бесплатные. У каждого из них свой набор параметров и уязвимостей, возможных для обнаружения. Некоторые ограничиваются только теми, что публикуются в OWASP Top Ten (Open Web Application Security Project), некоторые идут в своем black-box тестировании гораздо дальше.\n\n\n\nВ этом посте мы собрали восемь популярных сканеров, рассмотрели их подробнее и попробовали в деле. В качестве тренировочных мишеней выбрали независимые точки на двух платформах (.NET и php): premium.pgabank.com и php.testsparker.com.",
        "link": "https://habr.com/ru/company/tomhunter/blog/456892/"
    },
    {
        "title": "Применение машинного обучения и Data Science в промышленности",
        "body": "Хабр, привет. Перевел пост, который идёт строго (!) в закладки и передаётся коллегам. Он со списком блокнотов и библиотек ML и Data Science для разных отраслей промышленности. Все коды на Python, и размещены на GitHub. Они будут полезны как для расширения кругозора, так и для запуска своего интересного стартапа.\n\n\n\nОтмечу, что если среди читателей есть желающие помочь, и добавить в любую из подотраслей подходящий проект, пожалуйста, свяжитесь со мной. Я их добавлю в список. Итак, давайте начнём изучение списка.",
        "link": "https://habr.com/ru/company/vk/blog/462769/"
    },
    {
        "title": "The story of how PVS-Studio found an error in the library used in… PVS-Studio",
        "body": "\nThis is a short story about how PVS-Studio helped us find an error in the source code of the library used in PVS-Studio. And it was not a theoretical error but an actual one — the error appeared in practice when using the library in the analyzer.",
        "link": "https://habr.com/ru/company/pvs-studio/blog/462947/"
    },
    {
        "title": "Анализ эмоциональной окраски отзывов с Кинопоиска",
        "body": "Вступление\nОбработка естественного языка (NLP) является популярной и важной областью машинного обучения. В данном хабре я опишу свой первый проект, связанный с анализом эмоциональной окраски кино отзывов, написанный на Python. Задача сентиментного анализа является довольно распространенной среди тех, кто желает освоить базовые концепции NLP, и может стать аналогом 'Hello world' в этой области. \n\nВ этой статье мы пройдем все основные этапы процесса Data Science: от создания собственного датасета, его обработки и извлечения признаков с помощью библиотеки NLTK и наконец обучения и настройки модели с помощью scikit-learn. Сама задача состоит в классификации отзывов на три класса: негативные, нейтральные и позитивные. \n",
        "link": "https://habr.com/ru/post/467081/"
    },
    {
        "title": "Трансформеры и ненависть в Ванкувере: как Антиплагиат ездил на NeurIPS-2019",
        "body": "В конце уже прошлого года в канадском городе Ванкувер прошла конференция NeurIPS-2019. Поиск по Хабру выдаёт семь упоминаний, среди которых нет ни одного отчёта или обзора — странный пробел, учитывая уровень и масштаб события в 2019 году. Мы в компании Антиплагиат решили заполнить этот пробел рассказом о впечатлениях двух нипсовых неофитов в мире haute couture data science.\n",
        "link": "https://habr.com/ru/company/antiplagiat/blog/485164/"
    },
    {
        "title": "IDA Pro и техники реверс-инжиниринга",
        "body": "0x00 start\n; {EN} entry point, do nothing, just run _main {EN}\nСтатья для начинающих “воинов тьмы”, тех, кто хочет погрузиться в темную сторону силы: реверс-инжиниринг. На нашем “операционном столе” будет небольшой кустарный сервер, который работает по протоколу TCP/IP. Для анализа протокола обмена данными нам поможет стандарт де-факто в области реверса — IDA Pro.\nСтатей по реверс-инжинирингу и по IDA Pro уже написано немало (хотя и не столько, как по PHP), но поскольку процесс реверса — исследовательский, то мысли, как с \"другого боку\" подойти к задаче обратной разработки, полезны новичкам. По крайней мере, как автор, я руководствовался тем, чтобы изложить основные практики и техники, о которых говорю в первые дни всем стажерам и на первых парах курса по реверс-инжинирингу в университете. \n\n                        Чего не будет в статье?\n                        Поиска уязвимостей и разработки эксплоитов для Google Chrome или Apple iPhone… Поэтому если вы исследователь со стажем и с большим количеством CVE на счету, маловероятно, что вы найдете для себя что-то новое. \n                    \n\n\"Once you start down the dark path, forever will it dominate your destiny\".",
        "link": "https://habr.com/ru/company/inforion/blog/493416/"
    },
    {
        "title": "Рубрика «Читаем статьи за вас». Май 2020. Часть 2",
        "body": "\n\nПривет, Хабр! Продолжаем публиковать рецензии на научные статьи от членов сообщества Open Data Science из канала #article_essense. Хотите получать их раньше всех — вступайте в сообщество!\nСтатьи на сегодня:\n\nECA-Net: Efficient Channel Attention for Deep Convolutional Neural Networks (China, 2020)\nTAPAS: Weakly Supervised Table Parsing via Pre-training (Google, 2020)\nDeepFaceLab: A simple, flexible and extensible faceswapping framework (2020)\nEnd-to-End Object Detection with Transformers (Facebook AI, 2020)\nLanguage Models are Few-Shot Learners (OpenAI, 2020)\nTabNet: Attentive Interpretable Tabular Learning (Google Cloud AI, 2020)\n",
        "link": "https://habr.com/ru/company/ods/blog/507880/"
    },
    {
        "title": "Front End Meetup от Facebook Developer Circle: Moscow",
        "body": "Второй год сообщество Facebook Developer Circle: Moscow активно развивается в области JavaScript и Front End разработки. И я рад вам сообщить, что скоро в сообществе будет проводиться очередной митап. Но этот митап будет не один, а три дня! Вы сможете посмотреть гораздо больше интересных докладов)Day 1 - 15 октября7:00pm - 7:45pm - DSL approach with JS component librariesAndrey Kobets / Head of Front-end Development at Yandex How to write modern frontend application using React/Vue/Angular/..., and1 Do it the way you like it, but not the way the library requires it.2 Use only the best solutions for your task.3 Not to fear major updates of dependencies.4 Not to rewrite project every time with a new extra fast/robust/flexible library.7:45pm - 8:30pm - Quo vadis, Frontend?Evgeny Kot / Director of Development at WrikeThere is no industry that is more rapidly developing than the frontend.  You can argue, but how many more ecosystems do you know where frameworks  are emerging at this rate? Web standards are being implemented and  immediately become obsolete. The most important question is: where are  we going, and where will we come to? The question is not rhetorical: how  not to stay out of business in this bubbling stream and capture only  the most important, what will be the trend in 2021.8:30pm - 9:15pm - Dive into effectorYan Lavryushev / Frontend DeveloperMental health issues is the main epidemic of the 21st century, could we reduce it a bit? I guess soDay 2 - 16 октября7:00pm - 7:45pm ",
        "link": "https://habr.com/ru/post/522346/"
    },
    {
        "title": "Наука это интересно. Science Club от MIL Team — новый формат работы над научными задачами",
        "body": "В начале этого года Machine Intelligence Team запустила программу для студентов и молодых ученых в области искусственного интеллекта — Science Club. Cегодня мы расскажем подробнее о программе, об участниках и задачах, в частности о темах и менторах в области обработки естественного языка от лаборатории нейронных систем и глубокого обучения МФТИ.\n\n",
        "link": "https://habr.com/ru/company/mipt/blog/531658/"
    },
    {
        "title": "Работа с адаптивным программируемым интерфейсом APIs во Flutter",
        "body": "Моя предыдущая статья Разборщик (Parsing Complex) JSON (JavaScript Object Notation) во Flutter получила много хороших отзывов от людей, которые начинают работать во Flutter. И одним из самых популярных, часто задаваемых вопросов (FAQ) от начинающих был: «Как сделать то же самое с API запросами?»Твоё желание исполнилось, мой друг.Давайте поработаем с простым API, который легко доступен без обязательной аутентификации.",
        "link": "https://habr.com/ru/company/otus/blog/542114/"
    },
    {
        "title": "Домашний DPI, или как бороться с провайдером его же методами",
        "body": "Долгое время я терпел ограничения РосКомНадзора и соответствующие действия провайдеров по различным ограничениям доступа к сайтам - но с определённого момента устал, и начал думать как бы сделать так, чтобы было и удобно, и быстро, и при этом с минимумом заморочек после настройки... Хочу оговориться, что цель анонимизации не ставилась.Вообще, эта проблема имеет несколько решений... Но я решил бороться с провайдером их же методом.",
        "link": "https://habr.com/ru/post/548110/"
    },
    {
        "title": "CSS, JavaScript и блокировка парсинга веб-страниц",
        "body": "Недавно мне попался материал, посвящённый проблеме загрузки CSS-файлов, которая замедляет обработку материалов страниц. Я читал ту статью, стремясь научиться чему-то новому, но мне показалось, что то, о чём там говорилось, не вполне соответствует истине. Поэтому я провёл собственное исследование этой темы и поэкспериментировал с загрузкой CSS и JavaScript.\n\n",
        "link": "https://habr.com/ru/company/ruvds/blog/560740/"
    },
    {
        "title": "AdvancedCharts — (не)тривиальный взгляд на анализ биржевых котировок",
        "body": "Привет, Хабр!Предлагаю вашему вниманию небольшую историю о том, как я решил посмотреть, как действия воротил рынка акций могут быть обнаружены по общедоступным тиковым данным, если изменить способ анализа рыночных данных, и что из этого вышло. Продукт получил рабочее название AdvancedCharts или кратко ACharts.",
        "link": "https://habr.com/ru/post/595047/"
    },
    {
        "title": "Использование Gatling. Разбираемся в тестировании HTTP",
        "body": "Всем привет! Это команда тестирования производительности Тинькофф, и мы продолжаем цикл статей о Gatling. В предыдущей статье мы рассмотрели базовые возможности инструмента Gatling, узнали, как быстро создать шаблон gatling-проекта, и познакомились с новыми функциями библиотеки gatling-picatinny. Сегодня расскажем, как при помощи этих инструментов создать проект для тестирования HTTP-протокола.",
        "link": "https://habr.com/ru/company/tinkoff/blog/658479/"
    },
    {
        "title": "CLD — Open source проект для ИТ компаний и SRE/DevOps инженеров",
        "body": "CLD это система для обеспечения комплексной информационной безопасности и организации разграничения доступа к серверам и скриптам с возможностью оперативно внедрять пользовательские модули и инструменты автоматизации.Мы высоко ценим автоматизацию процессов и унификацию инфраструктуры, проект призван объединить все используемые технологии в одном централизованном и само документируемом месте, с безопасным, прозрачным и логируемым доступом к любому серверу и инструменту сразу через несколько пользовательских интерфейсов (CLI, Web, API, Telegram, Discord, Mattermost, Slack). ",
        "link": "https://habr.com/ru/post/659023/"
    },
    {
        "title": "Tree-sitter: обзор инкрементального парсера",
        "body": "Некоторые IDE и текстовые редакторы парсят исходный файл целиком при каждом изменении, что может тормозить на больших файлах, а некоторые делают это построчно с помощью регулярных выражений, что тоже тормозит и не даёт качественной подсветки кода, т.к. теряется контекст. Для решения этих проблем в недрах GitHub был создан tree-sitter - инкрементальный парсер, который используют всё больше и больше проектов. Давайте разбираться зачем и почему.",
        "link": "https://habr.com/ru/post/670140/"
    },
    {
        "title": "Готовим статьи для Хабра: скрипт для подтягивания адресов картинок с habrastorage",
        "body": "\nПрограммист пишет интересную статью. Холст, масло, ruDALL-E.\nЧто самое сложное в написании статьи для Хабра? Конечно же сесть и начать писать! А потом вовремя остановиться. Ну а на третьем месте — во всяком случае для меня — стоит загрузка уже готовой статьи на Хабр. Про новый редактор я тактично промолчу, а старый в принципе весьма неплох: статью в markdown можно скопировать в него почти без изменений. Но вот с добавлением картинок есть пара нюансов.\nВо-первых, форматирование: markdown не поддерживает ширину-высоту-выравнивание картинок, поэтому если вам захочется красоты, то все теги придется переписать в html. А во-вторых, когда вы зальете картинки на Habrastorage (или в любое другое облако), адреса локальных картинок по всему тексту придется вручную перебивать на ссылки в облаке. Как-то вечером я дописывал статью с ~50 картинками, ужаснулся количеству предстоящей работы, и решил написать простенький скрипт для автоматизации всего этого.",
        "link": "https://habr.com/ru/post/674982/"
    },
    {
        "title": "Пишем свой Validation API для Spring Boot приложения",
        "body": "Добрый день, уважаемый читатель Хабра! Меня зовут Вартанян Артур и я работаю в компании Reksoft Java-разработчиком. В данной статье мы напишем свой собственный вариант реализации валидации для объектов и его полей, используя Java Reflection Api и Spring AOP.",
        "link": "https://habr.com/ru/company/reksoft/blog/675902/"
    },
    {
        "title": "Как работают браузеры. Часть 2: парсинг и выполнение JS",
        "body": "Примечание переводчиков: статья предназначена для начинающих разработчиков и интересующихся разработкой. Здесь нет глубоких технических деталей, хотя, возможно, вы найдете что-то новое для себя.В прошлой статье мы обсудили навигацию и получение данных. Сегодня поговорим о HTML- и CSS-парсинге и выполнении JavaScript.Содержание:1. HTML-парсинг:— Парсинг— Браузерные движки— Токенизация— Построение DOM— Предварительные загрузчики и ускорение страницы2. CSS-парсинг:— Токенизация и построение CSSOM3. Выполнение JavaScript:— Движки JavaScript— Компиляция— Интерпретация— Комплияция Just-In-Time— Как обрабатывается код JavaScript",
        "link": "https://habr.com/ru/company/kts/blog/678034/"
    },
    {
        "title": "Elixir: Готовим парсинг правильно — yecc и leex",
        "body": "\nЛексический анализ (токенизация) и парсинг — одни из наиболее важных концепцпий в информатике и программировании. Эти концепции базируются на огромном количестве теоретических знаний, но сегодня мы о них не будем говорить, потому что их действительно много. Кроме того, подход к парсингу через \"науку\" может вызвать жёсткое отвращение и напугать. Между тем, практическое применение очень простое и прямолинейное. Если хотите знать больше о теории — идите в Википедию (лексический анализ и парсинг), или читайте восхитительную книгу дракона (рекомендовано к прочтению вообще всем программистам).\nОбычный человек боится использовать лексеры и парсеры, а вместо них пишет велосипед на регулярных выражения. Мне кажется, что кажущаяся сложность является этому причиной. В этом посте я пострараюсь развенчать её!",
        "link": "https://habr.com/ru/post/309382/"
    },
    {
        "title": "Asterisk. Интеграция с amoCRM, step-by-step guide",
        "body": "В сети можно найти инструкции разной степени давности и полноты представленной информации по теме вынесенной в заголовок статьи, но даже собрав их все воедино, потребуются прямые руки, напильник и некоторое количество терпения для достижения желанного катарсиса.\n\n\n\nЗдесь я представлю свой опыт подключения Asterisk к amoCRM в виде пошаговой инструкции, осветив все необходимые нюансы, начиная от получения ssl-сертификата, настройки web-сервера и заканчивая демонстрацией работы получившейся связки.\n",
        "link": "https://habr.com/ru/post/325104/"
    },
    {
        "title": "Обходим запрет messages API Вконтакте через Python",
        "body": "Привет, Хабр. В своей предыдущей статье я рассказал о возможности доступа к методам раздела messages через документацию, для чего достаточно было лишь авторизоваться на сайте ВК. Многие тогда заявили, что это не является угрозой личным данным пользователей, а невозможность выкачать свои сообщения — недостаток платформы. Также в комментариях мне оставили ссылку на node.js библиотеку, которая может авторизовываться по логину/паролю и предоставлять доступ к API сообщений, притворяясь официальным приложением.\nДисклеймер:\nСтатья и весь написанный код создавались только в образовательных и исследовательских целях и никогда не использовались для незаконной деятельности. Автор не призывает вас повторять какие либо описанные здесь действия и не несёт за них никакой ответственности.\n\nНо не все люди знакомы c javascript и node.js, поэтому я и решил написать свою библиотеку на python, которым сейчас пользуются многие, позволяющую через «тестовые запросы» документации предоставить полный функционал messages API. Сразу прошу не злиться на меня в местах, где я буду повторять аспекты прошлого «выступления», потому что я хочу оформить эту статью в виде независимой документации.",
        "link": "https://habr.com/ru/post/491554/"
    },
    {
        "title": "Эволюция игрового фреймворка. Клиент 3. Слои логики",
        "body": "Прежде мы рассмотрели отделение логики отображения от графики, а также разные вспомогательные классы и менеджеры. Все вместе они образуют каркас наших приложений и были вынесены в отдельную библиотеку — Core Framework. Осталось еще разработать методику по написанию остальной логики. В нее входит бизнес-логики и правила игры, данные и их обработка, а также взаимодействие с сервером.Вся логика будет разбита на слои. Основной смысл слоев тот, что классы одного слоя максимально независимы от классов с соседних слоев и абсолютно независимы от остальных. Все это уже относится не к основному фреймворку (Core Framework), а к фреймворкам для разных групп жанров (Base Game Frameworks) и для каждого отдельного жанра (Game Frameworks).",
        "link": "https://habr.com/ru/post/677854/"
    },
    {
        "title": "Ищем-ищем нужное…",
        "body": "\nИсточник\n\nПериодически у каждого возникает такая задача, когда необходимо произвести поиск в какой-либо директории, прямо внутри содержащихся там файлов, и найти нужные файлы по ключевым словам. Именно об этом мы и поговорим в этой статье.",
        "link": "https://habr.com/ru/company/first/blog/680220/"
    },
    {
        "title": "Java DNS API, Wikipedia и twitter-марафон в одном флаконе",
        "body": "Некоторое время назад я решал задачу автоматической покупки домена. Нужно было оформить в виде библиотеки (jar и файл настроек), которая использовалась бы в корпоративном приложении на Java. Я начал поиски DNS провайдеров с public API. Желательно, чтобы API были попроще, и домены подешевле — такой баланс оказалось не просто найти. ",
        "link": "https://habr.com/ru/post/137721/"
    },
    {
        "title": "Сравнение эффективности минимизаторов CSS- и JavaScript-кода (Сентябрь 2013)",
        "body": "\n\nЗа прошедшие, с момента публикации предыдущего обзора, 3 месяца уже успели обновиться почти все рассмотренные алгоритмы минимизации (кроме, Packer`а). Кроме того в Bundle Transformer появился новый модуль-минимизатор на базе Clean-css — BundleTransformer.CleanCss.\n\nПри подготовке данного сравнительного обзора были учтены следующие пожелания читателей:\n\nВ предыдущем обзоре в качестве исходных файлов использовались: bootstrap.css и bootstrap.js из Twitter Bootstrap 2.3.2, из-за чего достоверность результатов была низкой. В новом же обзоре размер выборки был увеличен: для сравнения были отобраны 7 JS-файлов и 5 CSS-файлов из 10 популярных Open Source-проектов.\nТеперь в сравнении минимизаторов CSS-кода также участвуют встроенные средства минимизации препроцессоров LESS и Sass.\nКак известно, Bundle Transformer минимизирует каждый файл по отдельности и затем производит объединение минимизированного кода в один файл. Данный механизм сделан для того, чтобы предотвратить повторную минимизацию предварительно минимизированных файлов. Другие аналогичные библиотеки сначала объединяют код файлов, а затем минимизируют этот объединенный файл. Поэтому для полноты картины мы произведем 2 сравнения: сначала сравним эффективность минимизаторов на файлах, полученных путем объединения минимизированного кода, а затем на файлах, полученных путем минимизации объединенного кода файлов.\n\nКак и в предыдущем обзоре, для минимизации файлов мы будем использовать модули Bundle Transformer, а для измерения размеров полученных файлов – расширение YSlow.\n",
        "link": "https://habr.com/ru/post/193556/"
    },
    {
        "title": "Патчим EDID телевизора из-под Linux",
        "body": "Мой телевизор («старая» модель LG 32LG5000) никогда не работал в Linux. Каждый раз, когда я подключал его через HDMI-порт, ядро сообщало мне ошибку:\nkernel: [  869.677850] [drm:drm_edid_block_valid] *ERROR* EDI  has major version 2, instead of 1\nи полностью игнорировало его.\n\nЭта проблема меня не сильно-то и беспокоила, т.к. я не часто им пользовался, да и VGA-порт работал, хоть и с максимальным разрешением 1360×768. Однако сегодня, когда я решил посмотреть фильм, качество вывода через VGA было невероятно хреновым, и я решил с этим покончить.\n\nАнализируем EDID\nДля тех, кто не знает, EDID — небольшое количество данных, содержащих в себе информацию о возможностях монитора, в основном разрешения и тайминги, которые он поддерживает. Сообщение об ошибке интересно тем, что в нем говорится об EDID 2.0, которого (почти) никогда не существовало. Вот что нам говорит Wikipedia:\nСтруктура EDID имеет версии от v1.0 до v1.4 размером в 128 байт, каждая последующая версия обратно совместима с предыдущей. Структура EDID v2.0 была размером 256 байт, однако позже была объявлена устаревшей и на замену ей пришла v1.3.\nПохоже, EDID 2.0 был объявлен устаревшим где-то в 2000. Довольно забавно, что ТВ 2008 года использовал именно эту версию.",
        "link": "https://habr.com/ru/post/217583/"
    },
    {
        "title": "Scala: parser combinators на примере парсера формул",
        "body": "Время от времени у меня возникает желание придумать свой собственный маленький язык программирования и написать интерпретатор. В этот раз я начал писать на scala, узнал про библиотеку parser combinators, и был поражён: оказывается, можно писать парсеры легко и просто. Чтобы не превращать статью в пособие по \"рисованию совы\", ниже приведёна реализация разбора и вычисления выражений типа \"1 + 2 * sin(pi / 2)\".\nСам парсинг и вычисление выражения занимают всего лишь 44 непустых строчки — не то чтобы я сильно стремился сократить их количество, но выглядит это реально просто и лаконично. Проект на github.\nДля сравнения:\n\nдлинный пример на java\nкороткий, но непонятный пример на C#\nпример на java с использованием parboiled\n\nИтак, если вам не терпится увидеть результат:\nОтветственный за парсинг кусочек кодаobject FormulaParser extends RegexParsers with PackratParsers {\n\n    def id: Parser[Id] = \"[a-zA-Z][a-zA-Z0-9_]*\".r ^^ Id\n\n    def number: Parser[Number] = \"-\" ~> number ^^ (n => Number(-n.value)) |\n        (\"[0-9]+\\\\.[0-9]*\".r | \"[0-9]+\".r) ^^ (s => Number(s.toDouble))\n\n    def funcCall: Parser[FuncCall] = id ~ (\"(\" ~> expression <~ \")\") ^^ {case id ~ exp => FuncCall(id, exp)}\n\n    def value: Parser[Expression] = number | funcCall | id | (\"(\" ~> expression <~ \")\")\n\n    lazy val term: PackratParser[Expression] = term ~ (\"*\" | \"/\") ~ value ^^ binOperation | value\n\n    lazy val expression: PackratParser[Expression] = expression ~ (\"+\" | \"-\") ~ term ^^ binOperation | term\n    ...\n}\nПосмотрите на следущую строчку:\ndef value: Parser[Expression] = number | funcCall | id | (\"(\" ~> expression <~ \")\")\nОна подозрительно похожа на описание грамматики, но это валидный код, в котором среда разработки может сразу же обнаружить и подсветить большинство ошибок.\nЭто возможно по следующим причинам:\n\nВ scala разрешено давать методам замечательные названия типа \"~\", \"~>\", \"<~\", \"|\", \"^^\". Комбинация парсеров p и q записывается как p~q, а возможность выбрать один из них: p|q. Читается намного лучше, чем p.andThen(q) или p.or(q)\nБлагодаря неявным преобразованиям (implicits) и строчка \"abc\" и регулярное выражение \"[0-9]+\".r при необходимости превращаются в парсеры.\nВ языке мощная статическая система типов, которая позволяет ловить ошибки сразу.\n\nДумаю, мне удалось Вас заинтересовать, поэтому дальше всё будет по порядку.\n",
        "link": "https://habr.com/ru/post/325446/"
    },
    {
        "title": "“Maybe” monad through async/await in C# (No Tasks!)",
        "body": "\nGeneralized async return types — it is a new C#7 feature that allows using not only Task as a return type of async methods but also other types (classes or structures) that satisfy some specific requirements.\nAt the same time, async/await is a way to call a set of \"continuation\" functions inside some context which is an essence of another design pattern — Monad. So, can we use async/await to write a code which will behave in the same way like if we used monads? It turns out that — yes (with some reservations). For example, the code below is compilable and working:\nasync Task Main()\n{\n  foreach (var s in new[] { \"1,2\", \"3,7,1\", null, \"1\" })\n  {\n      var res = await Sum(s).GetMaybeResult();\n      Console.WriteLine(res.IsNothing ? \"Nothing\" : res.GetValue().ToString());\n  }\n  // 3, 11, Nothing, Nothing\n}\n\nasync Maybe<int> Sum(string input)\n{\n    var args = await Split(input);//No result checking\n    var result = 0;\n    foreach (var arg in args)\n        result += await Parse(arg);//No result checking\n    return result;\n}\n\nMaybe<string[]> Split(string str)\n{\n  var parts = str?.Split(',').Where(s=>!string.IsNullOrWhiteSpace(s)).ToArray();\n  return parts == null || parts.Length < 2 ? Maybe<string[]>.Nothing() : parts;\n}\n\nMaybe<int> Parse(string str)\n    => int.TryParse(str, out var result) ? result : Maybe<int>.Nothing();\nFurther, I will explain how the code works...",
        "link": "https://habr.com/ru/post/458692/"
    },
    {
        "title": "Коммиты — это снимки, а не различия",
        "body": "Git имеет репутацию запутывающего инструмента. Пользователи натыкаются на терминологию и формулировки, которые вводят в заблуждение. Это более всего проявляется в \"перезаписывающих\" историю командах, таких как git cherry-pick или git rebase. По моему опыту, первопричина путаницы — интерпретация коммитов как различий, которые можно перетасовать. Однако коммиты — это не различия, а снимки! Я считаю, что Git станет понятным, если поднять занавес и посмотреть, как он хранит данные репозитория. Изучив модель хранения данных мы посмотрим, как новый взгляд помогает понять команды, такие как git cherry-pick и git rebase. ",
        "link": "https://habr.com/ru/company/skillfactory/blog/551848/"
    },
    {
        "title": "Скрипт уведомлений и исполнения команд через Телеграмм для РоутерОС Микротик",
        "body": "Мессенджер Телеграмм полагаю представлять не нужно. В сравнении с другими существующими мессенджерами, Телеграмм выгодно отличается тем, что позволяет создавать боты, которые могут участвовать в чатах. Это удобно во многих случаях, в том числе для разработчиков программного обеспечения и продвинутых пользователей.\n\nПрименительно к работе с роутерами Микротик, Телеграмм удобен тем, что в чат-бот можно организовать пересылку сообщения от роутера, а пользуясь возможностями парсинга чата через API Telegram, пересылать исполняемые команды.\n\nКак создать свой бот, чат и «прикрутить» к ним Микротик можно прочитать например здесь или здесь.\n\nЗа время появления Телеграмм был создан далеко не один скрипт по уведомлению о событиях роутера Микротик, в том числе как зарубежными так и отечественными пользователями энтузиастами. Например, здесь или в этой теме на русскоязычном форуме Микротик.\n\nМы объединили накопленные за это время идеи и код в единый скрипт под названием TLGRM, который хотим представить здесь.",
        "link": "https://habr.com/ru/post/650563/"
    },
    {
        "title": "H#, Создаём свой язык программирования",
        "body": "\nДоброго времени суток. \nВ этой статье я хочу сделать обзор одного из главных нововведений в Visual Studio 2010, а именно — функционального языка программирования F#.\n\nРассматривать синтаксис и потенциал F# мы будем на примере создания своего собственного интерпретатора для придуманного нами языка программирования (Ведь рассказвать о чем-то всегда интереснее на примерах).\n",
        "link": "https://habr.com/ru/post/97861/"
    },
    {
        "title": "Объясняем бабушке, как написать свой язык программирования",
        "body": "Это игровая площадка, где я попытаюсь объяснить, как создать малюсенький язык программирования (Mu). Можно посмотреть вживую на открытые исходники здесь или скачать тут. Туториал можете прочитать прямо сейчас.\n\n\n\nПишем свой язык программирования (на Swift)\nДля того, чтобы написать свой язык программирования, необязательно иметь степень в Computer Science, достаточно понимать 3 базовых шага.\n\nЯзык: Mu(μ)\nMu — это минимальный язык, который содержит постфиксный оператор, бинарную операцию и «одноциферные» числа.\n\nПример: (s 2 4) or (s (s 4 5) 4) or (s (s 4 5) (s 3 2))…\n",
        "link": "https://habr.com/ru/company/edison/blog/315068/"
    },
    {
        "title": "Форматирование чисел в Java: DecimalFormat",
        "body": "Всем привет! Что ж, курс «Разработчик Java» в своём новом формате вполне себе стартует сегодня, мы готовим теперь к следующему запуску новый формат полезностей, которые будут делиться на разные уровни и дорабатываться под разные запросы. А пока глянем на то что у нас осталось из наших запасов и посмотрим на использование DecimalFormat для контроля представления чисел\n\nПоехали.\n\nВесь код, предоставленный ниже, показывает, что инстансы, которые возвращает “getInstance” NumberFormat, на самом деле являются инстансами DecimalFormat. От аналогичных инстансов класса DecimalFormat их отличают настройки атрибутов, например, минимум/максимум целых значений (слева от десятичной точки) и минимум/максимум дробных значений (справа от десятичной точки). Все они имеют одинаковый режим округления и настройки валют.\n\n",
        "link": "https://habr.com/ru/company/otus/blog/415521/"
    },
    {
        "title": "Google's Certificate Transparency как источник данных для предотвращения атак",
        "body": "Мы подготовили перевод статьи Райана Сирса об обработке логов Google’s Certificate Transparency, состоящей из двух частей. В первой части дается общее представление о структуре логов и приводится пример кода на Python для парсинга записей из этих логов. Вторая часть посвящена получению всех сертификатов из доступных логов и настройке системы Google BigQuery для хранения и организации поиска по полученным данным.С момента написания оригинала прошло уже три года и с тех пор количество доступных логов и, соответственно, записей в них возросло многократно. Тем более важно правильно подойти к обработке логов, если целью является максимизация количества получаемых данных.",
        "link": "https://habr.com/ru/company/acribia/blog/536944/"
    },
    {
        "title": "Захват видео с сетевых камер, часть 1",
        "body": " Сетевые видеокамеры постепенно вытесняют аналоговые, хоть и стоят они сейчас гораздо дороже. Сетевые обладают рядом очевидных приемуществ:\n\nнет необходимости в отдельном регистраторе или плате захвата;\nпомехоустойчивость;\nпростая интеграция в существующую сеть;\nнет ограничения по расстоянию;\nналичие камер высокого разрешения;\nпросмотр камеры прямо с самой камеры по http;\nналичие всевозможных настроек;\nи др.\n\nНас интересует способ получения изображений с таких камер, для этого надо знать а как вообще они их передают? На наше счастье камеры используют существующие стандарты, а не то, что взбредёт в голову китайскому разработчику. Подавляющее большинство камер используют один или несколько способов передачи видео, это в основном Motion JPEG по HTTP, Motion JPEG по RTSP или H264 по RTSP. Также многие камеры могут передавать звук, но он нас не интересует сейчас.\n\nВ этой статье я рассмотрю эти способы передачи изображений с сетевых камер, а также приведу пример захвата таких изображений всё на том же Python'е.\n",
        "link": "https://habr.com/ru/post/115808/"
    },
    {
        "title": "Портрет Хабра-tutorial",
        "body": "В наш век только бесполезные вещи и необходимы человеку. Оскар Уайльд, Портрет Дориана Грея (источник) \nА вы никогда не задумывались, чем обычный пост на хабре (порошок обычныйTM) отличается от tutorial? И как это «отличается» вообще можно измерить? Есть ли здесь какие-то закономерности и можно ли по ним предсказать метку: \n\nВ данной статье мы обсудим так называемый exploratory data analysis или кратко EDA (исследовательский анализ данных) применительно к статьям Хабрахабра, а в частности уделим особое внимание tutorial. Прежде всего EDA направлен на детальное изучение данных, и необходим для понимания, с чем мы собственно работаем. Важной частью является сбор и очистка данных и сам выбор какие данные собирать. Особенность метода состоит в визуализации и поиске важных характеристик и тенденций.\n\nExploratory data analysis — это первый шаг в изучении и понимании данных, без него мы можем загнать себя в многочисленные ловушки, описанные ранее автором в статье: \"Как правильно лгать с помощью статистики\".\n\nКак выглядит обычный хабра-tutorial\nВ качестве простой демонстрации рассмотрим простейшую картину из трех параметров: просмотры, избранное (favourites) и рейтинг (количество плюсов), для трех классов: все статьи вместе, обычный пост (не-tutorial) и tutorial. \n\nДаже в столь упрощенной картине, заметна разница между классами. Наша интуиция и здравый смысл подсказывают нам, что tutorial в среднем чаще добавляют в избранное, но интуиция не говорит насколько чаще, и что они набирают меньше плюсов и просмотров. Эти и многие другие интересные вопросы мы рассмотрим далее в статье.\n\nСтруктура статьи\n\nКак выглядит обычный хабра-tutorial\nСобираем данные\nХабра-данные\nИсследуем tutorials\nРазбираем интересные примеры\nПредсказываем метку tutorial\nКак сделать набор данных лучше\nЗаключение\nДальнейшее чтение\n\n",
        "link": "https://habr.com/ru/company/dmlabs/blog/218607/"
    },
    {
        "title": "Уровень сигнала трансивера через SNMP в Cisco",
        "body": "Иногда нужно узнать уровень сигнала в трансивере. Причины бывают разные: внезапное падение канала связи, подключение новых оптических кроссировок, мониторинг. Инженер с необходимым уровнем доступа решает этот вопрос меньше чем за одну минуту с помощью команды:\n\n#show interfaces Te1/49 transceiver\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n                                 Optical   Optical\n           Temperature  Voltage  Tx Power  Rx Power\nPort       (Celsius)    (Volts)  (dBm)     (dBm)\n---------  -----------  -------  --------  --------\nTe1/49       53.3       3.25      -4.3      -2.8\n\nКому-то (у кого нет соответствующего доступа) приходится ждать этой минуты целую вечность. Например, когда канал упал в пиковые часы и на резервном линке какие-то потери, которые обнаружились только при загрузке линка трафиком. Или когда новый канал нужно было сдать вчера, а ничего не работает, потому что поставщик неправильно подписал оптику на CWDM-мультиплексоре, и требуется методом тыка отыскать «правильную волну». И все это происходит в условиях дефицита верховных сетевых инженеров и времени.\n\nВ статье рассматривается вариант того, как проверить сигнал, имея лишь read-only доступ по SNMP.",
        "link": "https://habr.com/ru/post/260721/"
    },
    {
        "title": "Intel Edison, Windows Phone и Microsoft Azure: облачный союз пульта и светодиода",
        "body": "Возможности современных технологий ярче всего проявляются при их совместном использовании. Например, что можно сделать, если объединить Intel Edison, Microsoft Azure и Windows Phone? На самом деле, много всего. Здесь мы рассмотрим один из вариантов – дистанционное включение и выключение светодиода, присоединённого к одному из цифровых выходов Edison с коммутационной платой Arduino.\n\n\n",
        "link": "https://habr.com/ru/company/intel/blog/304506/"
    },
    {
        "title": "Just take a look at SObjectizer if you want to use Actors or CSP in your C++ project",
        "body": "\nA few words about SObjectizer and its history\nSObjectizer is a rather small C++ framework that simplifies the development of multithreaded applications. SObjectizer allows a developer to use approaches from Actor, Publish-Subscribe and Communicating Sequential Processes (CSP) models. It's an OpenSource project that is distributed under BSD-3-CLAUSE license.\nSObjectizer has a long history. SObjectizer itself was born in 2002 as SObjectizer-4 project. But it was based on ideas from previous SCADA Objectizer that was developed between 1995 and 2000. SObjectizer-4 was open-sourced in 2006, but its evolution was stopped soon after that. A new version of SObjectizer with the name SObjectizer-5 was started in 2010 and was open-sourced in 2013. The evolution of SObjectizer-5 is still in progress and SObjectizer-5 has incorporated many new features since 2013.\nSObjectizer is more or less known in the Russian segment of the Internet, but almost unknown outside of the exUSSR. It's because the SObjectizer was mainly used for local projects in exUSSR-countries and many articles, presentations, and talks about SObjectizer are in Russian.\nA niche for SObjectizer and similar tools\nMultithreading is used in Parallel computing as well as in Concurrent computing. But there is a big difference between Parallel and Concurrent computing. And, as a consequence, there are tools targeted Parallel computing, and there are tools for Concurrent computing, and they are different.",
        "link": "https://habr.com/ru/post/458202/"
    },
    {
        "title": "Маршалинг и анмаршалинг нестандартных форматов дат в Go",
        "body": "Думаю, многие согласятся, что работа с датами практически в любом языке программирования это невероятная головная боль. Дата и время не десятичны, часовые пояса — господи, почему они не могут быть просто целыми — ну и конечно бесчисленное множество форматов даты и времени. Можно, конечно, возразить, что мол есть ISO 8601 и чего тебе дураку ещё надо, но давайте, положа руку на сердце, скажем — как часто вам доводилось сталкиваться с соблюдением этого стандарта в сторонних API? Не знаю, как с этим обстоят дела за рубежом, надеюсь, в комментариях мне подскажут, но на постсоветских просторах ситуация — обнять и плакать. Каждый использует свой собственный, только ему удобный, формат времени и даты и разбирайся с этим как хочешь.\nЯ расскажу про собственный опыт и про найденное решение.",
        "link": "https://habr.com/ru/post/492996/"
    },
    {
        "title": "Tree — единый AST чтобы править всеми",
        "body": "Здравствуйте, меня зовут Дмитрий Карловский и я… рассекаю на велосипедах… по бездорожью… против ветра… в гору… на лыжах. И сегодня я приглашаю вас прокатиться со мной вдоль и поперёк текстовых форматов данных и вместе спроектировать идеальный формат.\nЯ уже рассказывал о нём 5 лет назад, что привело к жарким дебатам, повлёкшим за собой небольшие изменения синтаксиса. Поэтому позвольте рассказать с чистого листа что он представляет из себя на текущий момент.\nСпикер \\Дмитрий Карловский\nМесто \\PiterJS #47\nВремя 2020-05-20\nЭто — расширенная текстовая версия одноимённого выступления на PiterJS#47. Вы можете читать её как статью, либо открыть в интерфейсе проведения презентаций, либо посмотреть видео.",
        "link": "https://habr.com/ru/post/503240/"
    },
    {
        "title": "Кастомная (де) сериализация даты и времени в Spring",
        "body": "Представьте довольно распространённую ситуацию: ваше приложение взаимодействует с клиентами, которые находятся в разных часовых поясах. Вам часто приходится работать с датами, а для корректной работы системы, они передаются с указанием часового пояса отправителя. При этом, вам нужно:1)      При получении запроса привести дату к серверному времени и сохранить в базу данных в таком виде2)      В ответ возвращать дату и время с указанием серверного часового поясаЧтобы избавиться от лишних вызовов методов для преобразования даты, Spring предоставляет удобный механизм для написания кастомной сериализации и десериализации.",
        "link": "https://habr.com/ru/post/543992/"
    },
    {
        "title": "Простой RSS-клиент на Android",
        "body": "Пошаговое руководство по созданию RSS-клиента на Android. Статья для начинающих разработчиков.\nAndroid – операционная система для мобильных устройств от Google.\nСистема очень перспективная и динамично развивается. Базовые навыки разработки будут совсем не лишними.\nОсторожно много скриншотов!\n",
        "link": "https://habr.com/ru/post/98704/"
    },
    {
        "title": "SNMP MIBs и как их готовить",
        "body": "Доброго времени суток, читатель.\n\nПредыстория\nЯ 5 лет работаю в компании, предоставляющей широкополосный доступ к всемирной паутине. Занимаюсь непосредственным управлением оборудованием, а также планированием и мониторингом сети. На момент моего прихода в сети было немногим больше 100 единиц управляемого оборудования вендоров Cisco и D-Link. Рисовали карту сети по старинке в visio, ip-адреса вели там же, но мой руководитель в то время начал писать некоторый софт для инвентаризации оборудования — началось все с учета выданных ip-адресов. Учитывая рост сети (а точнее модернизация в лице замены глупых «мыльниц» на «управляки»), мы и решили, что обычного Cacti нам не хватает. Стандартные счетчики по SNMP мы собирали сразу, но найти что-то более нужное и интересное было трудно. Неоднократные попытки овладеть другими опциями не приводили к конечному результату, но не так давно удалось «обуздать» MIB-файлы для коммутаторов D-Link и считаю, что данная статья ускорит процесс изучения коммутаторов и протокола SNMP. Это позволит быстрее и качественнее управлять сетью.\n\n",
        "link": "https://habr.com/ru/post/206612/"
    },
    {
        "title": "«Dense_rank()» vs «Max()» или расследование с неожиданным концом",
        "body": "Здравствуйте, коллеги.\nВ этой статье я расскажу о своих изысканиях в вопросе: «А что же лучше: dense_rank() или max()» и, конечно, почему эти изыскания завершились с неожиданным, по крайней мере для меня, результатом.\n",
        "link": "https://habr.com/ru/post/220455/"
    },
    {
        "title": "Measurement Protocol — просто о несложном",
        "body": "На днях Universal Analytics вышел из статуса беты и теперь становится основной версией Google Analytics. Это событие позволяет использовать его без ряда ограничений, существовавших ранее. Новая версия несет также ряд новых возможностей для отслеживания посетителей сайта и дает возможность сопоставить действия пользователя на сайте и последующее совершение целевых действие в оффлайне.",
        "link": "https://habr.com/ru/post/222169/"
    },
    {
        "title": "JavaScript для… настольного IP телефона?",
        "body": "\n\nНемногим известно, что IP телефоны Digium — это не совсем обычные телефоны. Казалось бы зачем производителю выпускать аппараты собственной марки на таком насыщенном и низкомаржинальном рынке? Но поверьте — оно того стоило. Помимо отличных физических характеристик: приятный пластик, яркий экран, отличные динамики и микрофон. Эти аппараты обладают своим API и вы можете написать свое приложение под них!\n\nКто другой может похвастаться таким функционалом?\n\n",
        "link": "https://habr.com/ru/post/230927/"
    },
    {
        "title": "Обновление React компонентов с сохранением состояния в режиме реального времени для Browserify",
        "body": "\n\nВсем доброго времени суток!\nДавайте немного поговорим о DX (Developer Experience) или «Опыте разработки», а если конкретнее — об обновлении кода в режиме реального времени с сохранением состояния системы. Если тема для вас в новинку, то перед прочтением советую ознакомиться со следующими видео:\n\nРяд видео с обновлением кода в реальном времени без перезагрузки страницы\n\n\n\nВведение: Как это работает?\nПрежде всего стоит понимать, что реализация подобной функциональности подразумевает под собой решение ряда задач:\n — Отслеживание изменений файлов\n — Вычисление патча на основании изменений файлов\n — Транспортировка патча на клиент (в браузер, например)\n — Обработка и применение патча к существующему коду\nНо обо всём по порядку.\n",
        "link": "https://habr.com/ru/post/264175/"
    },
    {
        "title": "FP на Scala: Что такое функтор?",
        "body": "Специалист, приступающий к изучению функционального программирования, сталкивается как с неоднозначностью и запутанностью терминологии, так и с постоянными ссылками на «серьезную математику».\n\nВ этой статье, не используя теорию категорий с одной стороны и эзотерические языковые механизмы Scala с другой стороны, рассмотрены два важнейших понятия\n\nко-вариантный функтор\nконтра-вариантный функтор\n которые являются стартовой точкой для понимания всего множества категориальных конструкций, куда можно включить \n\nExponential (Invariant) Functor, BiFunctor, ProFunctor\nApplicative Functor, Arrow, Monad / Co-Monad\nMonad Transformers, Kleisli, Natural Transformations\n\nОбъяснено происхождение категориальной терминологии, указана роль языковых механизмов в реализации категориальных абстракций и рассмотрено несколько ковариантных (Option, Try, Future, List, Parser) и контравариантных (Ordering, Equiv) функторов из стандартной библиотеки Scala. \n\nПервая статья в «категориальной серии»:\n\nFP на Scala: что такое функтор?\nFP на Scala: Invariant Functor\n\nЕсли Вы желаете сильнее погрузиться в мир Scala, математики и функционального программирования — попробуйте онлайн-курс «Scala for Java Developers» (видео + тесты, всего за 25% цены!).\n\n\nПро языковые механизмы абстракции\nПро теорию категорий и Haskell\nЧто такое ковариантный функтор\nПримеры ковариантных функторов\nКовариантный функтор: Identity Law\nКовариантный функтор: Composition Law\nКовариантный функтор: используем для оптимизации\nЧто такое контравариантный функтор\nПримеры контравариантных функторов\nКонтравариантный функтор: Identity Law\nКонтравариантный функтор: Composition Law\nЧто дальше?\n\n",
        "link": "https://habr.com/ru/company/golovachcourses/blog/266905/"
    },
    {
        "title": "Параллельный парсинг большого количества HTML-страниц с помощью Apache Ignite (GridGain) в 200 строк кода",
        "body": "Периодически у меня появляются задачи обработать большое количество файлов. Обычно это конвертирование из одного формата в другой: XSLT-трансформация, парсинг, конвертация картинок или видео. Для решения этих проблем я приспособил фреймворк GridGain In-Memory Data Fabric. Он дает возможность делать distributed computing, MapReduce, распределенные кэши и очереди, распределенную файловую систему в памяти, перемещение кода к данным, job stealing, ускорители для Hadoop и многие другие модные ныне вещи. И все это легко и под разные операционки. Вы легко можете все это пощупать под виндовс.\n\nПопробую рассказать о своем опыте использования на примере простенькой задачи.\n",
        "link": "https://habr.com/ru/post/271475/"
    },
    {
        "title": "Modest — разработка открытого движка HTML рендера на «голом» Си",
        "body": "Всем привет! Меня зовут Александр Борисов и я разрабатываю Modest — открытый движок HTML-рендера на «голом» Си без использования внешних зависимостей (далее движок). Сразу хочется пояснить, что значит «без внешних зависимостей» — весь код пишется с нуля, код нигде не заимствован.\n\nПосле моей последней публикации прошло немало времени. За это время многое изменилось и я хочу поделиться с вами достижениями в разработке.\n",
        "link": "https://habr.com/ru/post/309756/"
    },
    {
        "title": "Использование Reflection.Emit для предварительной компиляции выражений в MSIL",
        "body": "Привет, Хабр! Представляю вашему вниманию перевод статьи \"Using Reflection.Emit to Precompile Expressions to MSIL\" автора Steve Marsh.\n\nВведение\n Классы в этом проекте позволяют анализировать текстовые выражения, введенные пользователем, и компилировать их на сборку .NET. Эта сборка может выполняться «на лету» или сохраняться в DLL. Предварительная компиляция выражений позволяет обеспечить высокий уровень переносимости и позволяет очень эффективно оценивать введенную пользователем логику. Кроме того, мы можем использовать средство ildasm.exe от Microsoft для открытия и проверки создаваемого базового кода MSIL. Есть много интересных функций, которые поставляются с платформой .NET, на мой взгляд пространство имен Reflection.Emit предлагает куда больше, чем вы сможете найти. Пространство имен Reflection.Emit позволяет создавать собственный код .NET во время выполнения, динамически создавая типы .NET и вставляя инструкции MSIL в тело. MSIL — промежуточный язык Microsoft для платформы .NET. IL — это то, во что ваш код C # и VB.NET компилируется и отправляется в JIT-компилятор при запуске .NET-программ. MSIL — очень низкоуровневый язык, который очень быстрый, и работа с ним дает вам исключительный контроль над вашими программами. Я не буду вдаваться в подробности о MSIL в этой статье, но есть несколько других ресурсов, доступных в Интернете, и если вам интересно узнать побольше, я включил некоторые ссылки в конце этой статьи.\n",
        "link": "https://habr.com/ru/post/351498/"
    },
    {
        "title": "Быстрый расчет формул из Excel на C#",
        "body": "Как часто вы слышите от заказчиков, что они пришлют данные в Excel или просят вас сделать импорт или выгрузку в Excel-совместимом формате? Я уверен, что в большинстве сфер Excel — один из самых популярных, мощных и в то же время простых и удобных инструментов. Но самым проблемным моментом всегда остается интеграция таких данных с различными автоматизированными системами. Нашу команду попросили рассмотреть возможность проведения расчетов данных, используя настройки из пользовательского Excel-файла.\n\n\nЕсли вам необходимо выбрать производительную библиотеку для работы с Excel-файлами или вы ищете решение для расчета сложных финансовых (и не только) данных с удобным инструментом управления и визуализации формул из коробки, добро пожаловать под кат.",
        "link": "https://habr.com/ru/company/arcadia/blog/498032/"
    },
    {
        "title": "NSA, Ghidra, and Unicorns",
        "body": "\nThis time, the PVS-Studio team's attention was attracted by Ghidra, a big bad reverse-engineering framework allowing developers to analyze binary files and do horrible things to them. The most remarkable fact about it is not even that it's free and easily extensible with plugins but that it was developed and uploaded to GitHub for public access by NSA. On the one hand, you bet NSA has enough resources for keeping their code base clean. On the other hand, new contributors, who are not well familiar with it, may have accidentally introduced bugs that could stay unnoticed. So, we decided to feed the project to our static analyzer and see if it has any code issues.",
        "link": "https://habr.com/ru/company/pvs-studio/blog/504778/"
    },
    {
        "title": "Visualizing Network Topologies: Zero to Hero in Two Days",
        "body": "Hey everyone! This is a follow-up article on a local Cisco Russia DevNet Marathon online event I attended in May 2020. It was a series of educational webinars on network automation followed by daily challenges based on the discussed topics.\nOn a final day, the participants were challenged to automate a topology analysis and visualization of an arbitrary network segment and, optionally, track and visualize the changes.\n\nThe task was definitely not trivial and not widely covered in public blog posts. In this article, I would like to break down my own solution that finally took first place and describe the selected toolset and considerations.\n\nLet's get started.\n",
        "link": "https://habr.com/ru/post/534716/"
    },
    {
        "title": "Rust глазами Python-разработчика #2",
        "body": "Снова привет! Мы – @cbmw и @AndreyErmilov, часть команды разработки «Рамблер/Медиа» (портал «Рамблер»). И это вторая часть наших размышлений по поводу сравнения Python и Rust (первая часть).В этой части мы затронем многопоточность, асинхронность, функциональную парадигму и попробуем сделать некоторые заключения, которые мы для себя определили.",
        "link": "https://habr.com/ru/company/rambler_and_co/blog/535234/"
    },
    {
        "title": "Деплоим проект на Kubernetes в Mail.ru Cloud Solutions. Часть 1: архитектура приложения, запуск Kubernetes и RabbitMQ",
        "body": "О Kubernetes и его роли в построении микросервисных приложений известно, пожалуй, большинству современных IT-компаний. Однако при его внедрении часто возникает вопрос — какой вариант установки выбрать: Self-Hosted или Managed-решение от одного из облачных провайдеров. О недостатках первого варианта, думаю, известно всем, кто проходил через ручное конфигурирование K8s: сложно и трудоемко. Но в чем лучше Cloud-Native подход?Я Василий Озеров, основатель агентства Fevlake и действующий DevOps-инженер (опыт в DevOps — 8 лет), покажу развертывание Kubernetes-кластера на базе облака Mail.ru Cloud Solutions. В этом цикле статей мы создадим MVP для реального приложения, выполняющего транскрибацию видеофайлов из YouTube. ",
        "link": "https://habr.com/ru/company/vk/blog/549680/"
    },
    {
        "title": "Intermodular analysis of C++ projects in PVS-Studio",
        "body": "Recently PVS-Studio has implemented a major feature—we supported intermodular analysis of C++ projects. This article covers our and other tools' implementations. You'll also find out how to try this feature and what we managed to detect using it. ",
        "link": "https://habr.com/ru/company/pvs-studio/blog/572302/"
    },
    {
        "title": "Why we need dynamic code analysis: the example of the PVS-Studio project",
        "body": "In May 2021, CppCast recorded a podcast called ABI stability (CppCast #300). In this podcast, Marshall Clow and the hosts discussed rather old news — Visual Studio compilers support the AddressSantitzer tool. We have already integrated ASan into our testing system a long time ago. Now we want to tell you about a couple of interesting errors it found.\n",
        "link": "https://habr.com/ru/company/pvs-studio/blog/580188/"
    },
    {
        "title": "Node.js: разрабатываем сборщик модулей",
        "body": "\n\nПривет, друзья!\nВам когда-нибудь хотелось узнать, как работают сборщики модулей (module bundlers) JavaScript типа Webpack или Parcel, что называется, под капотом. Если хотелось, тогда эта статья для вас.\nВ данном туториале мы разработаем простой сборщик модулей на Node.js, который будет компилировать все модули приложения в один минифицированный файл с кодом, соответствующим стандарту ES5.\nИсточник вдохновения.\nРепозиторий с кодом.",
        "link": "https://habr.com/ru/company/timeweb/blog/664582/"
    },
    {
        "title": "Внеочередной урок по Godot 4.0: пиксели и RPG (часть первая, в которой человечек научился ходить)",
        "body": "Не являюсь гуру Godot, не претендую на абсолютные знания и не имею докторскую степень по чему-либо. Всячески приветствую советы по улучшению кода и прочим идеям. Следовать урокам исключительно на свой страх и риск.Урок Серия уроков будет посвящена созданию простой RPG в 1bit пиксель-арт стиле, где я постараюсь рассмотреть всю ту боль и страдания, с которыми обычно встречаются новички - джиттер, расплывающиеся пиксели, борьба с разрешением и прочее.",
        "link": "https://habr.com/ru/post/685540/"
    },
    {
        "title": "Исследование: Copilot в 40 % случаев генерирует код с ошибками и уязвимостями",
        "body": "Специалисты инженерной школы Тандона Нью-Йоркского университета решили проверить инструмент программирования Copilot на GitHub с точки зрения безопасности. Они обнаружили, что примерно в 40 % случаев код, сгенерированный помощником, содержит ошибки или уязвимости.",
        "link": "https://habr.com/ru/news/t/574728/"
    },
    {
        "title": "Как я подключался к QIWI",
        "body": "Зачем мне это было нужно?\nПроект настойчиво требовал подключения удобных платежных систем. Да, есть webmoney, но не у всех. Да, есть moneybookers для карточек, но слишком долог бюрократический процесс.\n\nБыло принято решение принимать платежи через QIWI, во-первых потому что их автоматы есть практически везде, а во-вторых (тссс, большой секрет!) они готовят запуск системы прямых платежей со счета сотового оператора, без всяких дурацких СМС и девяностодевятипроцентных комиссий.\n\nНу, а поскольку запрашивать вручную у платежной системы реестры и вносить данные в бухгалтерию и на сайт – вчерашний день, был выбран полностью автоматический вариант подключения с использованием протокола SOAP.\n\nСказано – сделано!\nДля сайта был взят вполне заурядный VDS, на котором собран вполне заурядный же серверный набор – nginx спереди, Apache позади.\n\nОснова в виде некоей CMS у меня уже была, в том числе в ней был реализован и модуль личных счетов пользователей с подключаемыми модулями платежных систем.\n\nДля работы с SOAP проще всего взять с гуглокода класс nuSOAP (http://code.google.com/p/nusoap-for-php5/).\n \nЗатем нам надо сделать две вещи:\n\nОтправку на сервер QIWI информации о попытке платежа\nПрием от QIWI на наш сервер пакета с информацией об изменении статуса платежа.\n\nДокументация, жаль, что не очень подробная, есть здесь: https://ishop.qiwi.ru/docs/OnlineStores_Protocols_SOAP.pdf\n",
        "link": "https://habr.com/ru/post/77930/"
    },
    {
        "title": "Интерпретатор из подворотен",
        "body": "Если ваше образование окончилось после второго класса, если словарный запас ограничен, а речь невнятна, если вы попросту тупы, не знаете этих непонятных латинских букв, но всё равно хотите стать программистом, вам поможет наш быдлоязык Йоба. Йоба — язык для риальных пацанов!\n\nНу а если серьёзно, как-то раз у нас на работе кто-то в шутку предложил написать гоп-язык, чтобы программистом мог себя почувствовать себя любой. Начинать конструкции со слова «чо» и всё такое. Тут надо заметить, что, не встретив на своём жизненном пути образования в области computer science, я пропустил все те интересные курсы по построению компиляторов, формальным грамматикам и прочим вкусностям, которые вкушают нормальные студенты на втором-третьем курсе. Книга Вирта по построению компиляторов хотя и добавила мне знания всяких умных терминов типа БНФ, но практической пользы не принесла ­— ни одного компилятора я так и не написал. Поэтому задача оказалась для меня довольно интересной.\n Если вы старше 18 лет, адекватно воспринимаете обсценную лексику нашего родного языка и вам интересно, с чего начать, добро пожаловать под кат.\n ",
        "link": "https://habr.com/ru/post/116301/"
    },
    {
        "title": "Скрипт поиска проектов на odesk.com",
        "body": "Хочу поделиться полезным скриптом для поиска проектов на odesk.com Честно говоря, я не понял, как на odesk.com задать вопрос с OR оператором, чтобы за один присест найти все интерсующие меня проекты, поэтому я искал в несколько подходов, что не очень удобно. Этот скрипт решает проблему. Я поставил его на крон, добавил закладку на локальный файл в браузер и просто смотрю её периодически.\n\nКод скрипта под катом:",
        "link": "https://habr.com/ru/post/132994/"
    },
    {
        "title": "Custom Tree v2 jQuery plugin",
        "body": "На днях решил вернуться к перепиливанию одного своего старенького Open Source проекта.\nВ процессе обдумывания решил, что предыдущий компонент с деревом в его нынешнем виде меня больше не устраивает.\n\nХотелось чего-нибудь более Event Driven, с понятным и простым API.\n\nСейчас решил, что оно уже готово для Public.\n\nБерите, пользуйтесь.\nИли посмотрите на example в рамках GH-pages.\n\nПод катом краткий перевод краткой документации по API.\n\nUPD: в комментариях мой код для организации перетаскивания.\n",
        "link": "https://habr.com/ru/post/188778/"
    },
    {
        "title": "WPF: Binding без тривиальных конвертеров",
        "body": "Добрый день!\n\nВсякий раз, когда я начинал писать новый проект на WPF, меня мучала мысль: почему для того, чтобы привязаться к отрицанию булевой переменной или перевести булеву переменную в тип Visibility, необходимо писать свой конвертер, который потом еще указывать в каждом Binding? А уж если нам необходимо вывести сумму двух чисел, или просто поделить число на 2, требуется написать столько кода, что уже складывать и делить ничего не хочется.\n\nДля решения этой проблемы раз и навсегда я написал аналог стандартного биндинга, позволяющий привязываться к любому выражению от одного или нескольких источников привязки. О том, как это работает и как этим пользоваться, я хочу рассказать подробнее.\n",
        "link": "https://habr.com/ru/post/248197/"
    },
    {
        "title": "«Перегрузка операторов» в Scala",
        "body": "Некоторое время назад я анонсировал курс по Scala. Он стартовал и выкладывается на MOOC-платформу UDEMY — «Scala for Java Developers». Больше о курсе вы можете прочитать в конце статьи.\n\nСейчас я бы хотел представить материал по одной из тем курса — перегрузке операторов в Scala.\n\n\nВведение\nInfix operators\n«Pointless style» (infix notation) это не «point-free style» (tacit programming)\nПриоритет операторов\nАссоциативность операторов\nInfix types\nPrefix operators\nPostfix operators\nО курсе\n\n\n",
        "link": "https://habr.com/ru/company/golovachcourses/blog/255631/"
    },
    {
        "title": "Освоение Composer: советы и приемы использования",
        "body": "Предлагаю читателям «Хабрахабра» перевод статьи «Mastering Composer – Tips and Tricks» за авторством Bruno Skvorc.\n\n\n\nComposer произвел революцию в управлении пакетами в PHP и помог разработчикам по всему миру создавать независимый от фреймворков и разделяемый код. Но все же мало кто выходит за рамки основ его функционала, так что данная статья постарается осветить некоторые полезные приемы его использования.\n",
        "link": "https://habr.com/ru/post/258891/"
    },
    {
        "title": "Использование библиотек на Java 8 для приложений под Android с помощью Maven",
        "body": "Java 8 вышла в начале 2014 года, позволив Java-разработчикам использовать весьма удобные новшества для облегчения программирования тривиальных задач. Среди них — лямбда-выражения, ссылки на методы и конструкторы, реализация интерфейсных методов по умолчанию на уровне языка и JVM, а также использование Stream API на уровне стандартной библиотеки. К сожалению, вялость внедрения таких введений сказывается на поддержке этих средств на других программных платформах, ориентированных на Java. GWT и Android всё ещё не располагают официальной поддержкой хотя бы языковых средств Java 8. Впрочем, весенние SNAPSHOT-версии GWT 2.8.0 уже поддерживали лямбда-выражения. С Android дела обстоят иначе, так как здесь работа лямбда-выражений зависит не только от самого компилятора, но и от среды исполнения. Но с помощью Maven можно относительно просто решить проблему использования Java 8.\n",
        "link": "https://habr.com/ru/post/266881/"
    },
    {
        "title": "Собственный поисковик по раздачам The Pirate Bay",
        "body": "В последнее время на хабре стало популярно делать собственные поисковики по RuTracker. Мне это показалось прекрасным поводом для того, чтобы отойти от скучной enterprise разработки и попробовать что-нибудь новое.\n\n\n\nИтак, задача: реализовать на локалхосте поисковик по базе The Pirate Bay и попутно попробовать, что же такое frontend разработка и с чем её едят. Задача осложняется тем, что TPB не публикует своих дампов, в отличие от RuTracker, и для получения дампов требуется распарсить их сайт. В результате гугления и осмысления задачи я решил в качестве поисковика использовать Elasticsearch, для которого написать client-side only фронтенд на AngularJS. Для получения данных я решил написать собственный парсер сайта TPB и отдельный загружатель дампа в индекс, оба на Go. Пикантность выбору придавал тот факт, что ни к Elasticsearch, ни к AngularJS я до этого ни разу не прикасался и именно их опробывание было моей настоящей целью.\n",
        "link": "https://habr.com/ru/post/275339/"
    },
    {
        "title": "Опыт использования контрактов при вызовах REST API",
        "body": "\nСуществуют два непримиримых лагеря разработчиков программного обеспечения: первый — утверждает, что чем больше крешится приложение, тем лучше оно работает. Второй — что программист достаточно умен, чтоб обработать любую нештатную ситуацию. Характерной особенностью первых является обилие директив Asset в кода, вторые же, даже операции сложения помещают в блок try — catch. Причем, оба лагеря называют такого рода подход «Программированием по контракту». Аргументы первых сводятся к статье в википедии, аргументы вторых — к книге «Почувствуй класс» Бертрана Мейера.\n\nВ рамках научного исследования было бы правильно рассмотреть все многообразие подходов защитных механизмов программирования, особенно тех, что вынесены в заголовок этой статьи, однако, мне хочется продемонстрировать лишь одну из возможностей, которая тяготеет ко второму лагерю.\n",
        "link": "https://habr.com/ru/post/283012/"
    },
    {
        "title": "CTFzone write-ups – First comes Forensics",
        "body": "\n\nПрошло несколько дней после окончания CTFzone от компании BI.ZONE, а наши смартфоны до сих пор разрываются от уведомлений Telegram – чат с участниками битвы после конференции стал еще более оживленным. По отзывам игроков, многие задания CTFzone были очень нестандартными и действительно непростыми. Во время соревнования мы пообещали участникам, что, как только наши разработчики отоспятся и придут в себя, мы выложим райтапы для всех заданий в нашем блоге. \n\nНачнем мы с направления Forensics, и в этой статье представляем вам решения на все таски – от задания на 50 до 1000. Мы знаем, что hackzard опередил нас и уже выложил райтапы к заданиям на 50 и 100, но с более крутыми тасками будет сложнее ;)\n",
        "link": "https://habr.com/ru/company/bizone/blog/315954/"
    },
    {
        "title": "Java примеры из книг и документации",
        "body": "Набор примеров составленных из книг и документации. PDF + Исходники\nJava books and internet samples by padaboo I.B Aleksandrov\n\n",
        "link": "https://habr.com/ru/post/319852/"
    },
    {
        "title": "Истинная реализация нейросети с нуля на языке программирования C#",
        "body": "\nЗдравствуй, Хабр! Данная статья предназначена для тех, кто приблизительно шарит в математических принципах работы нейронных сетей и в их сути вообще, поэтому советую ознакомиться с этим перед прочтением. Хоть как-то понять, что происходит можно сначала здесь, потом тут.\nНедавно мне пришлось сделать нейросеть для распознавания рукописных цифр(сегодня будет не совсем её код) в рамках школьного проекта, и, естественно, я начал разбираться в этой теме. Посмотрев приблизительно достаточно об этом в интернете, я понял чуть более, чем ничего. Но неожиданно(как это обычно бывает) получилось наткнуться на книгу Саймона Хайкина(не знаю почему раньше не загуглил). И тогда началось потное вкуривание матчасти нейросетей, состоящее из одного матана. ",
        "link": "https://habr.com/ru/post/335052/"
    },
    {
        "title": "Синтаксический анализ в NLTK",
        "body": "Здравствуйте. Это статья об синтаксическом анализе предложений, их представлении. Для разбора предложений будет использоваться пакет NLTK и язык программирования Python (версии 2.7).\n\nВступление\nВ моей предыдущей статье мы рассматривали морфологические анализаторы и их использование. Настоятельно рекомендую прочитать её, чтобы лучше понять данную статью. Также там рассматривается установка и настройка пакета NLTK.",
        "link": "https://habr.com/ru/post/340574/"
    },
    {
        "title": "Изучение Go путём портирования небольшого Python веб-бекенда",
        "body": "Содержание: Чтобы выучить Go, я портировал свой бекенд небольшого сайта с Python на Go и получил забавный и безболезненный опыт в процессе.Я хотел начать учить Go какое-то время — мне нравилась его философия: маленький язык, приятная кривая обучения и очень быстрая компиляция (как для статически-типизированного языка). Что меня наконец заставило шагнуть дальше и таки начать его учить, так это то, что я стал видеть всё больше и больше быстрых и серьезных программ, написанных на Go — Docker и ngrok, в частности, из тех, которые я недавно использовал.\nФилософия Go не всем по вкусу (нет исключений, нельзя создавать свои дженерики, и т.д.), но она хорошо ложилась на мою ментальную модель. Простой, быстрый, делающий вещи очевидным способом. Во время портирования я особо был впечатлен насколько полноценной оказалась стандартная библиотека и инструментарий.\nПортирование\nЯ начал с парочки 20-ти строчных скриптов на Go, но этого было как-бы мало, чтобы понять язык и экосистему. Поэтому я решил взять проект побольше и выбрал для портирования бекенд для моего сайта GiftyWeddings.com.\nНа Питоне это было около 1300 строк кода, используя Flask, WTForms, Peewee, SQLite и ещё несколько библиотек для S3, ресайзинга картинок и т.д.\nДля Go-версии я хотел использовать как можно меньше внешних зависимостей, чтобы лучше освоить язык и как можно больше поработать со стандартной библиотекой. В частности, у Go есть отличные библиотеки для работы с HTTP, и я решил пока не смотреть на веб-фреймворки вообще. Но я всё же использовал несколько сторонних библиотек для S3, Stripe, SQLite, работы с паролями и ресайза картинок.",
        "link": "https://habr.com/ru/post/342218/"
    },
    {
        "title": "Система мониторинга как точка проникновения на компьютеры предприятия",
        "body": "Это продолжение памятки про систему мониторинга Zabbix, опубликованной недавно в нашем блоге. Выражаем огромную благодарность пользователю Shodin, который внес значительный вклад в исследование и написал данную статью.\n \nСистемы мониторинга — это очень практичный компонент для управления сетевой структурой предприятия. Они позволяют видеть изменения, которые происходят с устройствами практически в реальном времени. А с ростом количества устройств в сети роль решения, которое способно централизованно управлять устройствами, многократно возрастает.\n\nВ самом простом случае хочется видеть доступность компьютеров, мониторинг работы устройств (например, свитчей по ipmi), видеть изменения в конфигурации оборудования и отправлять об этом оповещения.\n\nСистема мониторинга может многое. Но что, если злоумышленник попытается использовать ее возможности в своих целях? Может ли злоумышленник, благодаря возможностям Zabbix, осуществить атаки на хосты, мониторинг которых осуществляется при помощи Zabbix?\nСтрашно? Под катом рассмотрим, что может злоумышленник, имея доступ к системе мониторинга Zabbix, безопасности и конфигурации, которой уделено недостаточное внимание. ",
        "link": "https://habr.com/ru/company/dsec/blog/350108/"
    },
    {
        "title": "Compilable configuration of a distributed system",
        "body": "In this post we'd like to share an interesting way of dealing with configuration of a distributed system.\nThe configuration is represented directly in Scala language in a type safe manner. An example implementation is described in details. Various aspects of the proposal are discussed, including influence on the overall development process.\n\n(на русском)",
        "link": "https://habr.com/ru/company/primetalk/blog/447690/"
    },
    {
        "title": "How to create a dark theme without breaking things: learning with the Yandex Mail team",
        "body": "\nMy name is Vladimir, and I develop mobile front-end for Yandex Mail. Our apps have had a dark theme for a while, but it was incomplete: only the interface and plain emails were dark. Messages with custom formatting remained light and stood out against the dark interface, hurting our users’ eyes at night. \nToday I'll tell you how we fixed this problem. You will learn about two simple techniques that didn't work for us and the method that finally did the trick — adaptive page recoloring. I'll also share some ideas about adapting images to a dark theme. To be fair, darkening pages with custom CSS is a rather peculiar task, but I believe some of you may find our experience helpful. ",
        "link": "https://habr.com/ru/company/yandex/blog/450032/"
    },
    {
        "title": "HTTP Request smuggling — новые подходы",
        "body": "7 октября 2019 года директор отдела исследований PortSwigger (производителя BurpSuite) опубликовал исследование о новых подходах к HTTP Request smuggling. С их помощью он заработал на bugbounty около $70000. В этой заметке мы коротко выясним суть атаки, инструментарий, а также методики исследования веб серверов, подверженных этой уязвимости.",
        "link": "https://habr.com/ru/post/468489/"
    },
    {
        "title": "Композитор с долгой кратковременной памятью",
        "body": "Автоматическое сочинение музыки\n\nПочти сразу после того, как я научился программированию, мне хотелось создать ПО, способное сочинять музыку.\n\nЯ в течение нескольких лет предпринимал примитивные попытки автоматического сочинения музыки для Visions of Chaos. В основном при этом использовались простые математические формулы или генетические мутации случайных последовательностей нот. Добившись недавно скромного успеха в изучении и применении TensorFlow и нейронных сетей для поиска клеточных автоматов, я решил попробовать использовать нейронные сети для создания музыки.\n\nКак это работает\nКомпозитор обучает нейросеть с долгой кратковременной памятью (Long short-term memory, LSTM). LSTM-сети хорошо подходят для предсказания того, «что встретится дальше» в последовательностях данных. Подробнее о LSTM можно прочитать здесь.\n\n\nLSTM-сеть получает различные последовательности нот (в данном случае это одноканальные файлы midi). После достаточного обучения она получает возможность создавать музыку, схожую с обучающими материалами.",
        "link": "https://habr.com/ru/post/470127/"
    },
    {
        "title": "Создание собственных синтаксических конструкций для JavaScript с использованием Babel. Часть 2",
        "body": "Сегодня мы публикуем вторую часть перевода материала о расширении синтаксиса JavaScript с использованием Babel.\n\n\n\n→ Головокружительная первая часть",
        "link": "https://habr.com/ru/company/ruvds/blog/470878/"
    },
    {
        "title": "Tarantool Data Grid: Architecture and Features",
        "body": "\n\nIn 2017, we won the competition for the development of the transaction core for Alfa-Bank's investment business and started working at once. (Vladimir Drynkin, Development Team Lead for Alfa-Bank's Investment Business Transaction Core, spoke about the investment business core at HighLoad++ 2018.) This system was supposed to aggregate transaction data in different formats from various sources, unify the data, save it, and provide access to it.\n\nIn the process of development, the system evolved and extended its functions. At some point, we realized that we created something much more than just application software designed for a well-defined scope of tasks: we created a system for building distributed applications with persistent storage. Our experience served as a basis for the new product, Tarantool Data Grid (TDG).\n\nI want to talk about TDG architecture and the solutions that we worked out during the development. I will introduce the basic functions and show how our product could become the basis for building turnkey solutions.",
        "link": "https://habr.com/ru/company/vk/blog/471744/"
    },
    {
        "title": "Android, Google and free content licenses. Who is to blame and what can be done?",
        "body": "The story of another ban.\nHave you heard about bans on apps and developers in Google Play? This is just such a story. It’s also an attempt to collect similar cases into one place and offer some kind of plan of action to prevent Google’s unpredictable actions. It isn’t fair to be banned for the legal use of free material. Personally, I like the idea of content licenses such as CC BY-SA, which permits any use, including commercial. Thanks to such licenses, we developers have websites like StackOverflow, where I’ve been elected to be the moderator. Unfortunately, companies like Google don’t respect the ideas behind these licenses. Here's my story.",
        "link": "https://habr.com/ru/post/479336/"
    },
    {
        "title": "Machine Learning in Static Analysis of Program Source Code",
        "body": "\nMachine learning has firmly entrenched in a variety of human fields, from speech recognition to medical diagnosing. The popularity of this approach is so great that people try to use it wherever they can. Some attempts to replace classical approaches with neural networks turn up unsuccessful. This time we'll consider machine learning in terms of creating effective static code analyzers for finding bugs and potential vulnerabilities.",
        "link": "https://habr.com/ru/company/pvs-studio/blog/484202/"
    },
    {
        "title": "Нет, динамические системы типов по своей сути не более открыты",
        "body": "Священные войны в интернете о системах типов по-прежнему страдают от распространенного мифа о том, что динамические системы типов по своей природе лучше подходят для моделирования предметных областей «открытого мира». Обычно аргумент звучит так: цель статической типизации состоит в том, чтобы как можно более точно зафиксировать все сущности, однако в реальном мире это просто неудобно. Реальные системы должны быть слабо связаны и должны как можно меньше быть завязаны на представление данных, поэтому динамическая типизация приводит к более устойчивой системе в целом.\n",
        "link": "https://habr.com/ru/post/486604/"
    },
    {
        "title": "PHP Best Practices to Follow in 2020",
        "body": "\n\nWeb development trends seem to be heading more towards server-side scripting languages over client-side scripting languages. And it can be difficult to decide where to start and what to choose. \n\nThis year W3techs.com, a web technology survey portal, released a list of the five most in-demand server-side programming languages for web development. \n\nHere is the list:",
        "link": "https://habr.com/ru/post/486898/"
    },
    {
        "title": "Оптимизация времени сборки — Часть 1",
        "body": "Почти каждый разработчик хотя бы раз сталкивался с довольно длительным временем сборки своего проекта. Это приводит к снижению производительности и замедляет процесс разработки всей команды. Как вы видите, увеличение времени сборки проекта имеет решающее значение, поскольку оно оказывает непосредственное влияние на время публикаций приложения в AppStore и для более быстрого релиза новых возможностей вашего приложения.\n\nВ этой статье мы узнаем, как профилировать сборку в Xcode и получать метрики. В следующей статье я расскажу о методах устранения узких мест и ускорения сборки проекта. Следует также упомянуть, что мы будем использовать проект Kickstarter iOS, который можно найти на Github. Так что давайте начнем!\n\nЧто мы измеряем?\nПервое, что мы должны сделать, — определить, что мы пытаемся измерить и оптимизировать. Можно рассмотреть два варианта:\n\n\nClean build — clean и сборки проекта. Часто clean сборка выполняется на CI для проверки нового pull request и выполнения юнит тестов.\nIncremental build — сборки проекта после значительных правок исходного кода. Эта сборка создается разработчиком во время работы над новой функциональностью.\n\nВ большинстве случаев уменьшение времени при Clean сборке должно также ускорить Incremental сборку. Оптимальным вариантом было бы создание метрик для обоих типов сборок и отслеживание их. Мы будем измерять время сборки, используя Debug конфигурацию только потому, что она используются большую часть времени и оказывают большее влияние на разработку.",
        "link": "https://habr.com/ru/post/498120/"
    },
    {
        "title": "JSONPath in PostgreSQL: committing patches and selecting apartments",
        "body": "\nThis article was written in Russian in 2019 after the PostgreSQL 12 feature freeze, and it is still up-to-date. Unfortunately other patches of the SQL/JSON will not get even into version 13.\nMany thanks to Elena Indrupskaya for the translation.\n\nJSONPath\nAll that relates to JSON(B) is relevant and of high demand in the world and in Russia, and it is one of the key development areas in Postgres Professional. The jsonb type, as well as functions and operators to manipulate JSON/JSONB, appeared as early as in PostgreSQL 9.4. They were developed by the team lead by Oleg Bartunov.\n\nThe SQL/2016 standard provides for JSON usage: the standard mentions JSONPath — a set of functionalities to address data inside JSON; JSONTABLE — capabilities for conversion of JSON to usual database tables; a large family of functions and operators. Although JSON has long been supported in Postgres, in 2017 Oleg Bartunov with his colleagues started their work to support the standard. Of all described in the standard, only one patch, but a critical one, got into version 12; it is JSONPath, which we will, therefore, describe here.",
        "link": "https://habr.com/ru/company/postgrespro/blog/500440/"
    },
    {
        "title": "The Testcontainers’ MongoDB Module and Spring Data MongoDB Reactive in Action",
        "body": "1. Introduction\nHow can I easily test my MongoDB multi-document transaction code without setting up MongoDB on my device? One might argue that they have to set it up first because in order to carry out such a transaction it needs a session which requires a replica set. Thankfully, there is no need to create a 3-node replica set and we can run these transactions only against a single database instance.",
        "link": "https://habr.com/ru/post/513026/"
    },
    {
        "title": "Пишем автодополнение для ваших CLI проектов",
        "body": "Приветствие\nВсем привет! Хочу поделиться своим опытом написания кроссплатформенного проекта на C++ для интеграции автодополнения в CLI приложения, усаживайтесь поудобнее.\n\n",
        "link": "https://habr.com/ru/post/515946/"
    },
    {
        "title": "Dark code-style academy: line breaks, spacing, and indentation",
        "body": "Hey guys! Let me walk you through the next part of our dark-style code academy. In this post, we will discover some other ways how to slow down the reading speed of your code. The next approaches will help you to decrease maintenance and increase a chance to get a bug in your code. Ready? Let's get started.",
        "link": "https://habr.com/ru/post/517690/"
    },
    {
        "title": "JavaCC 21 Parser Generator",
        "body": "JavaCC 21 is a continuation of work on the venerable JavaCC parser generator, originally developed at Sun Microsystems in the 1990’s and released under a liberal open source license in 2003. It is currently the most advanced version of JavaCC. It has many feature enhancements (with more to come soon) and also generates much more modern, readable Java code. Also, certain key bugs have finally been fixed. (N.B. The “21” in JavaCC 21 is not a version number. It is simply part of the project name and means that this is a JavaCC for the 21st century!)",
        "link": "https://habr.com/ru/post/521664/"
    },
    {
        "title": "Парсим протобаф на скорости больше 2 Гб/с.: как я научился любить хвостовую рекурсию в C",
        "body": "\n\nОтличную функцию недавно добавили в основную ветку компилятора Clang. С помощью атрибутов [[clang::musttail]] или __attribute__((musttail)) теперь можно получить гарантированные хвостовые (tail) вызовы в C, C++ и Objective-C.\n\nint g(int);\nint f(int x) {\n    __attribute__((musttail)) return g(x);\n}\n\n(Онлайн-компилятор)",
        "link": "https://habr.com/ru/company/vk/blog/557012/"
    },
    {
        "title": "Clickhouse next to Zabbix or how to collect logs next to monitoring",
        "body": "If you use Zabbix to monitor your infrastructure objects but have not previously thought about collecting and storing logs from these objects then this article is for you.",
        "link": "https://habr.com/ru/post/572356/"
    },
    {
        "title": "OWASP Top Ten and Software Composition Analysis (SCA)",
        "body": "The OWASP Top Ten 2017 category A9 (which became A6 in OWASP Top Ten 2021) is dedicated to using components with known vulnerabilities. To cover this category in PVS-Studio, developers have to turn the analyzer into a full SCA solution. How will the analyzer look for vulnerabilities in the components used? What is SCA? Let's try to find the answers in this article!",
        "link": "https://habr.com/ru/company/pvs-studio/blog/585028/"
    },
    {
        "title": "Создание нативных CLI приложений на Java с помощью Graalvm и Picocli",
        "body": "Язык программирования Go стал популярным для написания приложений командной строки. Для этого может быть много причин, но один аспект, в котором выделяется Go, - это возможность скомпилировать программу в один нативный исполняемый файл. Это значительно упрощает распространение программы.Программы Java традиционно было трудно распространять, потому что они требовали, чтобы на целевой машине была установлена ​​виртуальная машина Java. Можно связать с приложением последнюю JVM, но это увеличивает размер пакета примерно на 200 МБ. Все движется в правильном направлении: система модулей Java (JPMS), представленная в Java 9, включает утилиту jlink, позволяющую приложению создавать настраиваемую, минимизированную JRE, размер которой может составлять всего 30-40 МБ, и Java. 14 включает jpackage, которая может создать установщик, содержащий этот минимальный JRE с вашим приложением.Тем не менее, для приложений командной строки установщик не идеален. В идеале мы хотим распространять нашу утилиту CLI как «настоящий» нативный исполняемый файл без упакованной среды выполнения. GraalVM позволяет нам делать это с помощью программ, написанных на Java.",
        "link": "https://habr.com/ru/post/597105/"
    },
    {
        "title": "Разработка приложения на Flutter с нуля до релиза: Part 2",
        "body": "Привет! Это вторая статья из цикла о разработке приложения на Flutter. В этом \"номере\" я опишу создание сетевого слоя, работу с локализацией, удобный способ работы с ассетами, локальный поиск и создание UI для одного из двух экранов приложения. Также я выведу интересные метрики, например - сколько данных сможет распарсить ваше приложение за одну милисекунду и начиная с какого размера JSON’а, прилетевшего с бэка UI начнет тормозить. Как говорится - с места...",
        "link": "https://habr.com/ru/post/597605/"
    },
    {
        "title": "What's new in PVS-Studio in 2021?",
        "body": "\n2021 is coming to an end, which means it's time to sum up the year! Today we'll tell you about the new features we added to PVS-Studio in the past year. Buckle up and let's go!",
        "link": "https://habr.com/ru/company/pvs-studio/blog/598973/"
    },
    {
        "title": "Прокачиваем kotlin: используем AST лямбд в рантайме",
        "body": "История о том, как сделать свой LINQ для kotlin, и как сделать так, чтобы кода видаdata.filter { it.age > 30}.map { it.name }.toList() мог и выполняться для данных в памяти, и превращаться в SQL запрос для базы данных.",
        "link": "https://habr.com/ru/post/669694/"
    },
    {
        "title": "Go ebiten: разбираемся с рендерингом и позиционированием текста",
        "body": "Перед вами первая заметка на тему разработки игр на Go с использованием библиотеки ebiten (также известный как Ebitengine).\nСегодня мы будем разбираться, как выполняется позиционирование текста. Как центрировать его, менять межстрочный интервал и так далее. Официальная документация и примеры содержат почти всё необходимое, но чтобы свести всё воедино и понять все концепции можно потратить несколько вечеров. Я постараюсь сэкономить ваше время.\n",
        "link": "https://habr.com/ru/post/671556/"
    },
    {
        "title": "«Это просто мой стиль кода»",
        "body": "Стиль кода. Я слышал эти слова, эту глупость в сотне разнообразных вариантов:«Это просто мой стиль программирования».«Все пишут код по-разному».«Так я лучше всего понимаю код».И так далее, и тому подобное...Честно говоря, меня бесит, когда я слышу, что разработчик использует одну из  этих фраз в качестве оправдания корявости своего кода. Почему? Казалось бы, сущая мелочь. На самом деле, меня раздражает не сама фраза, а глубинный эгоизм, который в ней заключен. Есть только две ситуации, в  которых вы вольны писать код так, как вам вздумается: вы пишете лично для себя, и никто больше вашу программу читать не будет ИЛИ речь идет об изолированной среде, например, R&D, где путь проб и ошибок  поставлен во главу угла. Но если вы работаете в команде, ваше «я пишу так, как мне удобно» граничит с банальным неуважением.",
        "link": "https://habr.com/ru/company/ispmanager/blog/680504/"
    },
    {
        "title": "Еще один пересказ «туториала» Джека Креншоу",
        "body": "Иногда более-менее не тривиальную задачку приятно решить с чувством легкого базиса под ногами. Базис как бы уже есть, и мы как нечто среднее между художником и архитектором, ловим себя (в данный момент времени) на перекладывании пустого в порожнее, готовя нечто яркое и крепкое (почти как красное полусухое 🙂. Яркое — потому что без йоты красоты легко сойти на полпути, а крепкое — профессия обязывает. Чтобы было еще ярче, призовем в помощь замечательные серии Jack Crenshaw compilers.iecc.com/crenshaw (non-technical introduction to compiler construction) и начнем, пожалуй, с построения маленького, но вполне достойного линтера en.wikipedia.org/wiki/Lint_(software) (Честно говоря, так как ниже будет имплементен разбор яваскрипт кода, вполне допустимо, но только временно, переименовать линтер в парсер и думать дальше в новых терминах) \n\nСначала хотелось продекларировать базис как есть, но подумав немного, можно неутешительно прийти к выводу — что четко определенный базис не будет иметь всякого смысла, так как находясь в данной точке пространства, в данный момент времени будущее, как и прошлое, весьма туманны.",
        "link": "https://habr.com/ru/post/685434/"
    },
    {
        "title": "классическая литература на portal.acm.org",
        "body": "ACM.org выложили целую кучу классической литературы в формате PDF (Как завести эккаунт на acm.org). Мой выбор:\n\n\nE. F. Codd «The relational model for database management: version 2», 1990\n\nBrian W. Kernighan, P. J. Plauger «The Elements of Programming Style, 2nd edition», 1982\n\nEdsger W. Dijkstra «Selected writings on computing: a personal perspective», 1982\n\nF. L. Bauer et al. «Compiler construction: an advanced course», 1974\n\nAlfred V. Aho, Jeffrey D. Ullman «The theory of parsing, translation, and compiling», 1972\n\nJohn Allen «Anatomy of LISP», 1978\n\n\n\nПолный архив ACM Classic Books Series (via Lambda the Ultimate).\n\nP.S.: У нас есть целая куча вакансий: http://undev.ru/.\n",
        "link": "https://habr.com/ru/post/18813/"
    },
    {
        "title": "MetaWeblog API в.NET",
        "body": "MetaWeblog, скажу я вам, — довольно занятная вещица. Простая и ясная аки двери. Когда всё там поймешь.\n",
        "link": "https://habr.com/ru/post/24792/"
    },
    {
        "title": "Top 25 Шаблонных движков",
        "body": "(по версии WhenPenguinsAttack.Com)\n\nПосле длительного поиска хорошего шаблонного движка на PHP, Justin Silverton составил следующий список с краткими описаниями.\n\n",
        "link": "https://habr.com/ru/post/31203/"
    },
    {
        "title": "Автоматизация копирования крупных файлов.",
        "body": "Наверное некоторые из коллег- администраторов сталкивались с такой проблемой, когда из-за нехватки системных ресурсов платформа windows отказывается копировать большие файлы встроенными средствами (обычно это файлы бекапа 60+Gb) скажем с одного диска на другой, не помогает тут и утилита «Robocopy» от Sysinternals. Предлагаю решить данную проблему при помощи утилиты KillCopy, а чтобы не приходилось работать руками — создадим простой скрипт, благо утилита позволяет работать с ней из коммандной строки:\n",
        "link": "https://habr.com/ru/post/37659/"
    },
    {
        "title": "NHibernate 2.0",
        "body": "Ну вот и вышел NHibernate 2.0!\n\nКачаем с SourceForge: http://sourceforge.net/project/showfiles.php?group_id=73818\n\n",
        "link": "https://habr.com/ru/post/38172/"
    },
    {
        "title": "MAC OS X Leopard и ASUS Eee PC 1000H",
        "body": "\n\n",
        "link": "https://habr.com/ru/post/41243/"
    },
    {
        "title": "GridStack ­— Пример практического применения flex+bison",
        "body": "В последнее время на Хабре появились несколько статей, посвящённых грамматическому разбору выражений.\nИ это замечательно! По моему скромному мнению, каждый программист должен хоть раз в жизни написать разбор выражения. Постараюсь и я внести свою лепту в общее дело.\n\nМетодов разбора существует множество (рекомендую следующий обзор Dick Grune, Ceriel J. H. Jacobs — Parsing Techniques: A Practical Guide, ISBN 0-13-651431-6). Причём реализации методов варьируются от полностью ручных до использования автоматизированных генераторов, таких как bison, antlr, lemon и других.\nВ то время, как ручное написание лексических и синтаксических (далее я буду называть из лексер и парсер) разборов позволяет достичь максимальной скорости и контроля (особенно над ошибками и способами их преодоления), использование генераторов позволяет сосредоточиться непосредственно на задаче, облегчает модификацию грамматики и бережёт время. Умение владеть такими инструментами позволяет чаще прибегать к DSL (Domain Specific Language) и вообще видеть возможность их применения.\n\nЯ хочу привести пример использования bison (парсер) и flex (лексер) в реальной жизни: от возникновения задачи, до её решения.\n\n",
        "link": "https://habr.com/ru/post/50509/"
    },
    {
        "title": "Asterisk Managment Interface (AMI), Часть 2",
        "body": "В продолжение к опубликованной на днях первой части описания работа интерфейса PBX с открытым исходным кодом Asterisk я публикую вторую часть. В этой части приводятся некоторые примеры использования этого интерфейса для взаимодействия с PBX, начиная от подключения и авторизации, заканчивая осуществлением вызова и редактированием конфигурационных файлов. \n\nПолная версия статьи писалась и будет исправляться здесь: asteriskpbx.ru/wiki/manager-interface-doc",
        "link": "https://habr.com/ru/post/64243/"
    },
    {
        "title": "Подсветка синтаксиса",
        "body": "Возможно вам, как и мне хотелось узнать, как давно в наших редакторах используется подсветка синтаксиса. Кто ее придумал, когда это произошло…\n\nИз того, что удалось накопать:\nОдним из первых, а возможно и первым редактором с подсветкой синтаксиса был LEXX (Live Parsing Editor), написанный для операционной системы VM, с целью компьютеризации Oxford English Dictionary. Было это в далеком 1985 году, а автором редактора была, судя по всему — IBM. Помимо этого редктор умел автоматически делать отступы, что тоже весьма полезно.\n\n",
        "link": "https://habr.com/ru/post/68756/"
    },
    {
        "title": "Версия 1.0.9",
        "body": "Несколько часов назад было объявлено о выходе следующего, как всегда долгожданного, релиза фреймоврка Yii версии 1.0.9.\n\nКак всегда вкратце рассмотрим несколько примечательных нововведений.\n",
        "link": "https://habr.com/ru/post/68892/"
    },
    {
        "title": "Перевод: Шаблонизаторы в PHP — подведение итогов",
        "body": "Перевод итога обсуждений поста в блоге Фабиена (Fabien Potencier) на тему PHP шаблонизаторов и Twig.\n",
        "link": "https://habr.com/ru/post/76021/"
    },
    {
        "title": "Javascript — персональное безумие",
        "body": "Есть случайное такое хобби — программирование на JavaScript.\n\nНедавно возник у меня глобальный вопрос:\nКак часто JS программисты задумываются над [function statement]?\n\n",
        "link": "https://habr.com/ru/post/76377/"
    },
    {
        "title": "Как реализовать загрузку изображений в список в отдельном потоке на Android",
        "body": "\nПо просьбам трудящихся, статья о методе загрузки изображений в список в отдельном потоке на Android.\n\nЗадача:\nРеализовать механизм загрузки изображений из Интернета и отображения их в списке. При этом загрузка изображений должна быть реализована в отдельном потоке, во избежания «зависания» UI приложения.\n\nРеализация:\nДля реализации поставленной задачи использованы стандартный виджет ListView и адаптер — ArrayAdapter. Для работы с изображениями создан helper-класс ImageManager, который имеет два метода downloadImage() и fetchImage(). Первый загружает изображений из Интернета. Второй — вызывает загрузку изображений в отдельном потоке и устанавливает результат в ImageView.\n",
        "link": "https://habr.com/ru/post/78747/"
    },
    {
        "title": "Заметки об NLP (часть 4)",
        "body": "(Начало: 1, 2, 3) На сей раз хочу немного отвлечься и порассуждать (а точнее, похоливарить) на тему статистических алгоритмов и вообще «обходных путей» компьютерной лингвистики.\nВ первых частях нашего разговора речь шла о «классическом пути» анализа текста — от слов к предложениям, от предложений к связному тексту. Но в наше безумное время появились и соблазны решить проблему «одним махом», найдя, если угодно, баг в системе или «царскую дорогу».",
        "link": "https://habr.com/ru/post/79853/"
    },
    {
        "title": "Подробнее об анализаторе исходного кода PHP Depend",
        "body": " В одном из обзоров на Хабре уже упоминался анализатор кода PHP Depend (http://pdepend.org/). В данном материале хотелось бы рассмотреть небольшой пример его использования и интерпретации результатов.\n",
        "link": "https://habr.com/ru/post/80110/"
    },
    {
        "title": "Заметки об NLP (часть 10)",
        "body": "(Первые части: 1 2 3 4 5 6 7 8 9). Как говорилось в известной рекламе, «вы не ждали, а мы пришли» :)\n\nЗа время, прошедшее после публикации девятой части, я прочитал одну хорошую книжку по теме (в to-read списке ещё парочка), множество статей, а также пообщался с несколькими специалистами. Соответственно, накопился новый объём материала, заслуживающий отдельной заметки. Как обычно, знакомлю других, параллельно структурирую знания для себя.\n\nСразу прошу прощения: эта часть для чтения и понимания достаточно трудна. Ну да, как говорится, не всё коту масленица. Сложным задачам соответствуют сложные тексты :)",
        "link": "https://habr.com/ru/post/82068/"
    },
    {
        "title": "Реализация PubSubHubbub-подписики в Java-приложении на App Engine",
        "body": "Разбираясь с обозначенной в заголовке темой, попутно обнаружил, что в рунете она раскрыта довольно слабо, хотя с момента представления данного протокола прошло уже много времени. Хочу слегка заполнить этот небольшой пробел, поделившись опытом.\nНапомню кратко, что PubSubHubbub (PuSH) — это протокол, предложенный Google и призванный сделать более эффективным процесс доставки данных по каналам типа RSS от издателей к подписчикам. Центральное место в схеме, обеспечивающей работу протокола, отводится независимым хабам, выполняющим роль посредников между непосредственными источниками данных и конечными их получателями. При этом, хаб оповещает всех зарегистрированных у него подписчиков канала о поступлении новых данных сразу после их появления, одновременно передавая новую порцию данных.\nТаким образом, если вы создаете приложение, занимающееся обработкой фидов в формате RSS или Atom, то можете заметно облегчить себе жизнь, возложив «черную» работу на хаб. Конкретные плюсы такой схемы:\n\nвозможность «интеграции» множества внешних каналов в единый поток данных общего формата, поступающий на вход приложения: хаб может позаботиться об этом;\nотсутствие необходимости отделения новых данных от старых: хаб доставит только новые;\nне нужно постоянно отслеживать канал на предмет новых данных: хаб сам сообщит когда надо;\nминимальное время с момента публикации до момента оповещения вашего приложения.\n\nДругими словами, вы можете получить оперативную доставку данных, заметно сэкономив как на объеме входящего трафика, так и на процессорном времени приложения. Для приложений на App Engine, ограниченных квотами, эти моменты могут оказаться принципиальными. Кроме того, вы сэкономите свое время, поскольку придется написать меньший объем несложного кода.\nНиже приведены минимально необходимые фрагменты кода на Java, которые были успешно мною опробованы на одном из хабов. Кода совсем немного и он несложный.\n\n",
        "link": "https://habr.com/ru/post/91444/"
    },
    {
        "title": "Chrome 7.0.517.41 (stable)",
        "body": "\nВ июле разработчики объявили, что собираются выпускать стабильную версию примерно каждые 6 недель. Прошло все десять, но сегодня все же вышло обновление стабильной ветки Хром. Как обычно мажорная версия. Как обычно это не означает мажорные изменения, к которым привыкли пользователи. Однако перечислить всё-же есть что.\n\n",
        "link": "https://habr.com/ru/post/106485/"
    },
    {
        "title": "Opera 11 (Build 1045) от 2 ноября",
        "body": "Новая сборка Opera 11, исправления для расширений, уменьшение размера дистрибутива(6,7мб), исправления для ветки *.nix\n\nПривет, мы трудимся в поте лица над расширениями и расширением их функционала, а также над их стабильностью. Эта сборка содержит результат нашего недельного труда над ними, также содержит небольшой сюрприз для Unite, исправления для нового установщика под Win и также красивый набор исправления доля *.unix.\n\nТеперь, приложения Unite не входят в пакет установщика, они буду загружены при первом запуске. Это помогло существенно снизить размер дистрибутива.\n\nТакже включена новая функция которая включает автообновление расширений и приложений Unite. Эти функции могут не работать до конца так-как мы работает над серверной частью.\n\nВнимание разработчикам расширений! Вот то, что вы определенно ждали. Теперь нет необходимости упаковывать расширения для их запуска, просто перетащите ваш config.xml на оконо Opera.\n",
        "link": "https://habr.com/ru/post/107431/"
    },
    {
        "title": "Мечта айтишника, или как мы создали девушку-робота",
        "body": "Здравствуйте, жители Хабра!\n\nПредставьте: есть девушки, которые не требуют к себе никакого внимания. Им не нужно дарить цветы, водить в кино, они спокойно обходятся без подарков на День рождения и 8 марта. Они не только внимательно выслушают вас в любое время дня и ночи, но и подскажут, кто поможет решить ту или иную проблему.\n\n\n",
        "link": "https://habr.com/ru/company/88005554448/blog/113352/"
    },
    {
        "title": "Python Module Usage Stats – Feb 2011",
        "body": "Ниже список 30 наиболее используемых «базовых модулей», основанный на количестве скачиваний с проекта PyPI. Эти результаты основаны на 11,204 загруженных пакетах. Подробности ниже.\n",
        "link": "https://habr.com/ru/post/114673/"
    },
    {
        "title": "Стартап: как скрестить мобильные и социальные сети, перестать беспокоиться и научиться располагать к себе людей",
        "body": "Речь пойдет о публикации MMS сообщений в социальных сетях и блогах. Ничего удивительного в том, что идея отправлять MMS в социальные сети пришла в голову — нет. Удивительно, что она все же получила свое воплощение, реализована и успешно работает. Изначально это было похоже на басню про лебедя, рака и щуку: мобильные операторы и социальные сети, движимые совершенно разными целями и приоритетами в развитии, расползались как дождевые черви из оранжевой банки с надписью PostOK. Но, обо всем по-порядку…",
        "link": "https://habr.com/ru/post/114756/"
    },
    {
        "title": "Вызов .NET сервиса (WCF RESTful) из Android приложения",
        "body": "Привет Хаброжители!\n\nВот недавно столкнулся с проблемой, нужно было вызвать .NET WCF сервис из Javа. Нашел несколько примеров, реализации, одним из них и хочу поделиться, вдруг пригодиться кому. Прогулявшись по просторам интернета, нашел готовое решение для SOAP сервисов. Разбираться с ним не стал и продолжил поиск. Затем, было найдено решение с использованием WCF RESTful сервиса, который возвращал данные в формате JSON. Решил разобраться подробнее и попробовать как это работает.\n\n",
        "link": "https://habr.com/ru/post/115157/"
    },
    {
        "title": "Погружение в ACID3",
        "body": "(Это первая статья из серии статей, посвященных обзору различных тестов браузеров.)\n\nЧто такое Acid3? Кто его придумал? Как он устроен и как он работает? Что он измеряет на самом деле? Этими и другими вопросами мы зададимся в данной статье и попробуем найти ответы.\n\nЧто такое Acid3?\nAcid3 — это третий из серии специальных тестов (до этого были Acid1 и Acid2), написанных «в помощь производителям браузеров, чтобы те могли проверить поддержку стандартов в своих продуктах». Конкретно ACID3 нацелен на тестирование спецификаций, связаных с разработкой динамичных «Web 2.0»-приложений.\n\n\n\nAcid3 включает 100 специальных тестов, проверяющих 19 различных спецификаций. \n\nСреди специалистов отношение к этому тесту весьма неоднозначное: с одной стороны, все знающие веб-разработчики понимаю, что этот тест мало что показывает и наврядли может выступать в роли абсолютного критерия поддержки веб-стандартов, с другой, наврядли, кто-то возьмется утверждать, что этот тест не имел никакого влияния.\n",
        "link": "https://habr.com/ru/post/118076/"
    },
    {
        "title": "Создание языка программирования с использованием LLVM. Часть 3: Генерация кода LLVM IR",
        "body": "Добро пожаловать в Главу 3 учебника «Создание языка программирования с LLVM». В этой главе мы рассмотрим, как преобразовать AST (Абстрактное Синтаксическое дерево), построенное в Главе 2, в LLVM IR. Она расскажет вам о некоторых аспектах работы LLVM, а также продемонстрирует, насколько он прост в использовании. Вы увидите, что гораздо больше труда потребовалось на лексический и синтаксический анализ, чем на непосредственное создание кода LLVM IR.\n\nОбратите внимание: код из этой главы требует наличия LLVM 2.2 или более поздней версии. С версиями по LLVM 2.1 включительно этот код работать не будет. Также стоит отметить, что вам стоит использовать версию этого учебника, которая соответствует вашему релизу LLVM: вы можете использовать документацию, которая прилагается к официальным выпускам или посетить страницу с релизами на llvm.org.\n",
        "link": "https://habr.com/ru/post/120424/"
    },
    {
        "title": "Создание языка программирования с использованием LLVM. Часть 4: Добавление JIT и поддержки оптимизатора",
        "body": "Добро пожаловать в Главу 4 учебника «Создание языка программирования с LLVM». Предыдущие главы (1-я, 2-я и 3-я) описывали реализацию простейшего языка программирования и добавление в него ​​поддержки генерации LLVM IR. В этой главе описаны две новых техники: добавление поддержки оптимизатора и добавление поддержки JIT-компилятора. Эти дополнения продемонстрируют как получить хороший, эффективный код для нашего языка программирования Kaleidoscope.\n",
        "link": "https://habr.com/ru/post/120516/"
    },
    {
        "title": "Создание языка программирования с использованием LLVM. Часть 5: Расширение языка: Поток управления",
        "body": "Добро пожаловать в Главу 5 учебника «Создание языка программирования с LLVM». Предыдущие главы (1-я, 2-я, 3-я и 4-я) описывали реализацию простого языка программирования Kaleidoscope и включение в него поддержки генерации LLVM IR, а также последующей оптимизации и JIT-компиляции. К сожалению, в текущем виде Kaleidoscope почти бесполезен: он не имеет никакого потока управления, за исключением вызовов и возвратов. Это означает, что в коде не может быть условных переходов, что значительно ограничивает язык программирования. В этой главе мы расширим Kaleidoscope, добавив в него выражение if/then/else и простой цикл \"for\".\n",
        "link": "https://habr.com/ru/post/120881/"
    },
    {
        "title": "IE избавляется от Conditional Comments",
        "body": "В официальном IEBlog, описывающим возможности недавно вышедшего IE10 PP2, появилась новость, говорящяя, что IE10 не будет поддерживать условные комментарии (Conditional Comments) вида  для совместимости с новым HTML5-парсером.\n\nRemoving legacy features\n\nBecause some features in earlier versions of IE aren’t compatible with HTML5 parsing, we’ve removed them from IE10 mode. Sites that rely on these legacy features will still work when running in legacy modes. This way, sites that work today will continue to work with IE10 even if the developers of the site don’t have the time to update them. \n\nВместо этого, разработчикам предлагается заниматься не выяснением модели браузера, а определением его возможностей.",
        "link": "https://habr.com/ru/post/123605/"
    },
    {
        "title": "Скрипт резервного копирования через rsync",
        "body": "Возникла необходимость как-то и куда-то бэкапится. Причём чтобы процессоры не грузились и место не занималось, а бэкапы ротэйтились и удобно доставались. Раньше всегда пользовался fsbackup, но захотелось отказаться от архивирования. Для решения задачи была использована rsync и механизм жёстких ссылок (так называемых хардлинков) файловой системы.\n\nАрхитектура: есть отдельно стоящий сервер с большим винтом — на нём и работает скрипт. Есть много разных серверов с доступом по ssh, на которых в ~/.ssh/authorized_keys добавлен публичный ключ пользователя, под которым работает скрипт резервного копирования.\n",
        "link": "https://habr.com/ru/post/128617/"
    },
    {
        "title": "О замене стандартного /sbin/init",
        "body": "init — первый пользовательский процесс в Unix-подобных операционных системах \ninit — запускается непосредственно ядром системы. \ninit — является пра-родителем всех пользовательских (userspace) процессов системы. \n\nСтандартный /sbin/init читает конфигурационный файл /etc/inittab, стартует систему и управляет системой используя несколько «уровней исполнения» (runlevels).\n\nС помощью одноименного ключа init можно сказать ядру Linux использовать другой файл, вместо стандартного /sbin/init\n\nВоспользуемся этой возможностью и добавим следующую конфигурацию в /boot/grub/menu.lst\ntitle Linux kernel and custom init\n root (hd0,1)\n kernel /linux/vmlinuz-2.6.26-1-686 root=/dev/hda2 init=/linux/init\n initrd /linux/initrd.img-2.6.26-1-686\n\nКто пользуется возможностью подменить процесс init? Иногда к этому прибегают разработчики встраиваемых систем — таким способом можно упростить разработку устройства и не тащить за собой всё окружение операционной системы.\n\nВ моём случае желание подменить init лежало в другой плоскости — хотелось проверить как поведёт себя процесс init системы Xameleon исполняемый Linux ядром. Желаете попробовать тоже? \n\n",
        "link": "https://habr.com/ru/post/129298/"
    },
    {
        "title": "Natural Docs + GitHub Pages = online auto-documentation на халяву (почти)",
        "body": "У GitHub есть забавная штука, называется GitHub Pages.\n\nИспользоваться может двояко – можно или сайт замутить, или сделать доки к репозитарию, в мануале об этом подробно написано.\n\nНас сейчас сайт не интересует, а вот доки к репозитарию – тема что надо. Я для примера буду использовать проект на javascript, но это не важно, Natural Docs поддерживает приличную пачку языков, чем и хорош.\n",
        "link": "https://habr.com/ru/post/132000/"
    },
    {
        "title": "Разработка сетевого клиента на Java",
        "body": "Иногда бывают ситуации когда необходимо использовать сетевое взаимодействие, однако клиента по интересующий протокол не существует, или этот клиент платный(проприетарный), или это вовсе своя разработка. В этой статье я опишу как создать свой клиент для сетевого взаимодействия. Я опишу общие шаги необходимые для этого.\n\n",
        "link": "https://habr.com/ru/post/135625/"
    },
    {
        "title": "Забег реализаций ruby '2012",
        "body": "Использовался набор бенчмарков из ruby-1.9.3-p125. Все тесты запускались на:\n\nОС: OSX Lion 10.7.3 \nПроцессор: 2.3ГГц i5\nПамять: 8Гб 1333 MHz DDR3\nSSD: OCZ Vertex 3 Max IOPS SATA III 2.5\" 120Гб\n\nРеализации:\n — ruby 1.8.7p249 (системный ruby)\n — ruby 1.9.3p125\n — ruby 2.0.0dev (2012-02-25 trunk 34796)\n — MacRuby 0.12 (ruby 1.9.2) (Nightly build)\n — maglev 1.0.0 (ruby 1.8.7)\n — rubinius 1.2.4 (1.8.7 release 2011-07-05 JI)\n — rubinius 2.0.0dev (1.9.3 e22ed173 JI)\n — jruby 1.7.0.dev (ruby-1.9.3-p28) (Java HotSpot(TM) 64-Bit Server VM 1.7.0_04-ea)\n — jruby 1.6.7 (ruby-1.8.7-p357) (Java HotSpot(TM) 64-Bit Server VM 1.7.0_04-ea)",
        "link": "https://habr.com/ru/post/139370/"
    },
    {
        "title": "Использование parse_transform",
        "body": "Disclaimer: Описываемый инструмент имеет спорную репутацию. Я не призываю использовать его где ни попадя, только знакомлю с используемыми понятиями, дабы уменьшить некоторым трепет перед технологией.\n\nНаписанные исходники, а также текстовую копию статьи можно найти на гитхабе.\n\nЧто такое parse_transform\nparse_transform — механизм изменения AST перед компиляцией. Предназначен для изменения значения конструкций (семантики), не выходя за синтаксис Эрланга.\n\nК сожалению, в Сети мало информации про это, что делает порог вхождения весьма высоким для не-гуру эрланга.\n\nЧто мы будем делать\nВ рамках данной статьи я немного рассказажу про AST эрланга, приведу пример простых трансформаций, а так же покажу процесс написания parse_transform для создания stateless gen_server-а (задача имеет не особо много смысла, но в качестве примера использования сгодится), а в конце дам ссылку на набор начинающего транформатора.\n\n",
        "link": "https://habr.com/ru/post/140374/"
    },
    {
        "title": "RubyMotion: нативные iOS приложения на Ruby (перевод)",
        "body": "\nВ 2007 году Лоран Сансонетти, разработчик из Apple, основал проект с открытым исходным кодом MacRuby. Его целью было создание интерпретатора Ruby поверх среды исполнения Objective-C, который бы обеспечивал прозрачное взаимодействие между Ruby и экосистемой OS X «Cocoa» — и ему это удалось. Теперь Сансонетти надеется сделать что-то подобное и под iOS.\n\n",
        "link": "https://habr.com/ru/post/143332/"
    },
    {
        "title": "Битва против повторных развертываний достигает облаков",
        "body": "Автором данной статьи является наш друг и пользователь платформы Jelastic  – Антон Архипов. Антон сейчас занимает должность менеджера продукта JRebel в компании ZeroTurnaround, а также является сооснователем сообщества разработчиков devclub.eu и JUG.ee.\nАнглоязычную версию статьи можно читать здесь.\n\nВозможно, Вы еще не слышали о таком продукте как JRebel. Так вот, JRebel – это инструмент, призванный избавить от проблемы повторного развертывания приложения во время разработки, а значить сэкономить Ваше время. Он обновляет приложение сразу же после внесения каких-либо изменений в классовую структуру, файлы ресурсов и конфигурационные файлы фреймворков. Надо отметить, что этот инструмент пользуется огромной популярностью среди Java разработчиков. И не зря, ведь используя JRebel, разработчик избавляется от необходимости повторно собирать и разворачивать приложение. При этом он сохраняет в среднем 10,5 минут за час кодирования, согласно последнему отчету о JavaEE продуктивности. Это больше чем 5 недель работы каждый год – а значит более 1 месячной зарплаты каждого разработчика в команде.\n\nСовсем недавно вышел релиз JRebel 5.0. Главная фишка этого релиза — функция JRebel Remoting, которая позволяет использовать JRebel в случаях, когда приложение запущено в облачной среде. \nС такой фичей будет очень просто разрабатывать и тестировать Java приложения в облаках. Давайте рассмотрим, как установить и сконфигугировать JRebel на облачной платформе Jelastic.",
        "link": "https://habr.com/ru/company/jelastic/blog/146240/"
    },
    {
        "title": "Парсинг BEncode на JavaScript. Просмотр торрент-файлов в Firefox",
        "body": "I. Зачем\nЕсть несколько способов просматривать торрент-файлы: в торрент-клиенте, в BEncode Editor, в файловых менеджерах с плагинами, возможно в сетевых сервисах (но это немножко стрёмно).\n\nНо не всегда удобно вызывать из браузера внешнюю программу. Не всегда эта программа выдаёт полную информацию. Не всегда в удобном виде. Не всегда с возможностью поиска. Поэтому хотелось бы иметь в браузере простой способ просмотреть торрент-файл, чтобы, например:\n\n — узнать содержимое раздачи;\n — узнать количество файлов в раздаче;\n — узнать информацию о файлах (некоторые трекеры очень снисходительны к неполноте описаний, а в торрент-файлах появляется всё больше информации о файлах — например, разрешение, видео- и аудиокодеки, продолжительность фильмов и т. д.);\n — узнать информацию о самом торрент-файле (время создания, трекеры, флаг приватности и т. д.);\n — иметь возможность текстового поиска по всей информации.\n",
        "link": "https://habr.com/ru/post/147630/"
    },
    {
        "title": "Кластеризация opensips и скрытие топологии в операторской sip-сети",
        "body": "Наша сеть построена на opensips 1.8. Основная нагрузка на opensips приходится при обработке регистраций, в отличие от звонков, на которые приходится гораздо меньшая нагрузка. Поэтому, когда в нашей сети количество регистраций перешагнуло определенный порог, было принято решение о горизонтальном масштабировании opensips. Так родился проект opensips-кластера.",
        "link": "https://habr.com/ru/post/149957/"
    },
    {
        "title": "Внутренности движка QML. Часть 1: Загрузка файлов",
        "body": "В этой (2 часть в переводе) серии статей мы заглянем под капот движка QML и раскроем некоторые из особенностей его внутренней работы.Статьи основаны на Qt5 версия QtQuick, QtQuick 2.0.\n\nБольшинство людей знают, что каждый элемент в QML файле опирается на конкретный C++ класс. Когда QML файл загружен, движок QML как-то создает один C++ объект для всех элементов в файле. В этом посте мы рассмотрим, как движок QML переходит от чтения текстового файла, включающего полное дерево C++ объектов. В документации Qt присутствует раздел с обширным описанием взаимодействия QML и C++, прочтение которого стоит потраченного времени. В данной серии статей, я предполагаю что пользователь прочёл и понимает описанное в документации.\n",
        "link": "https://habr.com/ru/post/150064/"
    },
    {
        "title": "Как установить и настроить оболочку ridiculous fish в Debian Squeeze",
        "body": "Совсем недавно я открыл для себя оболочку Ridiculous fish, которая принципиально отличается от bash и zsh с которыми я работал ранее. На моем MacBook Pro под Mac OS X оболочка установилась без каких либо проблем и замечательно работала. Освоившись в новой оболочке, я решил что пришло время установить и настроить ее так же и на серверах, на которых установлен 64-разрядный Debian Squeeze. Тут то я и столкнулся с тем, что 32-разрядный deb пакет, который лежит у них на сайте, на 64-разрядный Debian не устанавливается. И я решил собрать любимую оболочку из исходников. Этот процес и будет описан в статье.\n",
        "link": "https://habr.com/ru/post/150096/"
    },
    {
        "title": "Common Event Format изнутри",
        "body": "\n\nОдин за одним производители программных и программно-аппаратных решений заявляют о получении сертификата, подтверждающего поддержку формата Common Event Format (CEF) компании HP ArcSight: Stonesoft, Tripwire, Citrix, Imperva, NetScout и еще несколько десятков вендоров…\n\n",
        "link": "https://habr.com/ru/post/151631/"
    },
    {
        "title": "Логично, но незаконно",
        "body": "Полагаю, что многие пришедшие в славный мир .NET из славного мира С++ прекрасно помнят, как им приходилось буквально впиваться в стандарт, чтобы разобраться, почему язык ведет себя именно так, а не иначе. Многие вещи, которые казались им совершенно очевидны, при ближайшем рассмотрении оказались не то, что неочевидны — а просто-таки прямо противоположны здравому смыслу, на который мы все привыкли полагаться.\n\nВпрочем, вероятнее всего, это проблема многих языков программирования. Многие, думаю, помнят известный ролик WAT, посвященный проблемам некоторых «очевидностей» языков JavaScript и Ruby. Логика привычного мира выходит покурить тогда, когда появляются пограничные области — те, в которые нормальные люди не лазят.\n\nВпрочем, я предлагаю несколько отвлечься от этих высоких материй и взглянуть на язык C# несколько с другой, непривычной стороны. А именно посмотреть некоторые конструкции, которые, с одной стороны, совершенно понятны и легко описываются в терминах языка, а с другой — совершенно отказываются компилироваться.\n\nЯ даже не собираюсь спорить с тем, должны ли они компилироваться и работать. Я просто еще раз в очередной раз напомню, что все то, что для нас «логично и понятно» на самом деле может быть совершенно нелогично и непонятно.\n\nИ, да — я не буду в очередной раз ныть на тему того, что хотелось бы вернуть из функции тупл без использования громоздких структур и получить имя переменной с помощью простого оператора. Это не сюда — это к Майкрософту в фич-реквесты. У нас пятиминутка юмора. Итак, все то, что вы ежедневно хотите написать, но не пишете, потому что знаете — оно не скомпилируется. Поехали!\n",
        "link": "https://habr.com/ru/post/151964/"
    },
    {
        "title": "Понимание ООП в JavaScript [Часть 1]",
        "body": " — Прототипное наследование — это прекрасно\nJavaScript — это объектно-ориентированный (ОО) язык, уходящий корнями в язык Self, несмотря на то, что внешне он выглядит как Java. Это обстоятельство делает язык действительно мощным благодаря некоторым приятным особенностям.\n\nОдна из таких особенностей — это реализация прототипного наследования. Этот простой концепт является гибким и мощным. Он позволяет сделать наследование и поведение сущностями первого класса, также как и функции являются объектами первого класса в функциональных языках (включая JavaScript).\n\nК счастью, в ECMAScript 5 появилось множество вещей, которые позволили поставить язык на правильный путь (некоторые из них раскрыты в этой статье). Также будет рассказано о недостатках дизайна JavaScript и будет произведено небольшое сравнение с классической моделью прототипного ОО (включая его достоинства и недостатки).\n",
        "link": "https://habr.com/ru/company/enterra/blog/153365/"
    },
    {
        "title": "Samba4, Radius и PPTP с использованием MS-CHAP v2",
        "body": "…У-ф-ф, свершилось. Всё оказалось довольно просто, хотя времени потратить пришлось изрядно, в основном на поиск информации, коей на просторах Интернета (полезной, конечно) – кот наплакал… А уж как она (эта информация) разрознена! Поэтому, решил написать это руководство, основанное на собственном опыте внедрения. Главное, что всё будет собрано в одном месте (кроме, возможно, настроек bind9, но об этом чуть позже).\n\nИтак, задача. Есть сервер с Ubuntu 12.04. Он должен стать:\n\n\nPDC Windows-домена c Active-Directory.\nСервером VPN (пусть, например, это будет PPTP, но с обязательной поддержкой MS-CHAP v2 и MPPE-128) с авторизацией на Radius –сервере (для определённости – freeradius).\nСоответственно – Freeradius-сервером.\nТерминальным сервером, на котором прозрачно авторизуются пользователи AD.\n\nПриступаем.\n",
        "link": "https://habr.com/ru/post/157019/"
    },
    {
        "title": "Телевизор в сети",
        "body": "Дано: современный телевизор, модель не играет большой роли, главное чтобы был сетевой плеер.\nТребуется: подцепить его к домашней сети чтобы он проигрывал хранящиеся на серваке фильмы.\n\n\n",
        "link": "https://habr.com/ru/post/158717/"
    },
    {
        "title": "Приручаем и прокачиваем огнелиса: The Ultimate Guide",
        "body": "\n\nЛирическое вступление\nНе люблю гонку версий, своей бессмысленностью отдаленно напоминающую гонку вооружений. Не успели как следует довести до ума текущую версию — выпускают новую, с новыми багами, уязвимостями и «особенностями». Для таких как я — любителей стабильных и проверенных решений для корпоративной среды, да и для себя тоже — у команды Мозилы есть сборка типа ESR: в течение длительного времени для нее выходят обновления, устраняющие ошибки и уязвимости, сама же major версия браузера не обновляется! Вот ссылка на страницу оф.сайта, откуда можно скачать эту замечательную ESR-версию (достигается путем не слишком очевидных ходов), также, ESR можно скачать с официального FTP ftp.mozilla.org/pub/firefox/releases/latest-esr/\nТолько что вышла давно мной ожидавшаяся 17-я ESR версия (предыдущая была только 10-я). В связи с этим событием решил написать подробное руководство по оптимизации нашего (не)любимого браузера — с разбором всех параметров, что каждый из них делает и откуда он получен.\n",
        "link": "https://habr.com/ru/post/161053/"
    },
    {
        "title": "Частотный анализатор английских слов, написаный на python 3, умеющий нормализовывать слова с помощью WordNet и переводить с помощью StarDict",
        "body": "Привет всем!\nЯ учу английский и всячески упрощаю этот процесс. Как-то мне потребовалось получить список слов вместе с переводом и транскрипцией для определенного текста. Задача не была сложной, и я принялась за дело. Чуть позднее был написан скрипт на python, все это умеющий, и даже умеющий чуть больше, поскольку мне захотелось получить еще и частотный словарь из всех файлов с английским текстом внутри. Так вышел маленький набор скриптов, о котором я и хотела бы рассказать. \nРабота скрипта заключается в распарсивании файлов, выделении английских слов, нормализации их, подсчете и выдачи первыx countWord слов из всего получившегося списка английских слов. \nВ итоговом файле слово записывается в виде:\n[число повторений] [само слово] [перевод слова]\n\nО чем будет дальше:\n\nМы начнем с получения списка английских слов из файла (используя регулярные выражения);\nДальше начнем нормализовывать слова, то есть приводить их с естественной формы в тот вид, в котором они хранятся в словарях (тут мы немного изучим формат WordNet);\nЗатем мы подсчитаем количество вхождений у всех нормализованных слов (это быстро и просто);\nДальше мы углубимся в формат StarDict, потому что именно с помощью него получим переводы и транскрипцию.\nНу и в самом конце мы куда-нибудь запишем результат (я выбрала файл формата Excel).\n\n",
        "link": "https://habr.com/ru/post/161073/"
    },
    {
        "title": "Первые жертвы критических уязвимостей Rails: RubyGems.org подвергся хакерской атаке",
        "body": "Не успело Rails сообщество оправиться от последних критических уязвимостей с YAML парсингом, как злоумышленники нанесли удар по святому — RubyGems.org(wiki) подвергся хакерской атаке, через выше описанные уязвимости. Как минимум один зловредный гем был залит на RubyGems, который потенциально имел доступ к чувствительной информации, включая права на манипулирование гемами.\n",
        "link": "https://habr.com/ru/post/167731/"
    },
    {
        "title": "Выпущены Rails 3.2.13, 3.1.12, и 2.3.18: исправление 4х уязвимостей безопасности",
        "body": "\nИтак, найдены очередные уязвимости в Rails. На этот раз их 4:\n\nCVE-2013-1854 Symbol DoS vulnerability in Active Record\nCVE-2013-1855 XSS vulnerability in sanitize_css in Action Pack\nCVE-2013-1856 XML Parsing Vulnerability affecting JRuby users\nCVE-2013-1857 XSS Vulnerability in the sanitize helper of Ruby on Rails\n\nУязвимости исправлены в версиях 3.2.13, 3.1.12, и 2.3.18. Настоятельно рекомендуется обновиться.\nПодробнее тут.",
        "link": "https://habr.com/ru/post/173379/"
    },
    {
        "title": "Одновременная работа php 5.2 и php 5.3 на Ubuntu 12.04",
        "body": "\nИскал решение данной проблемы, так как держать устаревшую версию ubuntu 10.04 на отдельном сервере казалось излишним. Время на установку ~1 час. Установка производилась на работающем dev сервере.\nАктуально для разработчиков под Drupal 6 и 7 и всех кто всё еще использует PHP 5.2.\n\n",
        "link": "https://habr.com/ru/post/176147/"
    },
    {
        "title": "MaskJS — HMV* фреймворк",
        "body": "\nРазрабатывая MaskJS вот уже больше полугода, удалось превратить DOM шаблонизатор в очень мощный, но при этом производительный веб фреймворк. В статье познакомлю вас с возможно интересными подходами к разработки. Уверен, будет интересно почитать о использовании сигналов и слотов вместо DOM событий. И как компоненты делают нашу жизнь проще. Маска легко интегрируется в уже готовый проект, и даже может быть использована вместе с любым другим фреймворком. Основным же отличием наверное является render flow, где в процессе поэтапно создается Document Fragment / контроллеры / «биндинги». Собственно всю гибкость даже сложно передать, но я попробую, и приглашаю под кат.\n",
        "link": "https://habr.com/ru/post/179359/"
    },
    {
        "title": "Scala rule-based inference engine",
        "body": "Всем привет! Хочу показать общественности свой открытый движок вывода правил (forward chaining) с поддержкой нечеткой логики, под рабочим названием Scala inference engine (sie) (код). \n\nUPD.\nБиблиотека выложена в центральный репозиторий maven-а:\n    <dependency>\n        <groupId>net.sf.brunneng.fusie</groupId>\n        <artifactId>fusie</artifactId>\n    </dependency>\n\n\n",
        "link": "https://habr.com/ru/post/180869/"
    },
    {
        "title": "Знакомство с UnrealEngine. Часть 2",
        "body": "В прошлой части мы узнали что из себя представляет игра на UnrealEngine, научились строить геометрию, и расставлять акторов. В комплекте с играми на UnrealEngine и даже UnrealRuntime довольно много стандартных акторов, таких как декорации, всевозможные тригеры, оружие и прочие полезные вещи. При их грамотном использовании, можно делать разнообразные интересные уровни для игр, однако, полную свободу творчества это не даст. У игры будет стандартное начало, стандартные правила выигрыша и поражения, даже ввести лишнюю кнопку управления будет нельзя. Вот тут и пришла пора познакомится с UnrealScript. Сразу оговорюсь если вы гуру UnrealScript то скорей всего вам будет не интересно. Остальным добро пожаловать под кат.\n",
        "link": "https://habr.com/ru/post/188662/"
    },
    {
        "title": "Компилятор языка программирования MiniJava",
        "body": "Как в сравнительно короткие сроки написать компилятор какого-либо языка программирования. Для этого следует воспользоваться средствами разработки, автоматизирующие процесс. Я хотел бы рассказать о том, как я писал компилятор языка программирования MiniJava под платформу .NET Framework.\n\nВесь процесс написания компилятора в целом отображён на следующем изображении. На вход подаётся файл с исходным кодом на языке программирования MiniJava. Выходом является PE-файл для выполнения средой CLR.\n\n\n\nДалее я хотел бы сконцентрироваться на практической части описания.\n",
        "link": "https://habr.com/ru/post/191766/"
    },
    {
        "title": "Как проимпортировать неимпортируемое",
        "body": "Проблема, идея, и решение\nЗдравствуйте, дорогие мои детишечки. Спешу сообщить вам, что в мою голову пришла еще одна идея, которая вылилась вот в эту заметку. Идея, собственно говоря, пришла из проблемы, которую подкинула горячо мной любимая и уважаемая компания Microsoft и их новый продукт Windows Server 2012 R2. И тут я нисколько не иронизирую, мне они действительно нравятся. Но начнем по порядку.\nПрежде всего отмечу, что я, кроме всего прочего еще и тренер по всякого рода продуктам Microsoft, и соответственно имею доступ к определенным плюшкам в виде готовых виртуальных машин для подготовки к курсам, в рамках учебного центра. И вот, собственно, решил я попробовать погонять новый сервер, ну и, как водится, развернуть на нем виртуалочки от одного курса. Выкачал эти машины, все подготовил, распаковал. И тут меня поджидало ужасное. Они категорически отказывались импортироваться. ",
        "link": "https://habr.com/ru/post/199228/"
    },
    {
        "title": "Взаимодействие Android-устройств в локальной сети",
        "body": "\n\nПредположим, мы пишем игру для Android, которая подразумевает некое сетевое взаимодействие между устройствами. Причем наши устройства находятся в одной сети и мы хотим, чтобы взаимодействие между ними осуществлялось быстро, а значит вариант с обменом данными через интернет нам не подходит. Ах да, еще одна маленькая ложка дегтя — мы хотим охватить максимально возможную аудиторию, для чего нам необходимо поддерживать Android 2.3.\nЧто же нам делать? Давайте поговорим об этом, а заодно рассмотрим относительно новые возможности Android SDK для соединения двух и более устройств.\n",
        "link": "https://habr.com/ru/post/208132/"
    },
    {
        "title": "Новые возможности профилирования Windows Store приложений в Visual Studio 2013",
        "body": "\n\nПроизводительность – одна из важнейших характеристика любого приложения, на ряду с функциональностью и дизайном. Она же является одной из распространенных причин неудачного завершения процесса сертификации и публикации приложения в Windows Store.\n\nХорошее приложение должно быть быстрыми, работать плавно и экономно расходовать аппаратные ресурсы. Для этого, производительности необходимо уделять внимание, так же, как дизайну и функциональным возможностям.\n \nВ Visual Studio 2013 появились новые возможности профилирования и анализа производительности, которые позволяют быстро находить распространенные узкие места в приложениях. \n",
        "link": "https://habr.com/ru/company/microsoft/blog/209538/"
    },
    {
        "title": "«Идеальный» кластер. Часть 2.2: Высокодоступный и масштабируемый web-сервер, лучшие технологии на страже вашего бизнеса",
        "body": "\n\nВ продолжение цикла статей об «Идеальном» кластере, хочу поделиться рецептами создания надежных, производительных и удобных для управления web-систем. \n\nДля обеспечения надежной и быстрой работы сайтов и web-систем, в нашей компании была проведена экспертиза доступных на рынке технических средств. Мы руководствовались простой целью: достигнуть масштабируемости и одновременно высокой производительности наших систем.\n\nКластер, фактически, был построен с нуля. Возникла frontend-backend архитектура. Базы данных отправились в MariaDB Galera, все сайты переехали на унифицированные web-ноды.\n\nВ процессе долгой работы, споров и обсуждений родились готовые решения, которыми компания Acronis с удовольствием делится с Вами. Мы существуем чтобы помогать.\n\n",
        "link": "https://habr.com/ru/company/acronis/blog/209934/"
    },
    {
        "title": "В США очередная крупная утечка данных кредитных карт",
        "body": "На этой неделе мы писали про нашумевшую историю, связанную с компрометацией крупной американской ритейлерной сети Target. Данные кредитных карт более 50 млн. покупателей и клиентов Target оказались скомпрометированы. Злоумышленники использовали хорошо подготовленную атаку на один из серверов компании и смогли получить доступ во внутреннюю сеть для централизованной установки вредоносного кода на компьютеры, которые обслуживают POS-терминалы. Вредоносный код, который известен как Trojan.POSRAM (iSight) или новая модификация BlackPOS использовался атакующими для получения доступа к данным кредитных карт в момент проведения платежной операции. В СМИ этот вредоносный код упоминался как KAPTOXA, название взято из отчета iSight и информации IntelCrawler. Последняя указала на одного из наших соотечественников как на автора вредоносного ПО.\n\n\n\nПосле появления информации о компрометации Target, другая ритейлерная сеть Neiman Marcus также заявила о хищениях данных кредитных карт в середине декабря прошлого года, причем речь идет об оплате именно с использованием POS терминалов, так как клиентов онлайн-магазина это не коснулось. Сегодня же появилась информация, что еще одна крупная сеть магазинов Michaels занимается расследованием инцидента кражи данных карт. Службы безопасности банковских учреждений уже зафиксировали сотни случаев мошеннического доступа к данным кредитных карт, украденных через Michaels.\n\n",
        "link": "https://habr.com/ru/company/eset/blog/210310/"
    },
    {
        "title": "Как работает Chromecast?",
        "body": "Введение\nЗагорелся я недавно выбором беспроводного адаптера для передачи видео. Смотрел китайские адаптеры с Miracast/DLNA и, естественно, не обошел меня стороной и Chromecast. Если с такими технологиями, как WiDi, Miracast и донглами вроде AIRTAME все понятно (не требуется поддержка со стороны софта, видится системой как еще один монитор), как устроен Chromecast внутри я не был до конца уверен, как и не был уверен, подойдет ли он мне. Однако, я нашел open-source проект эмулятора Chromecast LeapCast, и решил его испробовать в работе, а также изучить протокол.\n\nУстановка и использование\nУстановка на ArchLinux довольно простая — достаточно установить пакет leapcast-git из AUR. Необходимо еще установить Google Chrome или Chromium, т.к. его нет в зависимостях.\n\nЗапускаем программу и видим следующую картину:\nСкрытый текстINFO:root:Starting SSDP server\nINFO:root:Starting LEAP server\nINFO:root:Loading Config-JSON from Google-Server\nINFO:requests.packages.urllib3.connectionpool:Starting new HTTPS connection (1): clients3.google.com\nINFO:root:Parsing Config-JSON\nINFO:root:Added edaded98-5119-4c8a-afc1-de722da03562 app\nINFO:root:Added PlayMovies app\nINFO:root:Added 00000000-0000-0000-0000-000000000000 app\nINFO:root:Added 1812335e-441c-4e1e-a61a-312ca1ead90e app\nINFO:root:Added 06ee44ee-e7e3-4249-83b6-f5d0b6f07f34 app\nINFO:root:Added 2be788b9-b7e0-4743-9069-ea876d97ac20 app\nINFO:root:Added GoogleSantaTracker app\nINFO:root:Added 06ee44ee-e7e3-4249-83b6-f5d0b6f07f34_1 app\nINFO:root:Added Pandora_App app\nINFO:root:Added aa35235e-a960-4402-a87e-807ae8b2ac79 app\nINFO:root:Added YouTube app\nINFO:root:Added HBO_App app\nINFO:root:Added TicTacToe app\nINFO:root:Added Revision3_App app\nINFO:root:Added Songza_App app\nINFO:root:Added a7f3283b-8034-4506-83e8-4e79ab1ad794_2 app\nWARNING:root:Didn't add Netflix because it has no URL!\nINFO:root:Added GoogleMusic app\nINFO:root:Added 18a8aeaa-8e3d-4c24-b05d-da68394a3476_1 app\nINFO:root:Added Post_TV_App app\nINFO:root:Added ChromeCast app\nINFO:root:Added Hulu_Plus app\nINFO:root:Added GoogleCastSampleApp app\nINFO:root:Added GoogleCastPlayer app\nINFO:root:Added Fling app\nОткрываем любое приложение на андроид-смартфоне, поддерживающее Chromecast (например, YouTube), и можем подключиться к Leapcast:\n\nВ это же время в логе:\nСкрытый текстINFO:tornado.access:200 GET /ssdp/device-desc.xml (192.168.0.105) 2.22ms\nINFO:tornado.access:200 GET /apps/YouTube (192.168.0.105) 3.18ms\nINFO:tornado.access:200 GET /apps/YouTube (192.168.0.105) 3.67ms\nINFO:tornado.access:201 POST /apps/YouTube (192.168.0.105) 5.29ms\nINFO:root:Channel for app set to <leapcast.services.websocket.ServiceChannel object at 0x195f690>\nОго, работает! Как же оно работает?",
        "link": "https://habr.com/ru/post/210742/"
    },
    {
        "title": "Создание игры на ваших глазах — часть 3: Прикручиваем скриптовый язык к Unity (UniLua)",
        "body": "\nКак и обещал — продолжаю делиться с вами теми техническими деталями, которые встречаются нам в процессе создания нашей игры.\n\nНа этот раз поговорим о языке для написания внутриигровых скриптов.\n\nВ этой статье я расскажу, почему именно Lua, а не самописный велосипед. Зачем вообще игре может понадобится скриптовый язык. Какие тонкости есть при прикручивании этого дела к Unity и покажу как это делается на примере интеграции UniLua.\n\nСразу скажу, что к последнему информации в интернете почти что ноль, и половина этого нуля — на китайском. Так что, можно сказать, — держите эксклюзив.\n",
        "link": "https://habr.com/ru/post/211576/"
    },
    {
        "title": "Python-digest #31. Новости, интересные проекты, статьи и интервью [8 июня 2014 — 6 июля 2014] Возрождение",
        "body": "Очередной дайджест с новостями из мира Python, за месяц опубликовали немало релизов и статей. Произошли изменения и в дайджесте, все подробности под катом.\n\n",
        "link": "https://habr.com/ru/post/228789/"
    },
    {
        "title": "Лень — двигатель прогресса или мой вариант создания окружения для веб-разработки на основе VirtualBox",
        "body": " \n\nВсем веб-разработчикам так или иначе нужен какой-то сервер для разработки своих веб-приложений. Кто-то использует «Денвер», кто-то OpenServer, более продвинутые берут виртуальный сервер (VPS), а еще более продвинутые используют Vagrant, а кто-то просто ленивый. Под катом я расскажу, как разворачиваю веб-приложение для разработки с помощью VirtualBox, баша и кой-каких костылей. Для тех, кто ленив и не хочет смотреть под кат: описан один баш-сценарий, который монтирует расшареные папки в гостевую ОС и полу-демон, который запускает первый сценарий после запуска перед остановкой системы и реализует интерфейс демона.\n",
        "link": "https://habr.com/ru/post/236573/"
    },
    {
        "title": "Разбираемся с монадами с помощью Javascript",
        "body": "Оригинальная статья — Understanding Monads With JavaScript (Ionuț G. Stan).\nБуду признателен за комментарии об ошибках/опечатках/неточностях перевода в личку\n\nОт автора\nПоследние несколько недель я пытаюсь понять монады. Я все еще изучаю Haskell, и, честно говоря, думал, что знаю, что это такое, но когда я захотел написать маленькую библиотечку — так, для тренировки — я обнаружил, что хотя и понимаю, как работают монадические bind (>>=) и return, но не представляю, откуда берется состояние. Так что, вероятно, я вообще не понимаю, как это все работает. В результате, я решил заново изучить монады на примере Javascript. План был тот же, когда я выводил Y Combinator: взял изначальную задачу (здесь это взаимодействие с неизменяемым явно состоянием), и проделал весь путь к решению, шаг за шагом изменяя изначальный код.\n",
        "link": "https://habr.com/ru/post/238171/"
    },
    {
        "title": "Добро пожаловать в Харьков на Сiklum Mobile Saturday 25 Октября",
        "body": "Ciklum приглашает всех поклонников Android и iOS на Mobile Saturday, который состоится 25 Октября в Xарьковском офисе компании Ciklum.\nCiklum Saturday – это меропритие на котором у вас есть отличная возможность не только послушать интересных спикеров, но и глубже окунуться в профессиональную среду и обсудить животрепещущие темы в кругу единомышленников.\n",
        "link": "https://habr.com/ru/company/Ciklum/blog/240465/"
    },
    {
        "title": "Адаптация ZenCoding к C# — ZenSharp",
        "body": "Многие наверняка знают, что для HTML & CSS существует великолепный инструмент ZenCoding(emmet), который позволяет очень сильно упростить ввод рутинных конструкций языка, определяя специальный язык мнемоник. C# менее многословный язык, чем Html, но тем не менее, ввод его конструкций можно здорово оптимизировать.\nЯ предлагаю динамическое расширение идеи мнемоник, впервые услышанное мною от Дмитрия Нестерука [1].\n\n\n\n\n\nПолучился небольшой плагин для ReSharper, мнемоники для которого можно настраивать через специальный язык, похожий на формальную грамматику.\nПлагин для ReSharper доступен в галерее расширениий. Исходный код на GitHub\n\n",
        "link": "https://habr.com/ru/post/243085/"
    },
    {
        "title": "Ubuntu 14.04 + Asterisk 11 + CDR-Stats",
        "body": "Предлагаю пошаговое руководство по установке и настройке сервера Ubuntu, телефонной станции Asterisk и системы обработки и аналитики звонков CDR-STATS.\n\nУстановка Ubuntu\nСтавим Ubuntu server 14.04 (LTS), скачав дистрибутив с официального сайта. Во время установки я указал SSH + LAMP + SAMBA во избежание потом долгого процесса установки нужных компонентов.\n\nЛогинимся на сервер. Первым делом я поставил midnight commander (люблю DOS-интерфейс, да и удобно):\n\nsudo apt-get install mc -y\nСледующий шаг вы можете пропустить, если вам не нужен GUI для сервера.\n\nДля большего удобства и ввиду некоторых особенностей будущего сервера я накатил GUI:\n\nsudo apt-get install --no-install-recommends lubuntu-desktop\nПосле установки:\n\nsudo reboot \nПо окончании загрузки видим классический графический интерфейс пользователя.\n",
        "link": "https://habr.com/ru/post/250195/"
    },
    {
        "title": "Дайджест интересных материалов из мира веб-разработки и IT за последнюю неделю №150 (2 — 8 марта 2015)",
        "body": "Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы, интересные материалы и IT-новости.\n\n\n",
        "link": "https://habr.com/ru/company/zfort/blog/252499/"
    },
    {
        "title": "Централизованный сбор и обработка журналов печати Windows",
        "body": "В небольших офисах далеко не всегда используются сетевые принтеры и МФУ, поэтому получить статистику использования печатающих устройств получить достаточно сложно. Тем более, если это требуется произвести с минимальными затратами. Такие данные смогут помочь определить наиболее активно используемые устройства, оценить нагрузку на них и принять своевременные решения по закупке расходных материалов, техническом обслуживании или даже замене на более экономичные и производительные. Данную задачу возможно решить без дополнительного ПО используя встроенные средства управления журналами Windows и скриптом на Powershell.\n",
        "link": "https://habr.com/ru/post/257297/"
    },
    {
        "title": "Сервисы дистрибуции мобильных приложений для iOS. Часть 4 (заключительная): Fabric (Crashlytics)",
        "body": "Вступление\nЧетвёртая часть обзора будет посвящена сервису Fabric (первая часть обзора, вторая часть обзора, третья часть обзора).\n\nДостаточно известный ранее сервис Crashlytics с осени 2014 года является частью Fabric — набора специализированных SDK (или, как сказано на официальном сайте, “modular, cross-platform mobile development suite”), каждый из которых возможно интегрировать по отдельности, либо совместно. В своем обзоре я остановлюсь только на Crashlytics Kit — сервисе и SDK, отвечающими за дистрибуцию мобильных приложений.\n\nСистема оценки: сервисы оцениваются по 10-балльной шкале по каждому из разделов (Регистрация и интеграция, Основной функционал, Дополнительный функционал, Continuous Integration). Суммарная оценка позволит определить победителя.\n",
        "link": "https://habr.com/ru/company/arcadia/blog/260019/"
    },
    {
        "title": "Видеозаписи и обзор конференции LVEE-2014",
        "body": "В прошлом году в белорусских лесах под Гродно прошла конференция LVEE-2014, краткий отчет о которой был на хабре.  Я снимал-монтировал видео, и хотя я опубликовал его еще прошлой осенью, только сейчас дошли руки кратко описать собственно сами доклады. На хабре еще ни разу не было публикации видео и обзоров докладов с этой конференции, надеюсь будет интересно. Паруминутный ролик о LVEE-2014 для общего впечатления:  \n\n  \n\nПод катом максимально сжатое описание и ссылки на видео и допматериалы (тезисы, слайды, контакты докладчиков), т.е. не бойтесь заходить, даже если у вас GPRS.  \n\n",
        "link": "https://habr.com/ru/post/260501/"
    },
    {
        "title": "Google выпустила первый публичный бюллетень безопасности для Android",
        "body": "Google выпустила бюллетень безопасности Nexus Security Bulletin (August 2015) для Android, в котором указываются исправленные уязвимости в рамках обновления, о котором мы писали ранее на прошлой неделе. Компания перешла к выпуску ежемесячных security-обновлений для своих продуктов, для них будут публиковаться бюллетени безопасности с информацией об исправленных уязвимостях.\n\n\n\nОбновление относится к типу over-the-air (OTA), т. е. может быть установлено по беспроводному подключению, и предназначено для установки на фирменные смартфоны Nexus 4/5/6/7/9/10. Обновление также было выпущено для репозитория исходных текстов Android Open Source Project (AOSP). Всего было исправлено шесть уязвимостей в Android.\n\n",
        "link": "https://habr.com/ru/company/eset/blog/264665/"
    },
    {
        "title": "Microsoft выпустила набор обновлений для своих продуктов, август 2015",
        "body": "Компания выпустила набор обновлений для своих продуктов Windows, Internet Explorer, Edge, .NET Framework, Office, Lync, Silverlight. Всего было выпущено 4 обновления со статусом Critical и 10 Important, они закрывают более 50 уязвимостей. MS выпустила первое критическое обновление MS15-091 для веб-браузера Edge, в рамках которого было закрыто 4 уязвимости в этом веб-браузере. 3 уязвимости относятся к типу Remote Code Execution и могут быть использованы атакующими для удаленного исполнения кода в веб-браузере, еще одна уязвимость CVE-2015-2449 относится к типу ASLR bypass и может использоваться атакующими для обхода ASLR.\n\n\n\nВ отличие от Internet Explorer 11, Edge по умолчанию работает с высокими настройками безопасности: процессы вкладок запускаются как 64-битные и работают на Integrity-уровне AppContainer. В рамках MS15-079 был обновлен также и IE, в котором было закрыто 13 уязвимостей, большинство из которых относятся к типу RCE.\n\n",
        "link": "https://habr.com/ru/company/eset/blog/264713/"
    },
    {
        "title": "Настоящее и будущее C++. Интервью с Эриком Ниблером",
        "body": "Эрик Ниблер — известный эксперт по C++, один из важных контрибьюторов Boost, человек, который добавил в стандарт библиотеку Ranges. \n\n26 августа в рамках C++ Party Эрик выступит в новосибирском офисе Яндекса, где как раз расскажет о библиотеке и поговорит с гостями о новых стандартах C++. \n\n\n\nЯ заранее поговорил с Эриком и задал ему несколько вопросов от себя и коллег о том, каким он видит настоящее и будущее C++, что ему кажется самым важным в программировании, будет ли в C++ когда-нибудь нормальный менеджер пакетов, модули, что будет со стандартной библиотекой и о многом другом.\n\nКстати, если у вас есть ещё хорошие вопросы к Эрику, — их можно задать в комментариях, и мы попросим его на них ответить.\n",
        "link": "https://habr.com/ru/company/yandex/blog/265351/"
    },
    {
        "title": "Зри в корень: java.lang.Object",
        "body": "В Java в вершине иерархии классов лежит класс java.lang.Object. Лежит и лежит, долгое время я им совсем не интересовался.\n\nНа собеседованиях часто спрашивают, какие в нем есть методы, поэтому они как-то сами собой выучились. Пришло время посмотреть на этот класс более внимательно. Первый вопрос, который у меня возник, есть ли вообще в исходниках Java класс java.lang.Object. Он же ведь необычный, он вполне может быть жестко зашит в реализацию, как самый верхний.\n\nОднако, такой класс есть и я приведу тут исходники java/lang/Object.java, опустив javadoc, и попытаюсь пролить свет на некоторые моменты связанные с реализацией jvm:\n",
        "link": "https://habr.com/ru/post/265373/"
    },
    {
        "title": "Swift 2 в быту. Еще один парсер JSON",
        "body": "Пару месяцев назад Apple выпустила мажорный апдейт своего нового детища — Swift 2. Выпустило оно его, что называется apple-way, причем не тем way, который «все очень хорошо и вам не нужно ни о чем думать, просто пользуйтесь», а другим. «Мы знаем, что так лучше, а раньше было хуже, поэтому бросайте все ваше раньше и начинайте пользоваться» — то есть язык с заметными проблемами с обратной совместимостью — начиная от того, что штатный инструмент миграции работает довольно таки нестабильно, и заканчивая, собственно, тем, что вы, определенно, не сможете разрабатывать на новой версии языка, не обновя весь инструментарий разработчика до пока еще не очень стабильного последнего — и, что самое страшное, в обратную стророну тоже. Но речь пойдет не об этом. Речь пойдет о том, что мне нравится Swift 2. К сожалению, так как язык все еще не признан сообществом как production-ready, то подавляющее большинство материалов о нем можно отнести к двум категориям — документация Apple и «я вот тут поигрался вечерком и у меня получилось прикольно». Исключения, конечно, есть, но их не хватает, поэтому я и попробую немного осветить этот язык именно с позиции работы с ним и на нем.\nВ этой статье, мне бы хотелось поговорить о стандартной ORM задаче десериализации JSONа — то есть о том, как из объекта NSDictionary словаря [String: AnyObject] получить некоторую десериализованную структуру. Что изменилось с появлением Swift 2? Как оно было раньше? Кроме того, мы будем рассматривать эту задачу с точки зрения около-функционального подхода, что налагает определенные ограничения — такие, как иммутабельность единожды созданных данных, например. Поэтому рассматриваемое решение может быть несколько сложнее других — но ну и ладно.\n\n",
        "link": "https://habr.com/ru/post/266657/"
    },
    {
        "title": "iOs Debug Master",
        "body": "Однажды я почти полностью отказался от мышки для навигации по Xcode и вполне этому рад. Следующий шаг — это отказ от визуальных средств управления отладчиком. Зачем? — Увеличиваем возможности, уменьшаем время дебага, тратим меньше калорий для перемещения тяжеленькой ручишки (нам калории нужны, чтобы головой работать) и тем самым провоцируем меньше туннельного синдрома. \n\n\n",
        "link": "https://habr.com/ru/post/269095/"
    },
    {
        "title": "Дайджест интересных материалов из мира веб-разработки и IT за последнюю неделю №189 (6 — 13 декабря 2015)",
        "body": "Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы, интересные материалы и IT-новости\n\n\n",
        "link": "https://habr.com/ru/company/zfort/blog/273021/"
    },
    {
        "title": "PowerShell, AWS CLI и json",
        "body": "При работе с облаком Amazon, часто приходится выполнять много рутинных операций через Web консоль. Но хочется их автоматизировать.\nAWS CLI, интерфейс командной строки, хорошо для этого подходит. Конечно, можно написать и приложение на Scala, но в повседневных задачах лучше обойться без «тяжелой артиллерии».\nКоманды AWS умеют возвращать данные в разных форматах, в том числе и в json. Можно воспользоваться bash и jq, но последнего нет в репозитарии cygwin, а руками устанавливать лень. Между тем в PowerShell есть прекрасная поддержка json! Правда оказалось, что воспользоваться этим не совсем просто.",
        "link": "https://habr.com/ru/post/273473/"
    },
    {
        "title": "Сервер логов Elasticsearch + Logstash + Kibana4 + Beats(windows/linux). Установка и настройка",
        "body": "Встал вопрос централизованного хранения и обработки журналов с серверов на базе Linux и Windows. Мой выбор пал на продукты от Elastic. \nБольшинство прочитанных статей на тему установки приложений Elastic показались мне достаточно расплывчатыми и неполными.\n",
        "link": "https://habr.com/ru/post/277029/"
    },
    {
        "title": "Реализация семантического новостного агрегатора с широкими поисковыми возможностями",
        "body": "Цель этой статьи — поделиться опытом и идеями реализации проекта, основанного на полном преобразовании текстов в семантическое представление и организации семантического (смыслового) поиска по полученной базе знаний. Речь пойдет об основных принципах функционирования этой системы, используемых технологиях, и проблемах, возникающих при ее реализации.\n\nЗачем это нужно?\nВ идеале, семантическая система «понимает» содержание обрабатываемых статей в виде системы смысловых понятий и выделяет из них главные («о чем» текст). Это дает огромные возможности по более точной кластеризации, автоматическому реферированию и семантическому поиску, когда система ищет не по словам запроса, а по смыслу, который стоит за этими словами. \n\nСемантический поиск – это не только ответ по смыслу на набранную в поисковой строке фразу, а в целом способ взаимодействия пользователя с системой. Семантическим запросом может быть не только простое понятие или фраза, но и документ — система при этом выдает семантически связанные документы. Профиль интересов пользователя – это тоже семантический запрос и может действовать в «фоновом режиме» параллельно с другими запросами. ",
        "link": "https://habr.com/ru/post/277351/"
    },
    {
        "title": "Ангстрем. Кучка сложностей в простой обёртке",
        "body": "\nКогда требуется ещё один велосипед?\nАнгстрем, безусловно, если смотреть на выполняемую функцию, велосипед. Сколько способов преобразовать единицы? Много. Можно пользоваться гуглом, можно одним из сотен приложений для iOS или Android.\n\nНо, вместе с тем, ни один способ не решал одну проблему. Как мне получить результат конвертирования, когда я смотрю сериал? Конкретно, Mythbusters. Они там всегда общаются между собой про футы и фунты. Сколько это? Большая ли квартира, 500 ft²? (не очень, как оказалось) Много ли это, 27 psi (угу, дофига)? И, наконец, скажите им, что Фаренгейты — вообще никому не понятны!\n\nС обычными конверторами приходится останавливать видео, выяснять, какая это категория, «psi», потом искать там этот самый «pounds per square inch», вспоминать, какое число нужно ввести, понять, во что её перевести (чтобы осознать масштаб проблемы). Делать это хочется с тем устройством, которое под рукой, желательно без интернета.\n\nИ вот эту проблему не решить ни одним конвертером. Я перепробовал, наверное, сотню. Она решается гуглом, но это тоже медленно (запустил браузер, ввел что-то в строке, гугл не понял, или понял не так...).\n\nТак что велосипед ли Ангстрем? Вроде бы нет.\n\nПоглядим теперь на сложности, которые пришлось решить при его разработке. Технические сложности, программерские.\n",
        "link": "https://habr.com/ru/post/278695/"
    },
    {
        "title": "Как стать IT-принцессой",
        "body": "\nКаждая девочка мечтает стать принцессой, быть самой красивой, самой умной и обязательно встретить принца. Множество маркетологов и PR-акул обогатили свои компании, играя на этих простых девичьих мечтах. Сферу IT, мужскую и брутальную, это явление тоже не обошло стороной. Известная компания запустила громкий конкурс на звание титула IT-принцессы. Всех, кто слышал и кому интересно, как оно было, приглашаю под кат.\n",
        "link": "https://habr.com/ru/post/282005/"
    },
    {
        "title": "Houdini: один из самых впечатляющих проектов в CSS, о котором вы никогда не слышали",
        "body": "\n\nБывало ли у вас так, что хотелось использовать какую-нибудь фичу из стандарта CSS, но вы этого не делали, потому что она поддерживается не всеми браузерами? Или ещё хуже: её поддерживают все браузеры, но поддержка глючная, противоречивая или вообще несовместимая? Наверняка вы с таким сталкивались, и поэтому рекомендую вам присмотреться к Houdini.\n\nЭто новая рабочая группа W3C, которой поставлена амбициозная задача — навсегда решить описанную выше проблему. Сделать это планируется с помощью нового набора API, который впервые даст разработчикам возможность самостоятельно расширять CSS, а также предоставит инструменты для подключения к процессу создания макета и применения стилей в ходе работы браузерного движка.\n\nНо что конкретно кроется за этими обещаниями? Это хотя бы хорошая затея? И как всё вышесказанное поможет нам, разработчикам, создавать сайты сегодня и завтра?\n\nНа все эти вопросы я постараюсь дать ответы. Но сначала внесу ясность относительно актуальных сегодняшних проблем и необходимости их решения. А затем уже мы поговорим о том, как Houdini может нам с ними помочь, и рассмотрим ряд его наиболее впечатляющих возможностей, находящихся в процессе разработки. И в завершение я внесу ряд предложений, как сообщество разработчиков может помочь реализоваться проекту Houdini.\n",
        "link": "https://habr.com/ru/company/vk/blog/282027/"
    },
    {
        "title": "Дайджест интересных материалов из мира веб-разработки и IT за последнюю неделю №208 (18 — 24 апреля 2016)",
        "body": "Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы, интересные материалы и IT-новости\n\n\n",
        "link": "https://habr.com/ru/company/zfort/blog/282325/"
    },
    {
        "title": "Apple исправила серьезную уязвимость в своих роутерах AirPort",
        "body": "Apple выпустила security-обновление APPLE-SA-2016-06-20-1 AirPort Base Station Firmware Update 7.6.7 and\n7.7.7 в рамках которого компания исправила опасную уязвимость в firmware своих роутеров (базовых станций Wi-Fi) AirPort. Обновлению подлежат устройства Apple AirPort Express, Extreme, базовые станции Time Capsule 802.11n, AirPort Extreme и Time Capsule 802.11ac. Обновление устанавливает на них следующие версии ПО: 7.6.7 или 7.7.7.\n\n\n\nИсправлению подлежит единственная RCE-уязвимость с идентификатором CVE-2015-7029. С использованием этой уязвимости атакующие могут удаленно исполнить код в роутере путем отправки на него специальным образом сформированного DNS-запроса. Эксплуатация уязвимости возможна в том случае, если сам роутер настроен на обработку DNS-запросов, поступающих извне, либо злоумышленник может подделать DNS-ответ на запрос, который периодически посылает роутер по поручению устройств из обслуживаемой им сети.\n\n",
        "link": "https://habr.com/ru/company/eset/blog/303876/"
    },
    {
        "title": "Как работает умный обработчик служебных смс (показывает только важную информацию)",
        "body": "Данная статья содержит описание внутреннего устройства умного обработчика служебных смс.\nПриложение парсит входящие смс-ки и показывает только важную информацию из них.\nПоказывает красиво, быстро и удобно.\n1. Как это работает\nВ манифесте прописываем разрешение на получение и чтение SMS\n<uses-permission android:name=\"android.permission.RECEIVE_SMS\"/>\n<uses-permission android:name=\"android.permission.READ_SMS\"/>`",
        "link": "https://habr.com/ru/post/303990/"
    },
    {
        "title": "Анализируем ошибки в открытых компонентах Unity3D",
        "body": "Unity3D — один из самых перспективных и быстроразвивающихся игровых движков на текущий момент. Время от времени, в официальном репозитории появляются новые библиотеки и компоненты, многие из которых до недавнего времени были недоступны в виде исходников. К сожалению, команда разработчиков Unity3D предоставила на растерзание общественности не весь исходный код проекта, а только некоторые его компоненты, библиотеки и демки. В этой статье мы попробуем найти всевозможные ошибки и опечатки в них, используя для этого статический анализатор PVS-Studio.\n",
        "link": "https://habr.com/ru/company/pvs-studio/blog/308336/"
    },
    {
        "title": "Аналитическое вычисление производной функции на языке Scala",
        "body": "Введение\nДанный алгоритм реализован на языке Scala, характерной особенностью которого является использование case-классов, так удачно подходящих для написания алгоритма дифференцирования. В этой статье планируется описать лишь часть программы, содержащей алгоритм нахождения производной, поскольку разработка парсера для математических выражений это другая большая тема,\nзаслуживающая отдельной статьи\nПодготовка\nСначала опишем структуру данных, в которой будет храниться исходная математическая функция. Опишем трейт MathAST:\n\nsealed trait MathAST\n\nИ его наследников:\n",
        "link": "https://habr.com/ru/post/309676/"
    },
    {
        "title": "Тематическое моделирование репозиториев на GitHub",
        "body": "\nТематическое моделирование — подраздел машинного обучения, посвященный извлечению абстрактных «тем» из набора «документов». Каждый «документ» представлен мешком слов, т.е. множеством слов вместе с их частотами. Введение в тематическое моделирование прекрасно описано проф. К. В. Воронцовым в лекциях ШАД [PDF]. Самая известная модель ТМ — это, конечно, Латентное размещение Дирихле (LDA). Константину Вячеславовичу удалось обобщить все возможные тематические модели на основе мешка слов в виде аддитивной регуляризации (ARTM). В частности, LDA тоже входит в множество моделей ARTM. Идеи ARTM воплощены в проекте BigARTM.\n\nОбычно тематическое моделирование применяют к текстовым документам. Мы в source{d} (стартап в Испании) перевариваем биг дату, полученную из GitHub репозиториев (и скоро примемся за каждый публично доступный репозиторий в мире). Естественным образом возникла идея интерпретировать каждый репозиторий как мешок слов и натравить BigARTM. В этой статье пойдет речь о том как мы выполнили по сути первое в мире тематическое исследование крупнейшего хранилища open source проектов, что из этого получилось и как это повторить. docker inside!\n",
        "link": "https://habr.com/ru/post/312596/"
    },
    {
        "title": "Дайджест свежих материалов из мира фронтенда за последнюю неделю №234 (24 — 30 октября 2016)",
        "body": "Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы и интересные материалы из области фронтенда.\n\n\n",
        "link": "https://habr.com/ru/company/zfort/blog/313968/"
    },
    {
        "title": "Изучаем ActionBlock: или короткая история о противном дедлоке",
        "body": "Думаю, что практически каждый реальный проект использует ту или иную форму реализации очереди поставщик-потребитель (producer-consumer queue). Идея проблемы довольно проста. Приложению нужно развязать производство некоторых данных от их обработки. Возьмем, к примеру, пул потоков в CLR: мы добавляем элемент на обработку путем вызова ThreadPool.QueueUserWorkItem, а пул потоков сам разбирается, какое число рабочих потоков наиболее оптимально и вызывает методы для обработки элементов с нужной степенью параллелизма.\n\nНо использование стандартного пула потоков не всегда возможно и/или разумно. Несмотря на возможность указания минимального и максимального числа потоков, эта конфигурация глобальная и повлияет на приложение целиком, а не на нужные его части. Существует множество других способов решить задачу поставщика потребителя. Это может быть решение «в лоб», когда логика приложения смешивается с аспектами многопоточности, очередями и синхронизацией. Это может быть обертка над BlockingCollection с ручным управлением числа рабочих потоков или задач. Или же это может быть решение на основе полностью готового решения, такого как ActionBlock<T> из TPL DataFlow.\n\nСегодня мы рассмотрим внутреннее устройство класса ActionBlock, обсудим дизайн-решения, которые были приняты его авторами и узнаем, почему нам все это нужно знать, чтобы обойти некоторые проблемы при его использовании. Готовы? Ну тогда поехали!\n",
        "link": "https://habr.com/ru/post/319208/"
    },
    {
        "title": "Куда деваются программисты после 40",
        "body": "\n\n — Вам уже 45? Но у нас коллектив очень молодой. Вы уверены, что хотели бы у нас работать?\n — Да, конечно! Я много наслышан о вашей компании. Это мечта всей моей жизни!\n — Ну ладно. Вот вам простой вопросик. Что означает буква L в аббревиатуре SOLID?\n — Liskov Substitution Principle.",
        "link": "https://habr.com/ru/post/324426/"
    },
    {
        "title": "Выпуск Rust 1.16",
        "body": "Команда Rust рада представить выпуск Rust 1.16.0. Rust — это системный язык программирования, нацеленный на безопасность, скорость и параллельное выполнение кода.\nЕсли у вас установлена предыдущая версия Rust, то для обновления достаточно выполнить:\n$ rustup update stable\nЕсли у вас ещё не установлен Rust, то вы можете установить rustup c соответствующей страницы нашего веб-сайта и ознакомиться с подробным примечанием к выпуску 1.16.0 на GitHub.\nЧто вошло в стабильную версию 1.16.0\nСамым большим дополнением в Rust 1.16 является команда cargo check. Эта новая подкоманда в большинстве случаев должна ускорить процесс разработки.\nЧто она делает? Давайте вернёмся немного назад и поговорим о том, как rustc компилирует ваш код. Компиляция происходит в несколько \"проходов\". Это значит, что компилятор выполняет множество различных этапов, прежде чем из вашего исходного кода будет создан бинарный файл. Вы можете увидеть каждый их этих этапов (и сколько времени и памяти они занимают) передав компилятору параметр -Z time-passes (только для nightly):\n",
        "link": "https://habr.com/ru/post/324448/"
    },
    {
        "title": "ESP8266 в качестве MQTT брокера для мобильного приложения",
        "body": " Как говорится, лень — двигатель прогресса. Для облегчения жизни сейчас делаю себе небольшое устройство в виде модуля ESP8266 и преобразователя RS485 для связи с датчиками-газоанализаторами по протоколу Modbus. В производстве постоянно возникает необходимость подключаться к приборам для выполнения различного рода диагностики по 485 интерфейсу, но каждый раз тащить с собой ноутбук неудобно, а вот мобильный телефон всегда в кармане.\n\nВ процессе разработки получилась библиотека, которая позволяет подключаться напрямую с телефона к модулю и обмениваться данными через приложение MQTT клиента. Возможно кому-то такое решение тоже пригодится, ведь отпадает необходимость иметь сторонний MQTT брокер (будь то локальный брокер на Raspberry или брокер в интернете) и подключение к интернету, что в моем случае самое главное.\n",
        "link": "https://habr.com/ru/post/326794/"
    },
    {
        "title": "Дайджест свежих материалов из мира фронтенда за последнюю неделю №264 (22 — 28 мая 2017)",
        "body": "Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.\n\n",
        "link": "https://habr.com/ru/company/zfort/blog/329658/"
    },
    {
        "title": "Oracle Data Integrator. SubstitutionAPI: Порядок выполнения подстановок. Часть 2",
        "body": "Для кого эта статьяСтатья предназначена для опытных разработчиков ODI (Oracle Data Integrator). Здесь рассмотрены плохо документированные аспекты связанные с порядком выполнения BeanShell-подстановок.\nЭто продолжение Части 1.\n\nПосле того как мы разобрались с каждым уровнем BeanShell-подстановок по отдельности, посмотрим, как эти уровни согласуются друг с другом при совместном использовании. Здесь пойдет речь пока только о тесном сотрудничестве разных и одинаковых подстановок, когда они буквально проникают друг в друга. Как происходит их интерпретация, когда они вложены друг в друга?",
        "link": "https://habr.com/ru/company/raiffeisenbank/blog/332738/"
    },
    {
        "title": "Автоматическое распознавание текста в видео",
        "body": "Данная статья является переводом статьи «Automatic text recognition in digital videos» за авторством Райнера Линхарта и Франка Штубера, Университет Маннхайма, Германия.\n\nКраткий обзор\nМы занимаемся разработкой алгоритмов для автоматической сегментации символов в фильмах, которые извлекают текст из предисловия, титров и заключения. Наши алгоритмы используют стандартные символы текста в видео, чтобы повысить качество сегментации и, как следствие, эффективность распознавания. Как результат мы имеем отдельные символы из кадров. Их можно проанализировать с помощью любого ПО OCR. Результаты распознавания нескольких экземпляров одного и того же символа во всех последующих кадрах объединяются для повышения качества распознавания и для вычисления конечного результата. Мы протестировали наши алгоритмы в серии экспериментов с видеоклипами, записанными с телевизора, и достигли хороших результатов сегментации.\n",
        "link": "https://habr.com/ru/post/332840/"
    },
    {
        "title": "Избранное: ссылки по reverse engineering",
        "body": "\nВсем привет!\nСегодня мы хотели бы поделиться своим списком материалов по тематике reverse engineering (RE). Перечень этот очень обширный, ведь наш исследовательский отдел в первую очередь занимается задачами RE. На наш взгляд, подборка материалов по теме хороша для старта, при этом она может быть актуальной в течение продолжительного времени. \nДанный список ссылок, ресурсов, книг мы уже лет пять рассылаем людям, которые хотели бы попасть в наш исследовательский отдел, но не проходят пока по уровню знаний или только начинают свой путь в сфере информационной безопасности. Естественно, этому перечню, как и большинству материалов/подборок, через некоторая время потребуется обновление и актуализация. \nЗабавный факт: нам показывали, как некоторые компании рассылают наш список материалов от себя, но только в очень старой редакции. И вот после этой публикации они, наконец, смогут использовать его обновленную версию с чистой совестью ;)\nИтак, перейдем к списку материалов!",
        "link": "https://habr.com/ru/company/dsec/blog/334832/"
    },
    {
        "title": "SHA2017 CTF: Нужно больше трафика",
        "body": "\n\nВсем доброго времени суток. Только что подошел к концу SHA2017 CTF и в этой статье, я бы хотел рассмотреть решение одного интересного таска Abuse Mail (300) из раздела Network.",
        "link": "https://habr.com/ru/post/335012/"
    },
    {
        "title": "Готовимся к Java 9. Обзор самых интересных улучшений",
        "body": "\nВ эту среду, 30 августа, в офисе компании Oracle состоялась встреча JUG.ru с Олегом Шелаевым, Developer Advocate в компании ZeroTurnaround, которая делает JRebel и XRebel. Тема встречи — инструменты создания многопоточных программ на Java (от конструирования велосипедов и запуска потоков ручками, до ForkJoinPool-ов, зеленых потоков и транзакционной памяти). \nКонечно, мы поинтересовались, какие фишки Java 9 считают в ZeroTurnaround наиболее полезными. В результате, разжились статьей, которую вы сейчас читаете. Оригинал статьи Олег опубликовал в блоге RebelLabs, там есть еще много интересного.",
        "link": "https://habr.com/ru/company/jugru/blog/336864/"
    },
    {
        "title": "Stream API & ForkJoinPool",
        "body": "Продолжаем серию полезностей, которыми мы делимся с вами. Теперь уже вновь по Java.\n\nЕсли вы уже знакомы со Stream API и использовали его, то знаете, что это удобный способ обработки данных. С помощью различных встроенных операций, таких как map, filter, sort и других можно преобразовать входящие данные и получить результат. До появления стримов разработчик был вынужден императивно описывать процесс обработки, то есть создавать цикл for по элементам, затем сравнивать, анализировать и сортировать при необходимости. Stream API позволяет декларативно описать, что требуется получить без необходимости описывать, как это делать. Чем-то это напоминает SQL при работе с базами данных. \n\n\n\nСтримы сделали Java-код компактнее и читаемее. Еще одной идеей при создании Stream API было предоставить разработчику простой способ распараллеливания задач, чтобы можно было получить выигрыш в производительности на многоядерных машинах. При этом нужно было избежать сложности, присущей многопоточному программированию. И это удалось сделать, в Stream API есть методы BaseStream::parallel и Collection.parallelStream(), которые возвращают параллельный стрим.",
        "link": "https://habr.com/ru/company/otus/blog/338770/"
    },
    {
        "title": "Как IIS поддерживает нашу BI-аналитику, и в чем особенности настройки под Highload",
        "body": "\nВ аналитической части бэкенда Яндекс.Денег активно используется Microsoft IIS, и уже накопился некоторый багаж знаний о его применении в высоконагруженной среде, которым хочется поделиться.\nНаша аналитика работает на стеке Microsoft (SQL Server и продукты SSIS, SSAS, SSRS) – одном из лучших на рынке BI-решений. Раз в основе нашего BI лежат сервисы одного вендора, то логично и для размещения веб-приложений использовать решение Microsoft – IIS.\nВ статье расскажу о тех особенностях работы с запущенными на IIS приложениями, которые характерны для высоконагруженной среды.",
        "link": "https://habr.com/ru/company/yoomoney/blog/339976/"
    },
    {
        "title": "Transformer — новая архитектура нейросетей для работы с последовательностями",
        "body": "Необходимое предисловие: я решил попробовать современный формат несения света в массы и пробую стримить на YouTube про deep learning.\nВ частности, в какой-то момент меня попросили рассказать про attention, а для этого нужно рассказать и про машинный перевод, и про sequence to sequence, и про применение к картинкам, итд итп. В итоге получился вот такой стрим на час:\n\nЯ так понял по другим постам, что c видео принято постить его транскрипт. Давайте я лучше вместо этого расскажу про то, чего в видео нет — про новую архитектуру нейросетей для работы с последовательностями, основанную на attention. А если нужен будет дополнительный бэкграунд про машинный перевод, текущие подходы, откуда вообще взялся attention, итд итп, вы посмотрите видео, хорошо?\nНовая архитектура называется Transformer, была разработана в Гугле, описана в статье Attention Is All You Need (arxiv) и про нее есть пост на Google Research Blog (не очень детальный, зато с картинками).\nПоехали.",
        "link": "https://habr.com/ru/post/341240/"
    },
    {
        "title": "Расширяем функционал Ansible с помощью плагинов: часть 2",
        "body": "\nПод капотом сервиса d2c.io мы активно используем Ansible – от создания виртуальных машин в облаках провайдеров и установки необходимого программного обеспечения, до управления Docker-контейнерами с приложениями клиентов.\nВ первой части мы рассмотрели типы плагинов, которые поддерживает Ansible и сделали несколько своих плагинов: test, filter, action и callback. В этой статье попробуем более сложные модификации.",
        "link": "https://habr.com/ru/company/d2cio/blog/345216/"
    },
    {
        "title": "Парсим мемы в питоне: как обойти серверную блокировку",
        "body": "Новогодние праздники — прекрасный повод попрокрастинировать в уютной домашней обстановке и вспомнить дорогие сердцу мемы из 2k17, уходящие навсегда, как совесть Electronic Arts.\n\nОднако даже обильно сдобренная салатами совесть иногда просыпалась и требовала хоть немного взять себя в руки и заняться полезной деятельностью. Поэтому мы совместили приятное с полезным и на примере любимых мемов посмотрели, как можно спарсить себе небольшую базу\nданных, попутно обходя всевозможные блокировки, ловушки и ограничения, расставленные сервером на нашем пути. Всех заинтересованных любезно приглашаем под кат.",
        "link": "https://habr.com/ru/company/ods/blog/346632/"
    },
    {
        "title": "Январская починка дыр в .NET Framework и Core",
        "body": "Аккурат к концу новогодних каникул в России, 9-го января, Microsoft выпустили обновления, исправляющие CVE-2018-0786 и CVE-2018-0764. Починили так, что кое-где ещё и сломали. В этом коротком посте мы ещё раз вспомним, что это такое и что нам теперь делать.\nДля иллюстрации этого хабрапоста я попытался изобразить решето. Как видите, у меня не получилось. К сожалению, сделать решето в коде — гораздо проще, чем изобразить его, в первый раз взяв в руки графический планшет.\n",
        "link": "https://habr.com/ru/company/jugru/blog/346764/"
    },
    {
        "title": "Как ZFS хранит данные",
        "body": "Zfs является достаточно популярной файловой системой для долговременного хранения данных. Кроме того она обеспечивает целостность записанных данных, сохраняя вместе с данными и их контрольные суммы. Механизм контрольных сумм позволяет выявить, и при наличии избыточности восстановить, поврежденные данные.\n\nВ данной статье на практическом примере производится разбор, как и куда zfs сохраняет данные.\n\nНепосредственно для доступа к данным мы не будем использовать утилиту zdb, а попробуем с помощью radare2 посмотреть непосредственно на байты которые записаны на диске.",
        "link": "https://habr.com/ru/post/348354/"
    },
    {
        "title": "Отменяемые Promises в EcmaScript6",
        "body": "Владислав Власов, инженер-программист в Developer Soft и преподаватель курса Нетологии, специально для блога написал цикл статей о EcmaScript6. В первой части на примерах рассмотрели динамический анализ кода в EcmaScript с помощью Iroh.js. В этой статье расскажем, как реализовать отменяемые Promises.\n\nАсинхронность и планировщик событий в EcmaScript\nКонцепция Promise (обещаний) — одна из ключевых в современном EcmaScript. Promise позволяют обеспечить последовательное выполнение асинхронных действий за счет организации их в цепочки, которые вдобавок предоставляют перехват ошибок. Современный синтаксис async/await операторов технически также основан на Promise, и является лишь синтаксическим сахаром. \n\n\n\nПри всей своей богатой функциональности, Promise обладают одним недостатком — не поддерживают возможность отмены запущенного действия. Для того чтобы понять, как обойти это ограничение, необходимо рассмотреть, как возникают и функционируют асинхронные действия в EcmaScript, ведь Promise — лишь обёртка для них.",
        "link": "https://habr.com/ru/company/netologyru/blog/348632/"
    },
    {
        "title": "JavaParser. Корёжим код легко и непринуждённо",
        "body": "В мире существует множество клёвых маленьких библиотек, которые как бы и не знаменитые, но очень полезные. Идея в том, чтобы потихоньку знакомить Хабр с такими вещами. Сегодня расскажу о JavaParser.\nJavaParser — это набор инструментов для парсинга, анализа, трансформации и генерации Java-кода. Иначе говоря, если нужно взять кусок джавакода и как-то его покорёжить подручными методами и без необходимости в особых знаниях, эта либа — самое то.\nГде-то посреди статьи вы ВНЕЗАПНО можете осознать, какой кошмар и ужас можно сотворить этой либой, и никак не дождётесь дочитать текст и полить меня гневными комментариями. Не сдерживайтесь, не стоит — сразу скрольте до самого низу и изливайте душу :)\n\n",
        "link": "https://habr.com/ru/company/jugru/blog/348710/"
    },
    {
        "title": "Мониторим каналы связи посредством Juniper RPM и Zabbix",
        "body": "На написание статьи меня натолкнул этот материал — Автоматическое переключение маршрута в Juniper SRX.\nЗахотелось немного расширить тему использования RPM. Эта технология является аналогом механизма SLA в мире Cisco, и как и у Cisco предназначена больше не для переключения каналов, а для измерения характеристик каналов в реальном времени. И цель моей статьи в том, чтобы показать как результаты этих измерений можно передать в систему мониторинга Zabbix. Надеюсь, эта информация кому нибудь пригодится. Поехали.",
        "link": "https://habr.com/ru/post/349128/"
    },
    {
        "title": "Frontend на CodeFest: React, Javascript и лучшие практики",
        "body": "\n\nПродолжаем рассказывать о программе CodeFest 2018. На очереди — мощный фронт докладов фронтенд-секции.",
        "link": "https://habr.com/ru/company/codefest/blog/350050/"
    },
    {
        "title": "Как быть* компилятором — создание компилятора на JavaScript",
        "body": "Привет, Хабр! Представляю вашему вниманию перевод статьи \"How to be* a compiler — make a compiler with JavaScript\" автора Mariko Kosaka.\n\n*Все верно! Быть компилятором — это здорово!\n\nДело было одним замечательным воскресеным днем в Бушвике, Бруклин. В моем местном книжном магазине я наткнулась на книгу Джона Маэда “Design by Numbers”. Это была пошаговая инструкция по изучению DBN — языка программирования, созданного в конце 90-х в MIT Media Lab для визуального представления концепций компьютерного программирования.",
        "link": "https://habr.com/ru/post/350612/"
    },
    {
        "title": "Полный перечень intrinsic-функций в HotSpot в JDK 7, 8, 9 и 10",
        "body": "Интринсик или intrinsic-функция — функция, которую JIT-компилятор может встроить вместо вызова Java- и JNI-кода с целью оптимизации. Важный вывод из этого — intrinsic-функции не доступны в режиме интерпретатора. По умолчанию в HotSpot используется два JIT-компилятора C1 и C2, таким образом, может быть доступна реализация intrinsic-функции для каждого из JIT-компиляторов. Различия в реализации intrinsic-функций для разных JIT-компиляторов обуславливаются различным внутренним представлением кода (intermediate representation — IR).\n\nВ HotSpot реализовано несколько сотен интринсиков (их количество растёт от релиза к релизу). Описание всех intrinsic-функций можно найти в исходниках OpenJDK в файле vmSymbols.hpp. Ниже приведены полные списки интринсиков для JDK 7 (vmSymbols.hpp), JDK 8 (vmSymbols.hpp), JDK 9 (vmSymbols.hpp) и JDK 10 (vmSymbols.hpp).",
        "link": "https://habr.com/ru/post/352086/"
    },
    {
        "title": "Учебник Thymeleaf: Глава 11. Комментарии и Блоки / Blocks",
        "body": "Оглавление\n\n11 Комментарии и Блоки / Blocks\n11.1. Стандартные HTML/XML комментарии\nСтандартные HTML/XML комментарии <!--… --> можно использовать в любом месте шаблонов Thymeleaf. Все, что внутри этих комментариев, не будет обрабатываться Thymeleaf и будет скопировано дословно: ",
        "link": "https://habr.com/ru/post/352160/"
    },
    {
        "title": "DZ Online Tech: Postgres Professional",
        "body": "Привет.\n\nВ прошлом году я начал снимать серию передач/интервью на тему цифровой трансформации бизнеса (они тут, кому интересно — подписывайтесь). Эти передачи были на стыке IT и бизнеса, но, всё же, больше про бизнес.\n\nВ процессе стало понятно, что есть немало тем, которые имеют существенную глубину с программерской точки зрения. И в этом году мы начали снимать серию интервью под общим лейблом «DZ Online Tech» — теперь уже с упором на то, что под капотом. Ну и поскольку видео всем смотреть лень, конечно, эти интервью расшифровываются, и сегодня я публикую первое — с Иваном Панченко из Postgres Professional.\n\nКому интересен оригинал — вот он:\n\n\n(Ну и, кстати, я не могу поклясться, что все выпуски будут выходить в расшифровке, так что если понравилось — подписывайтесь на ютубе, туда всё приходит раньше и гарантированно.)\n\nДля тех, кто любит читать — расшифровка:\n",
        "link": "https://habr.com/ru/post/352650/"
    },
    {
        "title": "Пишем плагин для Unity правильно. Часть 1: iOS",
        "body": "\n\nКогда делаешь на Unity игры для мобильных платформ, рано или поздно придется писать часть функционала на нативном языке платформы, будь то iOS (Objective C или Swift) или Android (Java, Kotlin). Это может быть свой код или интеграция сторонней библиотеки, сама установка может заключаться в копировании файлов или распаковки unitypackage, не суть. Итог этой интеграции всегда один: добавляются библиотеки с нативным кодом (.jar, .aar, .framework, .a, .mm), скрипты на C# (для фасада к нативному коду) и Game Object со специфичным MonoBehavior для отлавливания событий движка и взаимодействия со сценой. А еще часто требуется включать библиотеки зависимостей, которые нужны для работы нативной части.\n\nВесь этот механизм интеграции обычно не вызывает проблем на чистом проекте, в котором еще нет (или мало) интеграций таких сторонних библиотек. Но когда проект разрастается, всплывает много проблем, усложняющих этот процесс, а часто дающих необходимость дополнительных модификаций и адаптирования под проект плагина, что потом выливается в увеличении сложности последующей поддержки и обновления.",
        "link": "https://habr.com/ru/company/pixonic/blog/353088/"
    },
    {
        "title": "Пузырьковый вычислитель выражений: простейший синтаксический LR-анализатор вручную",
        "body": "Приветствую уважаемое сообщество.\n\nПоследнее время я уделял некоторое внимание теме синтаксического анализа (с целью в том числе улучшить собственные знания и навыки), и у меня создалось впечатление, что почти все курсы по компиляторам начинают с математических формализмов, и требуют сравнительно высокого уровня подготовки от изучающего. Либо там используется в большом количестве формальная математическая запись, как в классической Dragon Book, в которой, например, написано:\n\n\n\nЭто может с непривычки напугать. Нет, с какого-то момента формальная запись становится удобной и даже необходимой, но для “человека с улицы”, который хотел бы, чтобы ему “на пальцах” объяснили, “в чем тут дело”, это может быть сложно. А вопрос “что такое LL и LR — анализ, и в чем между ними разница” программисты задают довольно часто (потому что не все программисты имеют формальное образование в области Computer Science, как и я, и не все из них проходили там курс по компиляторам).\n\nМне более близок подход, когда сначала мы берем задачу, пытаемся ее решить, и в процессе решения сначала вырабатываем интуитивное понимание принципа, а потом уже для этого понимания создаем математические формализмы. Поэтому я на очень простом примере в этой статье хочу показать, какая идея лежит в основе восходящего синтаксического анализа (он же bottom-up parsing, он же LR). Будем вычислять арифметическое выражение, в котором для еще большего упрощения будем поддерживать только операторы сложения, умножения и скобки (чтобы не усложнять пример отрицательными числами и поддержкой унарного минуса).\n\nПеред тем, как перейти непосредственно к задаче, напишу некоторые соображения вообще на тему синтаксического разбора.",
        "link": "https://habr.com/ru/post/357052/"
    },
    {
        "title": "Программирование — не тяжелый физический труд, но все равно отстой",
        "body": "Peter Welch\n30 апреля 2014 г.\nОб авторе. Peter Welch писатель и программист, автор книги «And Then I Thought I Was a Fish», автор блога «Still Drinking».\n\n\nИзображение: Joe Raedle/Getty Images\n\nКаждый мой друг, хотя бы дважды в неделю поднимающий на работе что-то тяжелее ноутбука, рано или поздно в разговоре невзначай бросает что-то вроде: «Бро, ты не пашешь на износ. Я только что отработал 4700-часовую неделю, копая тоннель под Мордором, используя отвертку»\n\nОни правы. Мордор — отстой, и копание тоннеля гораздо трудозатратнее, чем тыкание в клавиши, если конечно вы не муравей. Но для галочки, давайте договоримся о том, что стресс и безумие — это плохо? Отлично. ",
        "link": "https://habr.com/ru/post/357622/"
    },
    {
        "title": "Парсинг 0.5Tb xml за несколько часов. Поиск организаций в открытых данных реестра субъектов МСП ФНС",
        "body": "По роду деятельности (автоматизация процессов и разработка архитектуры информационных систем) часто приходится сталкиваться с необходимостью написать скрипт и получить результат «здесь и сейчас» для неожиданно «прилетевшей» задачи в ситуации, когда нет возможности оперативно привлечь внешних разработчиков. \n\nРешению одной из таких задач будет посвящен обзор. В какой-то момент появилась необходимость проанализировать на основе открытых данных “Единого реестра субъектов малого и среднего предпринимательства” Федеральной налоговой службы (далее Реестр МСП) динамику по месяцам количества организаций определенного вида деятельности, а именно, сельхозпредприятий. Подходы, которые использовались при ее решении, надеюсь будут полезны тем, кто ищет варианты обработки больших структурированных массивов данных XML, но распространенные средства обработки такие как SelectFromXML, он-лайн XML обработчики по каким-то причинам не подходят. Либо ограничен функционал, либо возникают проблемы при работе с кириллической кодировкой, либо не обеспечивается необходимая производительность, либо ограничены ресурсы «железа». Программисты и профессионалы надеюсь не буду слишком строги к стилю кодирования и выбору способов реализации, а критика и советы в комментариях приветствуются. \n\nИтак задача:",
        "link": "https://habr.com/ru/post/358654/"
    },
    {
        "title": "Go 1.11: AVX-512 со вкусом Go",
        "body": "\n\nВ Go 1.11 значительно обновлён ассемблер под платформу x86.\nУ программистов появится возможность использовать AVX-512 — новейшие инструкции, доступные в процессорах Intel.\nПод катом:\n\nСамые значительные обновления в cmd/asm (go tool asm)\nКак был внедрён новый набор инструкций в Go ассемблер\nИспользование новых инструкций и специальных возможностей EVEX префикса\nУровень интеграции в тулчейн (рецепты обхождения текущих ограничений)\n",
        "link": "https://habr.com/ru/post/359132/"
    },
    {
        "title": "Гадаем о причинах аварии Falcon 9",
        "body": "\n\nКак вы, наверное, уже слышали, в воскресенье на третьей минуте полета произошла авария ракеты-носителя Falcon 9 с грузовым кораблем Dragon. Надежда на то, что причину аварии найдут быстро, похоже, не оправдалась — несмотря на обилие телеметрии, видеофиксацию полета с земли и камер, установленных на самой ракете, твиттер Элона Маска 29 июня сообщил о том, что после нескольких тысяч человеко-часов работы причина по-прежнему неизвестна, и с тех пор не обновлялся. Похоже, что расследование затянется. Поэтому можно заняться увлекательным делом — пытаться угадать причину аварии по имеющейся открытой информации.\n",
        "link": "https://habr.com/ru/post/381169/"
    },
    {
        "title": "Как следует писать комментарии к коммитам",
        "body": "\n\nПредисловие от переводчика\nНа протяжении многих лет разработки ПО, будучи участником многих команд, работая с разными хорошими и опытными людьми, я часто наблюдал (да и чего греха таить, до определенного момента — создавал) одну и ту же проблему — тотальный бардак в репозитории. Каждый писал комментарии к коммитам в своем стиле (и хорошо, если постоянно в одном); половина комментариев была бесполезна (из разряда \"это мост\"), половина оставшейся половины — едва понятна.\n\nИ вот в один прекрасный момент я увидел данную статью, до перевода которой у меня наконец дошли руки. Всего 7 простых и коротких правил, и — о чудо — смотреть на историю коммитов стало не только полезно, но и приятно. Ничего революционного, все довольно очевидно, но сформулировано и резюмировано просто отлично.",
        "link": "https://habr.com/ru/post/416887/"
    },
    {
        "title": "Юнит тестирование скриптов баз данных",
        "body": "Принимая удобство в использовании юнит тестов на моем любимом С++, я попытался перенести свой опыт на TSQL, тем более что новый работодатель любит полезную инициативу на местах и раздает плюшки за оное.\n\nПросмотрел несколько известных фреймворкoв я пришел к выводу, что, как правило они громоздки и приносят дополнительных синтаксис, который надо изучать дополнительно.\n\nНекоторые фреймворки работают красиво и радуют глаз менеджера, которому их показывают, но имеют ряд ограниченией, которые мне не понравились.\n\nМне же хотелось все реализовать на чистом кошерно-халяльно-православном TSQL.",
        "link": "https://habr.com/ru/post/417569/"
    },
    {
        "title": "Приключения оператора pipeline в babel@7",
        "body": "\nВ релизе babel@7.0.0-beta52 появился новый обязательный флаг конфига для плагина @babel/plugin-proposal-pipeline-operator, что ломает обратную совместимость для предыдущих версий плагина. Из этой статьи вы узнаете, что такое оператор pipeline и зачем ему нужна конфигурация.",
        "link": "https://habr.com/ru/company/vk/blog/418125/"
    },
    {
        "title": "Контроль версий внутри SQL Server'a",
        "body": "Юля: Так, кто вчера менял мою процедуру? \nЛёша: не я\nМаксим: не я\n — Ребят, может Git заведём ?\nСерёжа: давно пора!\nпрошло 2 недели…\n\nЮля: ребяяят?\n — Юль, а ты не коммитила?\nЮля: damn нет(…\n\nВот так всё и началось. Ну а что, каждый символ и каждую строчку коммитить? \n \nА может всё это будет происходить само?) На этом моменте в голову начинают приходить \nDDL-триггеры, Temporal table и картина складывается. Решено, будем хранить версии внутри \nSQL Server'a !)\n\n\n",
        "link": "https://habr.com/ru/post/419919/"
    },
    {
        "title": "Жадный гном: Как я писал аналитику рынка в Lineage 2",
        "body": "Вот и наступила осенне-зимняя пора. За окном дожди и желания проводить время на открытом воздухе все меньше и меньше. И вот приходит мне сообщение от товарища \"А давай поиграем в Lineage 2?\". И опять я, поддавшись ностальгии, согласился. Выбрали мы свеженький сервер на ру-офе и создали персонажей. \n\n \nВ отличии от World of Warcraft в Lineage 2 совершенно другая система добычи игровой валюты. Нужно круглыми сутками охотиться на монстров с целью получения наживы. Для меня было даже открытием, что для некоторых людей RMT (Real money trading) является чем то вроде работы. Также, в игре присутствует экономика, которую формируют игроки. Иными словами, можно заработать на купи-продай или же покупать дешевые ресурсы, из них делать вещи и продавать с наценкой. Так как для нас игра остается чем то вроде отдыха именно такой способ получения игровой валюты был выбран нами.\nЧтобы покупать и продавать предметы игрок должен находиться online (Скриншот сверху). Соответсвенно, кто-то хочет побыстрее продать (дешевле) а кто-то побыстрее купить (дороже). А что если разница продать — купить положительная? Как раз этот пример и будет рассмотрен в статье как итог.\nОднако, цены на рынке достаточно нестабильны и часто меняются. По этому существует вероятность купить что то \"дешево\" и потом еще дешевле продать с отрицательной прибылью. Этого мы и стараемся избежать. В общем было решено написать систему аналитики рынка и разобраться с парочкой интересных мне технологий.\nSpoiler:\nВ статье будут использованы следующие технологии\nDocker, DigitalOcean, NodeJs, Ktor, Prometheus, Grafana, Telegram bot notification",
        "link": "https://habr.com/ru/post/429244/"
    },
    {
        "title": "Чем занимаются в департаменте R&D ABBYY: NLP Advanced Research Group",
        "body": "Чем занимаются в департаменте R&D в ABBYY? Чтобы ответить на этот вопрос, мы начинаем серию публикаций о том, как наши разработчики создают новые технологии и совершенствуют существующие решения. Сегодня расскажем про направление Natural Language Processing (NLP). \n\nМы в ABBYY занимаемся исследованиями в сфере обработки естественного языка и беремся за сложные научные задачи, для которых пока нет готовых решений. Так мы создаем инновации, которые ложатся в основу продуктов и помогают нашим заказчикам, да и нам двигаться вперед. Кстати, 24 ноября на лекции в Школе глубокого обучения при МФТИ руководитель NLP Advanced Research Group в департаменте R&D ABBYY Иван Смуров расскажет, какие в мире есть задачи по анализу текста и как современные нейросети позволяют их решать. А в этом посте Иван рассказал нам о трех задачах, которыми занимается сейчас.",
        "link": "https://habr.com/ru/company/abbyy/blog/430730/"
    },
    {
        "title": "Why anyone would bother to learn out-of-demand languages. A case study of the F# community",
        "body": "\n\nWe all hear of iconic movies, games, books or musical compositions that get vehemently praised by the community of sophisticados, professionals and critics, yet never seem to attract tangible commercial success or the attention of the wider audience. Such situations leave me deeply frustrated.\n\nWhen it comes to development, good tech also sometimes never gets into the limelight. Take F# for example. All I know about it is that it is a super-cool, yet totally unpopular language which makes it hard for developers – upon getting to know it – to get back to the languages they’re used to. \n\nI tried to find out what is the story behind this. In fact, who are the people who use it and why are they doing this if the language is out of demand in business? To find answers, I joined the Russian-speaking F# community on Telegram – our round table for the discussion.",
        "link": "https://habr.com/ru/post/432048/"
    },
    {
        "title": "Учебный курс по React, часть 1: обзор курса, причины популярности React, ReactDOM и JSX",
        "body": "Представляем вашему вниманию первые 5 занятий учебного курса по React для начинающих. Оригинал курса на английском, состоящий из 48 уроков, опубликован на платформе Scrimba.com. Возможности этой платформы позволяют, слушая ведущего, иногда ставить воспроизведение на паузу и самостоятельно, в том же окне, в котором ведётся демонстрация, экспериментировать с кодом. Курс показался нам интересным, мы решили перевести его на русский и преобразовать в формат традиционных публикаций.\n\n\n\nПолагаем, этот курс будет полезен всем, кто, что называется, «не умеет в React», но хочет научиться. В то же время, на то, чтобы превратить этот курс в обычные публикации, нужны немалые силы и время, поэтому мы, прежде чем принимать окончательное решение о запуске этого проекта, предлагаем всем желающим оценить курс и поучаствовать в опросе о целесообразности его перевода.",
        "link": "https://habr.com/ru/company/ruvds/blog/432636/"
    },
    {
        "title": "Rust новости #4 (декабрь 2018)",
        "body": "Поскольку праздники кончились, предлагаю вашему вниманию субъективную подборку ржавых новостей за декабрь. В этой подборке: безумие с растом, страшен ли раст, волна пророчеств, Rust 2018, Rust Analyzer.\n\nRust 1.31 & Rust 2018\nСамое важное событие декабря — выпуск Rust 1.31 и Rust 2018, конечно. Туда очень много всего вошло:\nредакция 2018, нелексические времена жизни, изменения системы модулей, дополнительные правила вывода времен жизни, const fn, новые инструменты, инструментальные проверки качества кода, документация, новый веб-сайт, улучшения в cargo.Изменений так много, что обзор всех не получилось запихнуть в один пост, так что через несколько дней были опубликованы вспомогательные заметки:\n\nProcedural Macros in Rust 2018 (обсуждение) — о процедурных макросах;\nTools in the 2018 edition (обсуждение) — о расширении инструментария;\n\nТакже, имеет смысл полистать мозиловский хорошо структурированный обзор/ликбез 2018й редакции языка: Rust 2018 is here… but what is it? (перевод, обсуждение).",
        "link": "https://habr.com/ru/post/435614/"
    },
    {
        "title": "Things you need to know should you want to switch from PHP to Python",
        "body": "Did you ever think that one day you had got into PHP web programming too quickly?\nSeveral years have passed already, you have gained a lot of experience and can’t think of any other ways to work with web but PHP. Perhaps, you sometimes doubt the choice you have made, but are unable to confirm your doubts here and now. At the same time, you need real examples; you want to understand the changes that may occur in particular aspects of your work.\n\nToday I will try to answer the following question: \"What if we use Python instead of PHP?\".\n\nI have asked this question myself many times. I have been using PHP for 11 years already and am a certified PHP specialist. I have mastered it so it works just the way I want. I was really puzzled by several articles that criticized PHP severely (PHP: a fractal of bad design). However, when chance came, I switched to Ruby and then to Python. Eventually, I chose the latter. Now I will try to explain how we Python guys live out there.\n\n",
        "link": "https://habr.com/ru/company/lesta_studio/blog/436180/"
    },
    {
        "title": "The VS Code Roadmap 2019 — DRAFT",
        "body": "As 2018 has come to an end, now is the time to look towards the future. We typically look out 6 to 12 months and establish topics we want to work on.\nAs we go we learn and our assessment of some of the topics listed changes. Thus, we may add or drop topics as we go.\nWe describe some initiatives as «investigations» which means our goal in the next few months is to better understand the problem and potential solutions before scheduling actual feature work. Once an investigation is done, we will update our plan, either deferring the initiative or committing to it.\nAs always, we will listen to your feedback and adapt our plans if needed.\n",
        "link": "https://habr.com/ru/company/microsoft/blog/436660/"
    },
    {
        "title": "Checklist: what had to be done before deploying microservices to production",
        "body": " This article contains a brief squeeze from my own experience and that of my colleagues, with whom I had been fighting incidents day and night. And many incidents would never have occurred if all these microservices that we love so much were written at least a little more carefully.\nUnfortunately, some programmers seriously believe that a Dockerfile with any team at all inside is a microservice in itself and can be deployed even now. Dockers are running — money are incoming. This approach turns into problems starting from performance degradation, inability to debug, service failures and ending in a nightmare called Data Inconsistency.\nIf you feel that the time has come to launch one more app in Kubernetes / ECS / whatever, then I have something to object to.",
        "link": "https://habr.com/ru/post/438186/"
    },
    {
        "title": "Generic Methods in Rust: How Exonum Shifted from Iron to Actix-web",
        "body": "The Rust ecosystem is still growing. As a result, new libraries with improved functionality are frequently released into the developer community, while older libraries become obsolete. When we initially designed Exonum, we used the Iron web-framework. In this article, we describe how we ported the Exonum framework to actix-web using generic programming.\n\n",
        "link": "https://habr.com/ru/company/bitfury/blog/439258/"
    },
    {
        "title": ".NET Reference Types vs Value Types. Part 1",
        "body": " First, let’s talk about Reference Types and Value Types. I think people don’t really understand the differences and benefits of both. They usually say reference types store content on the heap and value types store content on the stack, which is wrong.\nLet’s discuss the real differences:\n\nA value type: its value is an entire structure. The value of a reference type is a reference to an object. – A structure in memory: value types contain only the data you indicated. Reference types also contain two system fields. The first one stores 'SyncBlockIndex', the second one stores the information about a type, including the information about a Virtual Methods Table (VMT).\nReference types can have methods that are overridden when inherited. Value types cannot be inherited.\nYou should allocate space on the heap for an instance of a reference type. A value type can be allocated on the stack, or it becomes the part of a reference type. This sufficiently increases the performance of some algorithms.\n\nHowever, there are common features:\n\nBoth subclasses can inherit the object type and become its representatives.\n\nLet’s look closer at each feature.\nThis chapter was translated from Russian jointly by author and by professional translators. You can help us with translation from Russian or English into any other language, primarily into Chinese or German. \n\nAlso, if you want thank us, the best way you can do that is to give us a star on github or to fork repository  github/sidristij/dotnetbook.\n",
        "link": "https://habr.com/ru/company/clrium/blog/439486/"
    },
    {
        "title": "How does a barcode work?",
        "body": "Hi all!\n\nEvery person is using barcodes nowadays, mostly without noticing this. When we are buying the groceries in the store, their identifiers are getting from barcodes. Its also the same with goods in the warehouses, postal parcels and so on. But not so many people actually know, how it works.\n\nWhat is 'inside' the barcode, and what is encoded on this image?\n\n\n\nLets figure it out, and also lets write our own bar decoder.",
        "link": "https://habr.com/ru/post/439768/"
    },
    {
        "title": "Лучшее из мира Angular за неделю — Дайджест №2 (26 января — 7 марта)",
        "body": "\nСвежая подборка со ссылками на новости и материалы.\nПриятного чтения!",
        "link": "https://habr.com/ru/post/442870/"
    },
    {
        "title": "Memory and Span pt.2",
        "body": " \nSpan<T> usage examples\nA human by nature cannot fully understand the purpose of a certain instrument until he or she gets some experience. So, let’s turn to some examples.\nValueStringBuilder\nOne of the most interesting examples in respect to algorithms is the ValueStringBuilder type. However, it is buried deep inside mscorlib and marked with the internal modifier as many other very interesting data types. This means we would not find this remarkable instrument for optimization if we haven’t researched the mscorlib source code.\nWhat is the main disadvantage of the StringBuilder system type? Its main drawback is the type and its basis — it is a reference type and is based on char[], i.e. a character array. At least, this means two things: we use the heap (though not much) anyway and increase the chances to miss the CPU cash.\nAnother issue with StringBuilder that I faced is the construction of small strings, that is when the resulting string must be short e.g. less than 100 characters. Short formatting raises issues on performance.\nThis chapter was translated from Russian jointly by author and by professional translators. You can help us with translation from Russian or English into any other language, primarily into Chinese or German. \n\nAlso, if you want thank us, the best way you can do that is to give us a star on github or to fork repository  github/sidristij/dotnetbook.\n",
        "link": "https://habr.com/ru/company/clrium/blog/443976/"
    },
    {
        "title": "What's new in CUBA 7",
        "body": "What's new in CUBA 7\nThree years ago we announced the second publicly available major version of the framework. CUBA 6 was the game-changing version — the licensing was turned from proprietary to Apache 2.0. Those days we couldn't even guess where it was going to bring the framework in long term. CUBA community started to grow exponentially, so we have learned a lot of possible (and sometimes impossible) ways of how developers use the framework. Now we are happy to announce CUBA 7, which, we hope, will make development more coherent and joyful for all community members from those just starting their journey in CUBA and Java to skilled enterprise developers and Java experts.\n",
        "link": "https://habr.com/ru/company/haulmont/blog/444558/"
    },
    {
        "title": "Web application firewalls",
        "body": "Web application firewall\nWeb application firewalls (WAFs) are a type of intrusion detection and prevention system and might be either a hardware or software solution. It is specifically designed to inspect HTTP(s) and analyse the GET and POST requests using the appalling detection logic explained below. Web application firewall software is generally available as a web server plugin. \n\nWAF has become extremely popular and various companies offer a variety of solutions in different price categories, from small businesses to large corporations. Modern WAF is popular because it has a wide range of covered tasks, so web application developers can rely on it for various security issues, but with the assumption that this solution cannot guarantee absolute protection. A basic WAF workflow is shown below.\n\n\n\nIts main function is the detection and blocking of queries in which, according to WAF analysis, there are some anomalies, or an attacking vector is traced. Such an analysis should not make it difficult for legitimate users to interact with a web application, but, at the same time, it must accurately and timely detect any attempted attack. In order to implement this functionality, WAF developers usually use regular expressions, tokens, behavioural analysis, reputation analysis and machine learning, and, often, all these technologies are used together.\n\n\n\nIn addition, WAF can also provide other functionality: protection from DDoS, blocking of IP-addresses of attackers, tracking of suspicious IP-addresses, adding an HTTP-only flag to the cookie, or adding the functionality of CSRF-tokens. Each WAF is individual and has a unique internal arrangement, but there are some typical methods used for analysis.\n",
        "link": "https://habr.com/ru/post/446518/"
    },
    {
        "title": "Асинхронность в программировании",
        "body": "В области разработки высоконагруженных многопоточных или распределенных приложений часто возникают дискуссии об асинхронном программировании. Сегодня мы подробно погрузимся в асинхронность и изучим, что это такое, когда она возникает, как влияет на код и язык программирования, которым мы пользуемся. Разберемся, зачем нужны Futures и Promises и затронем корутины и операционные системы. Это сделает компромиссы, возникающие во время разработки ПО, более явными. \nВ основе материала — расшифровка доклада Ивана Пузыревского, преподавателя школы анализа данных Яндекса.\n",
        "link": "https://habr.com/ru/company/jugru/blog/446562/"
    },
    {
        "title": "Распознавание дат, написанных естественным языком, средствами Python3",
        "body": "Мы в компании создаем сервис, который извлекает юридические факты из переписки клиента и заказчика. Сервис вырос из одной простой идеи — мои постоянные клиенты из решили упросить работу менеджерам и создать “генератор договоров”. Первую задачу — подтягивать в договор реквизиты клиента и заказчика мы решили легко. \n\nПоявилась вторая идея — искать в переписке даты и вставлять их в техническое задание, документы, автоматически. \n\nОднако, люди редко пишут в чатах и мессенджерах даты так, чтобы их легко мог распознать алгоритм. \n",
        "link": "https://habr.com/ru/post/449184/"
    },
    {
        "title": "From High Ceph Latency to Kernel Patch with eBPF/BCC",
        "body": "\n\nThere are a lot of tools for debugging kernel and userspace programs in Linux. Most of them have performance impact and cannot easily be run in production environments. A few years ago, eBPF was developed, which provides the ability to trace the kernel and userspace with low overhead, without needing to recompile programs or load kernel modules.\n\nThere are now plenty of tools that use eBPF and in this article, we’ll explain how to write your own profiling tool using the PythonBCC library. This article is based on a real issue from the production environment. We’ll walk you through solving the problem and show how existing bcc tools could be used in some cases.",
        "link": "https://habr.com/ru/company/selectel/blog/450818/"
    },
    {
        "title": "Призрачные SQL запросы",
        "body": "Взгляните на код PHP:\n\n$user->v_useragent = 'coresky.agent';\nТакой код может спровоцировать SQL запрос UPDATE или INSERT, а может и не спровоцировать, если идентичные данные уже установлены в БД, собственно поэтому этот функционал именуется «Призрачные SQL запросы». Похожий функционал, обычно присутствует в большинстве CRM, но давайте рассмотрим, как он может быть реализован без CRM. Призрачные запросы, имеют потенциал довольно широко применяться в веб-приложениях, особенно в части конфигураций. Типичный (но не обязательно) алгоритм проходит в три этапа: чтение данных из БД, изменение данных, возможно многократное, и формирований реальных SQL запросов для обновления данных в БД. Давайте разберемся в деталях…",
        "link": "https://habr.com/ru/post/451034/"
    },
    {
        "title": "Как ускорить разжатие LZ4 в ClickHouse",
        "body": "При выполнении запросов в ClickHouse можно обратить внимание, что в профайлере на одном из первых мест часто видна функция LZ_decompress_fast. Почему так происходит? Этот вопрос стал поводом для целого исследования по выбору лучшего алгоритма разжатия. Здесь я публикую исследование целиком, а короткую версию можно узнать из моего доклада на HighLoad++ Siberia.\n\nДанные в ClickHouse хранятся в сжатом виде. А во время выполнения запросов ClickHouse старается почти ничего не делать — использовать минимум ресурсов CPU. Бывает, что все вычисления, на которые могло тратиться время, уже хорошо оптимизированы, да и запрос хорошо написан пользователем. Тогда остаётся выполнить разжатие.\n\n\n\nВопрос — почему разжатие LZ4 может быть узким местом? Казалось бы, LZ4 — очень лёгкий алгоритм: скорость разжатия, в зависимости от данных, обычно составляет от 1 до 3 ГБ/с на одно процессорное ядро. Это уже существенно больше скорости работы дисковой подсистемы. Более того, мы используем все доступные ядра, а разжатие линейно масштабируется по всем физическим ядрам.",
        "link": "https://habr.com/ru/company/yandex/blog/452778/"
    },
    {
        "title": "ІТ термины на примере процесса выращивания картошки",
        "body": "\nНедавно меня спросили, чем разработка на C# отличается от разработки на C++. В результате родилась идея объяснить значение тех или иных ИТ терминов на примере процесса выращивания картошки.",
        "link": "https://habr.com/ru/post/453006/"
    },
    {
        "title": "How to speed up LZ4 decompression in ClickHouse?",
        "body": "When you run queries in ClickHouse, you might notice that the profiler often shows the LZ_decompress_fast function near the top. What is going on? This question had us wondering how to choose the best compression algorithm. \n\nClickHouse stores data in compressed form. When running queries, ClickHouse tries to do as little as possible, in order to conserve CPU resources. In many cases, all the potentially time-consuming computations are already well optimized, plus the user wrote a well thought-out query. Then all that's left to do is to perform decompression.\n\n\n\nSo why does LZ4 decompression becomes a bottleneck? LZ4 seems like an extremely light algorithm: the data decompression rate is usually from 1 to 3 GB/s per processor core, depending on the data. This is much faster than the typical disk subsystem. Moreover, we use all available CPU cores, and decompression scales linearly across all physical cores.",
        "link": "https://habr.com/ru/company/yandex/blog/457612/"
    },
    {
        "title": "﻿How to shoot yourself in the foot in C and C++. Haiku OS Cookbook",
        "body": "The story of how the PVS-Studio static analyzer and the Haiku OS code met goes back to the year 2015. It was an exciting experiment and useful experience for teams of both projects. Why the experiment? At that moment, we didn't have the analyzer for Linux and we wouldn't have it for another year and a half. Anyway, efforts of enthusiasts from our team have been rewarded: we got acquainted with Haiku developers and increased the code quality, widened our error base with rare bugs made by developers and refined the analyzer. Now you can check the Haiku code for errors easily and quickly.\n\n",
        "link": "https://habr.com/ru/company/pvs-studio/blog/461253/"
    },
    {
        "title": "Модели дженериков и метапрограммирования: Go, Rust, Swift, D и другие",
        "body": "\nВ некоторых сферах программирования нормально хотеть написать такую структуру данных или алгоритм, которые могут работать с элементами разных типов. Например, список дженериков или алгоритм сортировки, которому нужна только функция сравнения. В разных языках предложены всевозможные способы решения этой задачи: от простого указания программистам на подходящие общие функции (С, Go) до таких мощных систем дженериков, что они стали полными по Тьюрингу (Rust, C++). В этой статье я расскажу о системах дженериков из разных языков и их реализации. Начну с решения задачи в языках без подобной системы (вроде С), а затем покажу, как постепенное добавление расширений приводит к системам из других языков.",
        "link": "https://habr.com/ru/company/vk/blog/461321/"
    },
    {
        "title": "Get to Know the PVS-Studio Static Analyzer for Java",
        "body": "Over the years, the PVS-Studio team has been developing the same-name static analyzer. At this point the analyzer represents a complex software solution, which provides the analysis of such programming languages, as C, C++, C# and Java on Windows, Linux and macOS platforms. Just recently the Java language joined the ranks of supported languages. The PVS-Studio analyzer has proved itself as a reliable tool among C++ and C# developers in quite some time, whereas for Java audience PVS-Studio is still a newcomer. Many haven't even heard of the analyzer, and those who had, aren't quite familiar with all its abilities. So in this article, I'd like to introduce PVS-Studio Java to you, talk about the ways to start it and its abilities. \n\n",
        "link": "https://habr.com/ru/company/pvs-studio/blog/462267/"
    },
    {
        "title": "Family tree inside Git",
        "body": "Happy programmer's day! I wish you more bright commits, merged pull requests, less merge conflicts, and that your life branches remain relevant as long as possible. As a conceptual gift, I propose the implementation of a family tree by means of the Git version control system. Well… sounds like a plan!\n\nFor those who have immediately understood everything, I give links to the source code: GenealogyTreeInGit and family trees: mine and US presidents.\nIn addition, I implemented a simple social graph. It displays not only the degree of kinship, but also the status of relations between descendants, events such as wedding, divorce, childbirth, as well as contributions to the relations.",
        "link": "https://habr.com/ru/post/465959/"
    },
    {
        "title": "Lessons learned from testing Over 200,000 lines of Infrastructure Code",
        "body": "\nIaC (Infrastructure as Code) is a modern approach and I believe that infrastructure is code. It means that we should use the same philosophy for infrastructure as for software development. If we are talking that infrastructure is code, then we should reuse practices from development for infrastructure, i.e. unit testing, pair programming, code review. Please, keep in mind this idea while reading the article.\nRussian Version",
        "link": "https://habr.com/ru/post/467169/"
    },
    {
        "title": "GitHub запускает свои щупальца в CI/CD и менеджмент артефактов",
        "body": "В мае 2019 года GitHub анонсировала выход сервиса Package Registry. Вслед за этим, уже в августе, была анонсирована поддержка CI/CD в Actions.\nВ статье я расскажу, что это за сервисы и как это можно использовать на примере небольшого пет-проекта на GitHub.\n",
        "link": "https://habr.com/ru/post/468345/"
    },
    {
        "title": "Технический анализ эксплойта checkm8",
        "body": "\nС большой вероятностью вы уже слышали про нашумевший эксплойт checkm8, использующий неисправимую уязвимость в BootROM большинства iDevice-ов, включая iPhone X. В этой статье мы приведем технический анализ эксплойта и разберемся в причинах уязвимости. Всем заинтересовавшимся — добро пожаловать под кат!",
        "link": "https://habr.com/ru/company/dsec/blog/471668/"
    },
    {
        "title": "PEG парсеры",
        "body": "Несколько лет назад меня кто-то спросил имеет ли смысл превести Python на PEG-парсер (или на грамматику PEG; я не помню точно кто и когда это было). Тогда я немного посмотрел на него, но так и не пришёл к какому-либо выводу, а потому и отбросил эту тему. Недавно я узнал больше о PEG (Parsing Expression Grammars, грамматике по парсингу выражений), и теперь я думаю, что это интересная альтернатива самописному генератору парсеров, который был разработан 30 лет назад, когда только начинал работать над Python. Я назвал его «pgen», и это был, наверно, первым фрагментом кода, который я написал для Python.\nСодержание серии статей о PEG-парсере в Python\nPEG парсеры\nРеализация PEG парсера\nГенерация PEG парсера\nВизуализация работы PEG парсера\nЛеворекурсивные PEG грамматики\nДобавление экшенов в грамматику PEG\nМета-грамматика для PEG парсера\nРеализация остальных возможностей PEG\nPEG на Core Developer Sprint\n\nПричина, по которой я сейчас заинтересован в парсере PEG, заключается в том, что меня несколько раздражают ограничения pgen. Он построен на собственной реализации LL(1), которая имеет ряд допущений. Например, мне не нравились грамматические правила, которые могли бы генерировать пустые строки, поэтому я запретил их. И тем самым упростил алгоритм для создания таблиц синтаксического анализа. Я также изобрёл свою собственную EBNF-подобную грамматическую нотацию, которая мне до сих пор очень нравится.",
        "link": "https://habr.com/ru/post/471860/"
    },
    {
        "title": "Security Week 43: тайная жизнь IoT-ханипотов",
        "body": "«Лаборатория Касперского» выпустила новое исследование атак на IoT-устройства, в котором достаточно подробно описаны как методы сбора информации о подобных атаках, так и результаты. Статистика собирается с так называемых «ханипотов — устройств, которые с разной степенью достоверности изображают для атакующих настоящий роутер, IP-камеру или что-то еще. Основные цифры исследования приведены в этой новости: в среднем на каждый ханипот производилось 20 тысяч атак каждые 15 минут. Всего за первую половину 2019 года было зафиксировано 105 миллионов атак только по протоколу Telnet, но исходила вредоносная активность всего с 276 тысяч IP-адресов. \n\n\n\nЧаще всего атаки инициировались с хостов, расположенных в Китае, Бразилии, а также в Египте и России. Количество уникальных IP-адресов по сравнению с прошлым годом снизилось, при этом интенсивность атак выросла: некоторые зараженные устройства настраиваются так, что постоянно отправляют запросы, пытаясь расширить сеть зомби-IoT. Под атаками в исследовании понимаются как сложные попытки взлома с применением эксплойтов, так и примитивный перебор паролей.\n",
        "link": "https://habr.com/ru/company/kaspersky/blog/472426/"
    },
    {
        "title": "Analyzing the Code of ROOT, Scientific Data Analysis Framework",
        "body": "While Stockholm was holding the 118th Nobel Week, I was sitting in our office, where we develop the PVS-Studio static analyzer, working on an analysis review of the ROOT project, a big-data processing framework used in scientific research. This code wouldn't win a prize, of course, but the authors can definitely count on a detailed review of the most interesting defects plus a free license to thoroughly check the project on their own.\n\nIntroduction\n\nROOT is a modular scientific software toolkit. It provides all the functionalities needed to deal with big data processing, statistical analysis, visualisation and storage. It is mainly written in C++. ROOT was born at CERN, at the heart of the research on high-energy physics. Every day, thousands of physicists use ROOT applications to analyze their data or to perform simulations.",
        "link": "https://habr.com/ru/company/pvs-studio/blog/472492/"
    },
    {
        "title": "Краткий путеводитель по математике для иностранцев",
        "body": "\nО чем это\nА как можно на четвёртом десятке и с аверсией к алгебре наверстать требуемый материал первых курсов университета?\n\nБезумству храбрых поем мы песню!Целевой аудиторией Путеводителя являются те, кто внезапно заинтересовался математикой или чувствует потребность повысить свою профессиональную эффективность, но по какой-либо причине не имеет возможности отдать несколько лет своей жизни академическому образованию. Если у вас возникла потребность разобраться, но фундаментальных знаний катастрофически не хватает, и вы чувствуете себя иностранцем в стране математики, где говорят на непонятном языке, попробуйте пройти этот путь в качестве туриста. Весь маршрут представляет собой обзорную экскурсию и рассчитан на несколько дней, максимум две недели. Для сравнения: полный академический курс составляет около пяти лет. Конечной целью предлагаемого маршрута является знакомство с принципами одного узкоспециального раздела — эллиптической криптографии. Однако до конца идти не обязательно, если этот раздел лежит вне сферы ваших интересов или вы столкнулись с серьезными трудностями или опасностями. Но, раз уж вы взяли в руки Путеводитель, всё же постарайтесь дойти хотя бы до конца раздела «Язык формул».\nПодобно словарю, этот путеводитель можно использовать и для обратного перевода. Возможно, он пригодится математикам, которые вынуждены контактировать и тесно сотрудничать с нематематиками, постоянно преодолевая пропасть непонимания. Дело это представляется настолько трудным, что строчка Максима Горького в эпиграфе является универсальным ответом обеим сторонам. В любом случае я надеюсь на обратную связь и постараюсь пополнять наши знания о том, почему нас не понимают, и как это можно исправлять.\nА теперь, зная, что царских дорог здесь нет, попробуем проложить хотя бы туристическую тропинку.",
        "link": "https://habr.com/ru/post/473000/"
    },
    {
        "title": "34 open source библиотеки Python (2019)",
        "body": "\nМы просмотрели и сравнили 10 000 open source библиотек для Python и выбрали 34 самые полезные.\n\n\nМы сгруппировали эти библиотеки в 8 категорий.",
        "link": "https://habr.com/ru/company/edison/blog/474622/"
    },
    {
        "title": "Announcing .NET Core 3.1",
        "body": "We’re excited to announce the release of .NET Core 3.1. It’s really just a small set of fixes and refinements over .NET Core 3.0, which we released just over two months ago. The most important feature is that .NET Core 3.1 is an long-term supported (LTS) release and will be supported for three years. As we’ve done in the past, we wanted to take our time before releasing the next LTS release. The extra two months (after .NET Core 3.0) allowed us to select and implement the right set of improvements over what was already a very stable base. .NET Core 3.1 is now ready to be used wherever your imagination or business need takes it.\n\nYou can download .NET Core 3.1, for Windows, macOS, and Linux:\n\n\n.NET Core 3.1 SDK and Runtime\nDocker container images\nSnap installer\n\nASP.NET Core and EF Core are also being released today.\n\nVisual Studio 2019 16.4 was also released today and includes .NET Core 3.1. It is a required update to use .NET Core 3.1 with Visual Studio. For Visual Studio 2019 users, we recommend simply updating Visual Studio to 16.4 and instead of separately downloading .NET Core 3.1.\n\nVisual Studio for Mac also supports and includes .NET Core 3.1, in the Visual Studio for Mac 8.4 Preview channel. You will need to opt into the Preview channel to use .NET Core 3.1.\n\nRelease notes:\n\n\n.NET Core 3.1 release notes\nGitHub issue for .NET Core 3.1 issues\nGitHub release\n\n",
        "link": "https://habr.com/ru/company/microsoft/blog/478896/"
    },
    {
        "title": "Вышел .NET Core 3.1",
        "body": "Мы рады объявить о выпуске .NET Core 3.1. Это действительно небольшое обновление, в основном призванное устранить проблемы версии .NET Core 3.0, которую мы выкатили пару месяцев назад. Самое важное о .NET Core 3.1 — это релиз долгосрочной поддержки (LTS) и мы будем поддерживать эту версию как минимум в течение 3 лет. Как и в прошлом, мы не хотели торопиться с выпуском нового релиза LTS. Дополнительные два месяца (после выхода .NET Core 3.0) позволили нам выбрать и реализовать правильный набор улучшений по сравнению с уже стабильной версией. .NET Core 3.1 теперь полностью готов к использованию в чем угодно, на что только способно ваше воображение.\n\nВы можете скачать .NET Core 3.1для Windows, macOS, и Linux:\n\n\n.NET Core 3.1 SDK и Runtime\nОбразы контейнеров Docker\nУстановщик Snap\n\nASP.NET Core и EF Core также стали общедоступны.\n\nVisual Studio 2019 16.4 также теперь доступна и включает в себя .NET Core 3.1. Это необходимое обновление для использования .NET Core 3.1 с Visual Studio. Пользователям Visual Studio 2019 мы рекомендуем просто обновить Visual Studio до 16.4 вместо отдельного скачивания .NET Core 3.1.\n\nVisual Studio для Mac также поддерживает и включает в себя .NET Core 3.1, пробуйте Visual Studio для Mac 8.4 Preview.\n\nЗаметки релиза:\n\n\nЗаметки о релизе .NET Core 3.1\nСтраница GitHub для описания проблем с .NET Core 3.1\nРелиз на GitHub\n\n",
        "link": "https://habr.com/ru/company/microsoft/blog/478926/"
    },
    {
        "title": "Туториал из руководства по Ember.js. Приложение Super Rentals. Часть 1.2",
        "body": "Продолжаем публиковать перевод туториала из официального руководства Ember.js. Туториал состоит из двух частей и это вторая половина первой части туториала. Напоминаем, что первую половину вы можете прочитать по этой ссылке\nСписок тем, которые покрывает туториал внушает:\n\nИспользование Ember CLI\nНавигация по структуре файлов и папок приложения Ember\nСоздание и связь между страницами\nШаблоны (templates) и компоненты\nАвтоматизированное тестирование\nРабота с данными сервера\nДинамические сегменты в маршрутах\nСервисы в Ember\nБиблиотека Ember Data\nАдаптеры и сериализаторы\nПаттерн компонента-провайдера\n\nСадитесь поудобнее, открывайте терминалы, находите проект на своем компьютере и давайте двигаться дальше. И помните, что если у вас возникнут трудности, всегда можно попросить помощи в Discord канале сообщества (на русском канал #lang-russian), а также в русскоязычном телеграмм канале ember_js",
        "link": "https://habr.com/ru/post/482390/"
    },
    {
        "title": "Анализатор исходного кода Microsoft Application Inspector",
        "body": "\n\nКомпания Microsoft выпустила «Microsoft Application Inspector», кросс-платформенный опенсорсный (!) инструмент для анализа исходного кода. ",
        "link": "https://habr.com/ru/post/484800/"
    },
    {
        "title": "Developing a symbolic-expression library with C#. Differentiation, simplification, equation solving and many more",
        "body": "Hello!\n\n[UPD from 12.06.2021: if you're looking for a symbolic algebra library, AngouriMath is actively developed. It's on Github and has a website. Discord for questions]\n\nWhy does programming a calculator seem to be a task, which every beginner undertakes? History might have the answer — computers were created for this exact purpose. Unlike the beginners, we will develop a smart calculator, which, although won't reach the complexity of SymPy, will be able to perform such algebraic operations as differentiation, simplification, and equations solving, will have built-in latex support, and have implemented features such as compilation to speed up the computations.\n\n\n                        What are the articles about?\n                        It will superficially tell about assembling an expression, parsing from a string, variable substitution, analytic derivative, equation numerical solving, and definite integration, rendering to LaTeX format, complex numbers, compiling functions, simplifying, expanding brackets, and blah blah blah.\nFor those who urgently need to clone something, repository link.\n\n                    \nLet's do it!",
        "link": "https://habr.com/ru/post/486496/"
    },
    {
        "title": "Теория графов в машинном обучении для самых маленьких",
        "body": "Сложность представления данных для глубокого обучения растет с каждым днем. Нейронные сети на основе данных в виде графа (Graph Neural Network, GNN) стали одним из прорывов последних лет. Но почему именно графы набирают все большую популярность в машинном обучении?\nКонечной целью моего повествования является общее представление графов в приемах машинного обучения. Статья не претендует на научную работу, которая в полной мере описывает всю мощь представления графов, а лишь знакомит читателя с этим удивительным и сложным миром. Публикация отлично подойдет, как для закаленных в боях профессионалов, которые еще не знакомы с представлением графов в глубоком обучении, так и для новичков в этой сфере.",
        "link": "https://habr.com/ru/post/487138/"
    },
    {
        "title": "Идеальный SAST. Парсер",
        "body": "Цикл статей посвящен описанию оптимального подхода для реализаций инструментов статического анализа кода, рассчитан на специалистов. Целью работы являются подходы, модели и методики для получения максимальной производительности инструмента при минимизации трудоемкости разработки и поддержки/изменения инструмента. В данной статье рассматривается способ ускорения работы парсера и снижения потребления памяти. Статья построена таким образом, что читатель прочел руководство написанное Терренсом Парром.",
        "link": "https://habr.com/ru/post/487716/"
    },
    {
        "title": "Как мы оптимизировали наш DNS-сервер с помощью инструментов GO",
        "body": "В преддверии старта нового потока по курсу «Разработчик Golang» подготовили перевод интересного материала.\n\n\n\nНаш авторитативный DNS-сервер используют десятки тысяч веб-сайтов. Мы ежедневно отвечаем на миллионы запросов. В наши дни DNS-атаки становятся все более и более распространенными, DNS является важной частью нашей системы, и мы должны убедиться, что мы можем хорошо работать под высокой нагрузкой.\n\ndnsflood — это небольшой инструмент, способный генерировать огромное количество udp запросов.\n\n# timeout 20s ./dnsflood example.com 127.0.0.1 -p 2053\nМониторинг систем показал, что использование памяти нашим сервисом росло так быстро, что нам пришлось остановить его, иначе мы столкнулись бы с OOM ошибками. Это было похоже на проблему утечки памяти; существуют различные причины «похожих на» и «реальных» утечек памяти в go:",
        "link": "https://habr.com/ru/company/otus/blog/487934/"
    },
    {
        "title": "Teaching folks to program 2019, a.k.a. in the search of an ideal program: Sequence",
        "body": "\nHi, my name is Michael Kapelko. I'm a professional software developer. I'm fond of developing games and teaching folks to program.\nPreface\nAutumn 2019 was the third time I participated as one of the teachers in the course to teach 10-15-year-old folks to program. The course took place from mid. September to mid. December. Each Saturday, we were studying from 10 AM to 12 PM. More details about the structure of each class and the game itself can be found in the 2018 article.\nI have the following goals for conducting such courses:\n\ncreate a convenient tool to allow the creation of simple games, the tool interested folks of 10 years old or older can master;\ncreate a program to teach programming, the program interested folks of 10 years old or older can use themselves to create simple games.\n",
        "link": "https://habr.com/ru/post/488174/"
    },
    {
        "title": "Спор о первом языке программирования: окончательное решение",
        "body": "Некоторые относятся к спору о выборе первого языка программирования примерно так:\n\n\n\nГоворят, на выбор влияет миллион фаторов и спорить по этому поводу не имеет никакого смысла. Тем не менее, холивары продолжаются.\n\nВиталий Брагилевский решил поставить точку и на Saint AppsConf представил окончательное решение. После прочтения статьи (или просмотра доклада) вы будете знать, как правильно отвечать родственникам или знакомым, которые узнали, сколько зарабатывают в IT и что удалёнка тут не помеха, и теперь интересуются, с чего же начать.\n\n",
        "link": "https://habr.com/ru/company/oleg-bunin/blog/488200/"
    },
    {
        "title": "В поисках «Годзиллы». Нейросети и прогнозирование котировок на основе биржевых и «внешних» данных",
        "body": "\nЭта работа вдохновлена статьей «Мечтают ли нейросети об электроденьгах?», где автор без преувеличения талантливо в своей доходчивости объясняет, почему использование искусственных нейросетей на голых биржевых данных не приводит к успеху. Вот особенно, на мой взгляд, удачный отрывок: \n«Цена не формирует сама себя… Если рынок выразить как метафоричное озеро, то биржевой график это лишь рябь на воде. Может быть это ветер подул, может камень в воду бросили, может рыбы плеснула, может Годзилла прыгает в 200 километрах на батуте. Мы видим лишь рябь.»Действительно, пытаться предсказать поведение ряби на следующий день, имея в распоряжении только лишь данные о поведении ряби в прошлом, видится, как минимум, самонадеянным. Не тот масштаб модели. Поведение водной глади формируется за счет множества внешних и внутренних по отношению к водоему факторов. И вот на этом моменте мое любопытство не позволило мне пройти мимо. А что если все-таки поработать с этими факторами? Что получится, если учесть их в модели данных, предназначенных для «кормежки» нейросети? \n«Но как же учесть миллионы, если не миллиарды возможных факторов влияющих на наш метафорический водоем?» — спросите вы. А я отвечу, что нас не интересуют ни движение мальков, ни случайно упавший с близлежащей скалы камушек, ни мерное покачивание удочки Дяди Вити-рыбака. Нас интересует Годзилла.",
        "link": "https://habr.com/ru/post/489582/"
    },
    {
        "title": "Структурированный протокол обмена данных Protobuf или JSON во фронтенде?",
        "body": "\n\nВ новом проекте в нашей команде мы выбрали frontend framework VUE для нового продукта, бэкенд написан на PHP, и уже как 17 лет успешно работает.\n\nКогда код начал разрастаться, нужно было думать над упрощением обмена данных с сервером, об этом я и расскажу.",
        "link": "https://habr.com/ru/post/489916/"
    },
    {
        "title": "Eliminating Render-Blocking JavaScript and CSS on WordPress",
        "body": "Outstanding loading speed is an essential website feature for a high ranking in SERP (Search Engine Result Pages). PageSpeed Insights by Google is an excellent tool for precisely that — optimizing your website’s loading speed. Let’s say you’re using this tool and get the “Eliminate render-blocking JavaScript and CSS in above-the-fold content” warning. No need to worry! In this tutorial, I will show you how to address the issue.",
        "link": "https://habr.com/ru/post/490218/"
    },
    {
        "title": "WordPress. «Render-Blocking JavaScript and CSS». Как это исправить?",
        "body": "Скорость загрузки — очень важный фактор, влияющий на рейтинг сайта на SERP (Search Engine Result Page), или на странице результатов поиска. PageSpeed Insights от Google — отличный инструмент для оптимизации скорости загрузки вашего веб-сайта. Он не только показывает текущую скорость, но и определяет проблемы, которые тормозят ваш ресурс. В этом руководстве мы покажем, как устранить одну из наиболее частых проблем, с которой вы можете столкнуться, тестируя ваш сайт. Так что, если вы увидели предупреждение: “Eliminate render-blocking JavaScript and CSS in above-the-fold content”, — не волнуйтесь, решение в этой статье.",
        "link": "https://habr.com/ru/post/490274/"
    },
    {
        "title": "Весь Хабр в одной базе",
        "body": "Добрый день. Прошло уже 2 года с момента написания последней статьи про парсинг Хабра, и некоторые моменты изменились. \nКогда я захотел иметь у себя копию хабра, я решил написать парсер, который бы сохранил весь контент авторов в базу данных. Как это вышло и с какими ошибками я встретился — можете прочитать под катом.",
        "link": "https://habr.com/ru/post/490820/"
    },
    {
        "title": "Discover Unmatched Potential of Java for Your Next App",
        "body": "\n\nOne of the most popular programming languages for a decade, Java has been the top choice and preference of most software application development companies. More and more businesses are looking forward to leveraging the potential of the Java language. How can they not? The websites, web apps, mobile apps all could be developed easily using the language. From small, easy to complex apps, Java is the best-suited as it is robust, reliable, and user-friendly programming language.",
        "link": "https://habr.com/ru/post/491160/"
    },
    {
        "title": "Будут ли большие данные выполнять свои обещания?",
        "body": "От переводчика\nЭто перевод доклада ведущего экономиста Банка Англии о возможностях использования больших данных в деятельности указанной организации. Оригинальное название «Will Big Data Keep Its Promise?» от 30 апреля 2018 года.\n\nМного говорят о Big Data, но, лично у меня, очень часто возникает впечатление, что нам как аборигенам в набедренных повязках, навязывают ничего не стоящие побрякушки. Этот доклад, на мой взгляд, подтверждает, что на самом деле, работа с Big Data достаточно сложный процесс, но продуктивный.\n\nКонечно, этот доклад очень сильно отличается от того, что нам рассказывают, так как, сами понимаете, что этот доклад рассчитан на другую аудиторию. Качество, на мой взгляд, образцовое. В совокупности статуса организации «Bank of England» и специалиста, который представил эти результаты, становится понятно как, в немалых случаях, можно использовать анализ Big Data. Его некоторые выводы, в небольших формулировках, можно сформулировать следующим образом:\n\n\nочень тщательно необходимо определять направление и уровень декомпозиции данных на примере действий Швейцарского Банка;\nв существенном количестве случаев ценность может оказаться в новых результатах, на примере формирования формулировок управляющих документов Банка Англии.\n\nО некоторых результатах, когда игровая индустрия может заменить метод «Монте-Карло» он только намекает.\n\nПеревод машинный, с небольшими правками, чтобы не резало слух после ката.",
        "link": "https://habr.com/ru/post/491640/"
    },
    {
        "title": "CVE-2019-18683: Эксплуатация уязвимости в подсистеме V4L2 ядра Linux",
        "body": "В данной статье описана эксплуатация уязвимости CVE-2019-18683 в ядре Linux, которую я обнаружил и исправил в конце 2019 года. Указанный CVE-идентификатор присвоен нескольким аналогичным ошибкам типа «состояние гонки», которые присутствовали в подсистеме V4L2 ядра Linux на протяжении пяти лет. Пятнадцатого февраля я выступил с докладом по данной теме на конференции OffensiveCon 2020 (ссылка на презентацию).\nДалее я детально объясню, как работает разработанный мной прототип эксплойта (PoC exploit) для микроархитектуры x86_64. Данный эксплойт выполняет локальное повышение привилегий из контекста ядерного потока, где отсутствует отображение пользовательского адресного пространства. В статье также показано, как эксплойт для Ubuntu Server 18.04 обходит следующие средства защиты: KASLR, SMEP и SMAP.\nНачнем с демонстрации работы эксплойта.\n",
        "link": "https://habr.com/ru/company/pt/blog/491756/"
    },
    {
        "title": "Продолжаем упарываться многоэтажными С++ными шаблонами в RESTinio: безопасная по типам альтернатива express-js роутеру",
        "body": "\nRESTinio, наш небольшой встраиваемый HTTP-сервер, продолжает развиваться. Одной из отличительных особенностей RESTinio является то, что в его реализации активнейшим образом используются многоэтажные C++ные шаблоны (о чем уже рассказывалось ранее: 1, 2).\nC++ные шаблоны в RESTinio задействованы не ради любви к искусству, а потому, что именно шаблоны являются основным способом достижения главной цели, преследуемую при разработке RESTinio: получить удобный в использовании и гибко настраиваемый инструмент, который был бы при этом и достаточно производительным.\nОдной из составляющих удобства использования библиотеки является сложность (а лучше и невозможность) совершения глупых ошибок, возникновение которых можно обнаружить лишь в run-time. Как раз об очередном нововведении в RESTinio, которое и служит цели защиты пользователя от непреднамеренных ошибок и опечаток, и пойдет речь в этой статье. А также о некоторых деталях реализации этих нововведений для тех, кого привлекает темная сторона силы кому интересны технические подробности.\neasy_parser_router как альтернатива express-router-у\nexpress-router и что с ним не так?\nРоутер запросов по мотивам известного ExpressJS фреймворка появился в RESTinio довольно давно, пару лет назад. Штука это неплохая, хорошо знакомая многим разработчикам, поэтому достаточно легко осваиваемая и широко применяемая. Но, к сожалению, пришедшая из мира динамически-типизированных языков. И, посему, унаследовавшая ряд присущих динамике родовых травм.",
        "link": "https://habr.com/ru/post/497508/"
    },
    {
        "title": "Алгоритм распознавания номера на изображении с низкой вероятностью ошибки второго рода",
        "body": "\nВ индустрии существует целый ряд кейсов, требующих распознавания номера по фотографии\n(scene number recognition). Часто требуемым условием для алгоритма распознавания является низкое значение ошибки второго рода, а именно случаи, когда распознается неверный номер. В качестве примера таких задач можно привести:\n\nРаспознавание номера на скидочных, банковских картах, рисунок 1.\nРаспознавание номера автомобиля, рисунок 2.\n\n\nРисунок 1 – Карта лояльности\nРисунок 2 – Изображение, содержащее регистрационный номер в низком качестве\nСреди проблем, связанных с распознаванием номера, можно выделить:\n\nБольшое разнообразие шрифтов;\nОтсутствие зависимости между предыдущими и последующими символами номера (в отличие от задачи распознавания текста);\nВысокий уровень шумов по причине того, что съемка ведется в различных условиях освещенности, с разного оборудования и т.д.\n\nЗадача\nРазработать алгоритм распознавания номера на изображении (scene number recognition) при обязательном условии: ошибка второго рода должна быть не больше 0.03.",
        "link": "https://habr.com/ru/post/501436/"
    },
    {
        "title": "Go, Vue и 3 дня на разработку: система реального времени для мониторинга пациентов",
        "body": "В ноябре 2019 года люди услышали о первых случаях неизвестной смертельно опасной болезни в Китае. Теперь все знают о том, что эта болезнь называется COVID-19. Видимо, эпидемия навсегда изменила тот мир, который мы знали. Вирус опасен и очень заразен. И человечество пока не особенно много знает о нём. Очень надеюсь, что скоро будет найдено лекарство от этой болезни.\n\n\n\nПрирода вируса такова, что очень сложно помешать его распространению. В Шри-Ланке, где я живу, мы столкнулись с такой же ситуацией, с которой столкнулись люди в других странах. Здесь я хочу рассказать о том, как программисты смогли оказать посильную помощь тем, кто сражается с болезнью лицом к лицу.",
        "link": "https://habr.com/ru/company/ruvds/blog/501646/"
    },
    {
        "title": "External Interrupts in the x86 system. Part 3. Interrupt routing setup in a chipset, with the example of coreboot",
        "body": "We continue to investigate external device interrupt routing setup in the x86 system.\n In Part 1 (Interrupt controller evolution) we looked at the theory behind interrupt controllers and all the necessary terminology. In Part 2 (Linux kernel boot options) we looked at how in practice the OS chooses between different interrupt controllers. In this part we will investigate how the BIOS sets IRQ to the interrupt controllers routing in a chipset.\n None of the modern BIOS developer companies (AwardBIOS/AMIBIOS/Insyde) open their source code. But luсkily there is coreboot — a project aimed at replacing proprietary BIOS with free firmware code. In its source code we'll see what is needed to setup the interrupt routing in a chipset.\n\n",
        "link": "https://habr.com/ru/post/501912/"
    },
    {
        "title": "How to climb a tree",
        "body": "\nRather, how to get down from it. But first things first. This article stands out a bit of the usual format of articles from PVS-Studio. We often write about checking other projects, but almost never lift the veil on our inner workings. It's time to rectify this omission and talk about how the analyzer is built from the inside. More precisely, about the most important of its parts — the syntax tree. The article will focus on the part of PVS-Studio that relates to the C and C++ languages.",
        "link": "https://habr.com/ru/company/pvs-studio/blog/502516/"
    },
    {
        "title": "HTTP headers checker",
        "body": "For any site, it is important to properly configure the HTTP headers. A lot of articles have been written on the subject of headings. Here we have summarized the lessons learned, the RFC documentation. Some of the headings are mandatory, some are obsolete, some can be confusing and contradictory. We did a parsing to automatically check the HTTP headers of the web server.\n\nCorrect HTTP headers increase security and trust in the site, including from search engines, can affect the site’s position in Yandex and Google, save server resources, reduce server load, thereby increasing the server response speed, which again affects the ranking of the site in the search, save money on payment powerful hosting, which may not be required for the site when configured correctly.",
        "link": "https://habr.com/ru/post/504990/"
    },
    {
        "title": "Собираем логи с Loki",
        "body": "\nМы в Badoo постоянно мониторим свежие технологии и оцениваем, стоит ли использовать их в нашей системе. Одним из таких исследований и хотим поделиться с сообществом. Оно посвящено Loki — системе агрегирования логов.\nLoki — это решение для хранения и просмотра логов, также этот стек предоставляет гибкую систему для их анализа и отправки данных в Prometheus. В мае вышло очередное обновление, которое активно продвигают создатели. Нас заинтересовало, что умеет Loki, какие возможности предоставляет и в какой степени может выступать в качестве альтернативы ELK — стека, который мы используем сейчас.",
        "link": "https://habr.com/ru/company/badoo/blog/507718/"
    },
    {
        "title": "Введение в асинхронное программирование на Python",
        "body": "Всем привет. Подготовили перевод интересной статьи в преддверии старта базового курса «Разработчик Python».\n\n\n\nВведение\nАсинхронное программирование – это вид параллельного программирования, в котором какая-либо единица работы может выполняться отдельно от основного потока выполнения приложения. Когда работа завершается, основной поток получает уведомление о завершении рабочего потока или произошедшей ошибке. У такого подхода есть множество преимуществ, таких как повышение производительности приложений и повышение скорости отклика. \n\n\n\nВ последние несколько лет асинхронное программирование привлекло к себе пристальное внимание, и на то есть причины. Несмотря на то, что этот вид программирования может быть сложнее традиционного последовательного выполнения, он гораздо более эффективен.",
        "link": "https://habr.com/ru/company/otus/blog/509328/"
    },
    {
        "title": "Понимаем JIT в PHP 8",
        "body": "Перевод статьи подготовлен в преддверии старта курса «Backend-разработчик на PHP»\n\n\n\nTL;DR\nКомпилятор Just In Time в PHP 8 реализован как часть расширения Opcache и призван компилировать операционный код в инструкции процессора в рантайме.\n\nЭто означает, что с JIT некоторые операционные коды не должны интерпретироваться Zend VM, такие инструкции будут выполняться непосредственно как инструкции уровня процессора.",
        "link": "https://habr.com/ru/company/otus/blog/509598/"
    },
    {
        "title": "Dark code-style academy: spoil if statement",
        "body": "\nDo you want to raise your salary? Do you want always to be in demand? Do you want to have your job as long as you want? It is absolutely real! You just need to change the way you write your code. Basically, you need to increase your job security. You have to write code which will be almost impossible to maintain for everyone except you. And in these series of articles, I will tell you how to achieve it. Welcome under the cut.",
        "link": "https://habr.com/ru/post/516822/"
    },
    {
        "title": "Common misconceptions about space-grade integrated circuits",
        "body": "Space exploration was always fascinating, and recent developments have reignited the interest to the heights never seen since the last man stood on the Moon. People argue about Mars exploration and features of spaceships as their grandparents would’ve done if the internet existed fifty years ago. I’m an electronics engineer working in the aerospace industry, so I know a thing or two about the technical background of this stuff — and I see that these things aren’t common knowledge, and people often have significantly skewed ideas about the reasons behind many things and decisions. Namely, I’d love to speak of some misconceptions about radiation hardened integrated circuits and the means of protection from radiation-induced damage.",
        "link": "https://habr.com/ru/post/518366/"
    },
    {
        "title": "Знакомство с Node-RED и потоковое программирование в Yandex IoT Core",
        "body": "\nВ этой статье я хочу разобрать один из самых популярных опенсорс-инструментов, Node-RED, с точки зрения создания простых прототипов приложений с минимумом программирования. Проверим гипотезу о простоте и удобстве таких средств, а также рассмотрим взаимодействие Node-RED с облачной платформой на примере Yandex.Cloud.",
        "link": "https://habr.com/ru/company/yandex/blog/519600/"
    },
    {
        "title": "Big Data Tools Update 11 Is Out",
        "body": "EAP 11 of the Big Data Tools plugin for IntelliJ IDEA Ultimate, PyCharm, and DataGrip is available starting today. You can install it from the JetBrains Plugin Repository or inside your IDE.\nBig Data Tools is a new JetBrains plugin that allows you to connect to Hadoop and Spark clusters and monitor nodes, applications, and jobs. It also brings support for editing and running Zeppelin notebooks inside IntelliJ IDEA and DataGrip, so you can create, edit, and run Zeppelin notebooks without ever having to leave your favorite IDE. The plugin offers smart navigation, code completion, inspections, quick-fixes, and refactoring inside notebooks.\n",
        "link": "https://habr.com/ru/company/JetBrains/blog/522778/"
    },
    {
        "title": "Modern Web-UI for SVN repositories",
        "body": " cSvn — is a web interface for Subversion repositories. cSvn is based on CGI script written in С.\n\nThis article covers installing and configuring cSvn to work using Nginx + uWsgi. Setting up server components is quite simple and practically does not differ from setting up cGit.\n\ncSvn supports Markdown files that are processed on the server side using the md4c library, which has proven itself in the KDE Plasma project. cSvn provides the ability to add site verification codes and scripts from systems such as Google Analytics and Yandex.Metrika for trafic analysis. Users who wonder to receive donations for his projects can create and import custom donation modal dialogs.\n\nInstead of looking at screenshots, it is better to look at the working site to decide on installing cSvn on your own server.\n\nIt should be noted that you can browse not only your own repositories, but also configure viewing of third-party resources via HTTPS and SVN protocols.\n",
        "link": "https://habr.com/ru/post/529264/"
    },
    {
        "title": "How static code analysis helps in the GameDev industry",
        "body": "\nThe gaming industry is constantly evolving and is developing faster than a speeding bullet. Along with the growth of the industry, the complexity of development also increases: the code base is getting larger and the number of bugs is growing as well. Therefore, modern game projects need to pay special attention to the code quality. Today we will cover one of the ways to make your code more decent, which is static analysis, as well as how PVS-Studio in practice helps in the game project development of various sizes.\n",
        "link": "https://habr.com/ru/company/pvs-studio/blog/530532/"
    },
    {
        "title": "Конфигурируем FT4232H c помощью утилиты ftdi_eeprom",
        "body": "\nFT4232H – это интегральная микросхема преобразователя USB – UART, поддерживающая режим High Speed на стороне USB и имеющая четыре порта на стороне UART. \nПодключив к этой микросхеме EEPROM-память можно задать специфические режимы работы или изменить данные производителя. \nРазберемся на примере и сконфигурируем FT4232H непосредственно в системе под управлением GNU/Linux. Делать это будем с помощью утилиты ftdi_eeprom.",
        "link": "https://habr.com/ru/post/531458/"
    },
    {
        "title": "Configuring FT4232H using the ftdi_eeprom",
        "body": "\nThe FT4232H is USB 2.0 High speed to UART IC converter. The FT4232H has four UART ports and one USB port.\nBy connecting EEPROM memory to this chip, you can set specific operating modes or change the manufacturer's data.\nLet's look at the example and configure FT4232H directly on a system running GNU/Linux. We will do this using the ftdi_eeprom.",
        "link": "https://habr.com/ru/post/531504/"
    },
    {
        "title": "ONLYOFFICE Community Server: how bugs contribute to the emergence of security problems",
        "body": "\nServer-side network applications rarely get the chance to join the ranks of our reviews of errors found in open source software. This is probably due to their popularity. After all, we try to pay attention to the projects that readers themselves offer us. At the same time, servers often perform very important functions, but their performance and benefits remain invisible to most users. So, by chance, the code of ONLYOFFICE Community Server was checked. It turned out to be a very fun review.",
        "link": "https://habr.com/ru/company/pvs-studio/blog/533494/"
    },
    {
        "title": "3D ML. Часть 6: Обзор алгоритмов семантической сегментации облака точек",
        "body": "\nМы уже успели поговорить про сверточные операторы на графах, а теперь посмотрим на реальные архитектуры.\nВ этой заметке мы сравним между собой модели глубокого обучения, направленные на решение задачи семантической сегментации облака точек, и попытаемся выяснить, какие из существующих моделей наиболее пригодны для встраивания в реальную систему сканирования пространства.",
        "link": "https://habr.com/ru/company/itmai/blog/534036/"
    },
    {
        "title": "Rust crashcourse. Правило трёх — параметры, итераторы и замыкания",
        "body": "Ниже представлен перевод одной из частей серии статей Rust Crash Course от Майкла Сноймана, которая посвящена механизмам передачи параметров, итераторам и замыканиям относительно того, как передаётся владение, и соотносится с мутабельностью и временами жизни.\n\nТак же постарался переводить максимально близко к авторскому стилю, но сократил немного междомедий и восклицаний, не сильно значимых для смысла.",
        "link": "https://habr.com/ru/post/537546/"
    },
    {
        "title": "Выступает DMN, дирижирует ZeeBe: как использовать бизнес-правила в микросервисах",
        "body": "Меня зовут Николай Первухин, я Senior Java Developer в Райффайзенбанке. Так сложилось, что единожды попробовав бизнес-процессы на Camunda, я стал адептом этой технологии и стараюсь ее применять в проектах со сложной логикой. Действительно сама идея подкупает: рисуешь процесс в удобном GUI-редакторе (моделлере), а фреймворк выполняет эти действия последовательно, соблюдая большой спектр элементов нотации BPMN.  К тому же в Camunda есть встроенная поддержка еще одной нотации — DMN (Decision Model and Notation): она позволяет в простой и понятной форме создавать таблицы принятия решений по входящим наборам данных. Но чего-то все же не хватает... Может, добавим немного скорости?",
        "link": "https://habr.com/ru/company/raiffeisenbank/blog/545492/"
    },
    {
        "title": "Пошаговая инструкция по настройке и использованию Gitlab CI + Visual Studio для сборки приложения .NET Framework",
        "body": "По натуре своей многие разработчики слишком ленивые не любят делать одно и то же действие много раз. Нам проще научить компьютер, чтобы он делал монотонные действия за нас.\nКак только кто-либо из нашей команды вносит изменения в код (читай «мерджит feature-ветку в develop»), наш билд-сервер:\n\nСобирает исходный код и установщик приложения\n\nпроставляет номер сборки, каждый раз увеличивая последнюю цифру. Например, текущая версия нашего ПО 3.3.0.202 – часть 3.3.0 когда-то ввёл разработчик (привет, SemVer), а «202» проставляется в процессе сборки.\nВ процессе анализирует качество кода (с использованием SonarQube) – и отправляет отчёт во внутренний SonarQube,\n\nСразу после сборки запускает автотесты (xUnit) и анализирует покрытие тестами (OpenCover),\n\nТакже, в зависимости от ветки, в которую были внесены изменения, могут быть выполнены:\n\nотправка сборки (вместе с changelog-ом) в один или несколько телеграм-каналов (иногда удобнее брать сборки оттуда).\nпубликация файлов в систему автообновления ПО.\n\nПод катом о том, как мы научили Gitlab CI делать за нас бОльшую часть этой муторной работы.",
        "link": "https://habr.com/ru/company/rostelecom/blog/546702/"
    },
    {
        "title": "Compilation of math functions into Linq.Expression",
        "body": "Here I am going to cover my own approach to compilation of mathematical functions into Linq.Expression. What we are going to have implemented at the end:1. Arithmetical operations, trigonometry, and other numerical functions2. Boolean algebra (logic), less/greater and other operators3. Arbitrary types as the function's input, output, and those intermediateHope it's going to be interesting!",
        "link": "https://habr.com/ru/post/546926/"
    },
    {
        "title": "Деплоим проект на Kubernetes в Mail.ru Cloud Solutions. Часть 2: настройка и запуск приложения для транскрибации видео",
        "body": "Это продолжение практикума по развертыванию Kubernetes-кластера на базе облака Mail.ru Cloud Solutions и созданию MVP для реального приложения, выполняющего транскрибацию видеофайлов из YouTube. Я Василий Озеров, основатель агентства Fevlake и действующий DevOps-инженер (опыт в DevOps — 8 лет), покажу все этапы разработки Cloud-Native приложений на K8s: от запуска кластера до построения CI/CD и разработки собственного Helm-чарта.Напомню, что в первой части статьи мы выбрали архитектуру приложения, написали API-сервер, запустили Kubernetes c балансировщиком и облачными базами, развернули кластер RabbitMQ через Helm в Kubernetes. Сейчас во второй части мы настроим и запустим приложение для преобразования аудио в текст, сохраним результат и настроим автомасштабирование нод в кластере. ",
        "link": "https://habr.com/ru/company/vk/blog/549804/"
    },
    {
        "title": "Оптимизация рабочего процесса при помощи fzf",
        "body": "Работа в оболочке включает в себя выполнение одних и тех же команд снова и снова; что меняется, так это порядок выполнения команд и их параметры. Один из способов упростить рабочий процесс — найти паттерны выполнения команд с аргументами и обернуть их в небольшие скрипты. Такой подход часто оказывается полезным, сильно упрощая работу; другой способ оптимизации рабочего процесса — понять, как добавляются параметры, и попробовать упростить сам ввод. И в преддверии старта нового потока курса Fullstack-разработчик на Python, в этом посте я расскажу о втором подходе.",
        "link": "https://habr.com/ru/company/skillfactory/blog/550470/"
    },
    {
        "title": "Finally! PVS-Studio Supports .NET 5 Projects",
        "body": "On November 10th, 2020, Microsoft released a new version of .NET Core - .NET 5. The updated platform presents many new enhancements. For example, it allows C# developers to use features the new C# 9 offers: records, relational pattern matching, etc. Unfortunately, there was a disadvantage: PVS-Studio could not analyze these projects. However (and here's the good news)... That used to be the case :) Our next release, PVS-Studio 7.13, will support projects that target .NET 5.",
        "link": "https://habr.com/ru/company/pvs-studio/blog/553602/"
    },
    {
        "title": "Настройки Windows 10: часть III, или куда приводят скрипты",
        "body": "Здравствуйте, товарищи! Прошло чуть больше полугода после выхода предыдущей статьи о Windows 10 Sophia Script — скрипте, который за прошедшие годы стал самым крупным (а их осталось всего два) опенсорс-проектом по персонализации и настройке Windows 10, а также автоматизации рутинных задач. В статье я расскажу, что изменилось с момента релиза версии, описываемой в статье от 29.09.2020, с какими трудностями мы столкнулись, и куда всё движется.",
        "link": "https://habr.com/ru/company/skillfactory/blog/553800/"
    },
    {
        "title": "Ansible-vault decrypt: обходимся без Ansible",
        "body": "Вы когда-нибудь пробовали разобраться в том, что же происходит внутри ansible-vault? А ещё лучше - не только разобраться, но и что-то сделать на основе полученных знаний? Так вот, статья именно об этом: разбираем исходники ansible, а потом пишем свой расшифровщик для ansible-vault.Язык для написания расшифровщика был выбран по принципу \"я - автор статьи, выбираю что хочу язык под задачу, исходя из технических требований\". Результат компилируется за 0.6 секунд в исполняемый файл размером 800Кб, который не требует внешних библиотек. Заинтригованы? Добро пожаловать под кат!",
        "link": "https://habr.com/ru/post/554148/"
    },
    {
        "title": "Reverse engineering: обратная разработка приложений для самых маленьких",
        "body": "Обратная разработка (англ. Reverse Engineering) - метод исследования устройств или программного обеспечения с целью понять принцип его работы или обнаружить недокументированные возможности. В информационной безопасности занимает значительную роль, благодаря ей специалисты в области ИБ могут исследовать вредоносные приложения, разбираться как они работают для последующего, например, составления сигнатур в базы антивирусов и защиты других пользователей от предстоящей цифровой угрозы. Сегодня погрузимся в основы языка Ассемблер и на примере разберем небольшой кейс по обратной разработке.",
        "link": "https://habr.com/ru/company/pentestit/blog/555590/"
    },
    {
        "title": "Шпаргалка по JS-методам для работы с DOM",
        "body": "\nОсновные источники\n\nDOM Living Standart\nHTML Living Standart\nDocument Object Model (DOM) Level 3 Core Specification\nDOM Parsing and Serialization\n\nВведение\nJavaScript предоставляет множество методов для работы с Document Object Model или сокращенно DOM (объектной моделью документа): одни из них являются более полезными, чем другие; одни используются часто, другие почти никогда; одни являются относительно новыми, другие признаны устаревшими.\nЯ постараюсь дать вам исчерпывающее представление об этих методах, а также покажу парочку полезных приемов, которые сделают вашу жизнь веб-разработчика немного легче.\nРазмышляя над подачей материала, я пришел к выводу, что оптимальным будет следование спецификациям с промежуточными и заключительными выводами, сопряженными с небольшими лирическими отступлениями.\nСильно погружаться в теорию мы не будем. Вместо этого, мы сосредоточимся на практической составляющей.\nДля того, чтобы получить максимальную пользу от данной шпаргалки, пишите код вместе со мной и внимательно следите за тем, что происходит в консоли инструментов разработчика и на странице.",
        "link": "https://habr.com/ru/company/macloud/blog/557422/"
    },
    {
        "title": "О чём не пишут в научных статьях или что на самом деле выделяет ваш маттинг?",
        "body": "Современные фоторедакторы используют нейросетевые модели маттинга/сегментации для реализации большой доли своих инструментов, таких как замена фона и боке. Приложение Lensa не стала исключением из этого правила. Но правда ли, что информации из научных статей достаточно для объяснения поведения обученных моделей для ваших приложений?В какой-то момент у нас появилась идея: “А почему бы не использовать маску маттинга для того, чтобы понимать, есть ли человек на фото или нет?” На первый взгляд, задумка кажется весьма простой в реализации, ведь раз модель умеет выделять людей, то определить по предсказанной маске, есть ли человек на фото, не должно составить труда. На практике мы столкнулись с довольно неожиданным эффектом. Оказалось, что сетка, обученная только на людях, также выделяет животных, статуи, еду и другие объекты.Меня зовут Дима, работаю в R&D отделе Prisma Labs и в этом посте хочу рассказать, чем обусловлен такой эффект и ещё как его можно использовать у себя в приложении.",
        "link": "https://habr.com/ru/company/prisma/blog/559168/"
    },
    {
        "title": "DataScience Digest — 28.05.21",
        "body": "The new issue of Data Science Digest is here! Hop to learn about the latest news, articles, tutorials, research papers, and event materials on DataScience, AI, ML, and BigData. All sections are prioritized for your convenience. Enjoy!",
        "link": "https://habr.com/ru/post/559820/"
    },
    {
        "title": "Разработка стековой виртуальной машины и компилятора под неё (часть II)",
        "body": "В первой части Разработка стековой виртуальной машины и компилятора под неё (часть I) сделал свою элементарную стековую виртуальную машину, которая умеет работать со стеком, делать арифметику с целыми числами со знаком, условные переходы и вызовы функций с возвратом. Но так как целью было создать не только виртуальную машину, но и компилятор C подобного языка, пришло время сделать первые шаги в сторону компиляции. Опыта никакого. Буду действовать по разумению.Одним из первых этапов компиляции является лексический разбор исходного кода нашего \"C подобного языка\" (кстати, надо какое-то название дать как только он станет более формальным). Задача простая - \"нарубить\" массив символов (исходный код) на список классифицированных токенов, чтобы последующий синтаксический разбор и генерация кода не вызывали сложности.",
        "link": "https://habr.com/ru/post/560986/"
    },
    {
        "title": "Твиттер Илона Маска в телеграме и с переводом на русский",
        "body": "Хочу поделиться одной моей поделкой и примерами кода, возможно, все это тоже будет полезно сообществу. В этой статье я поделюсь тем, что я сделал, чтобы читать Twitter-аккаунт Маска в удобном мне месте и имея под рукой перевод англоязычных твитов на русский. Все описания, ссылки и примеры кода также под катом",
        "link": "https://habr.com/ru/post/563088/"
    },
    {
        "title": "С++ на практике",
        "body": "\nВсе мы знаем, что С++ — мощный язык, у которого много сторонников. Но чем могут быть недовольны даже сторонники? Где сталкиваешься с неудобствами и чем они вызваны? Почему в примитивном приложении могут вылезти неожиданные сложности и чего не хватает в стандартной библиотеке? А главное, что можно сделать для улучшения ситуации?\nАнтон Полухин (antoshkka), состоящий в комитете по стандартизации C++ и работающий в «Яндекс.Такси», рассказал обо всём этом в докладе «C++ на практике». Сам доклад появился ещё в 2019-м, и с выходом C++20 что-то изменилось, но главные тезисы и вывод остались актуальны. Поэтому теперь, готовя новую конференцию C++ Russia 2021, мы решили сделать для Хабра пост на основе этого доклада. Под катом — и текст, и видеозапись. Далее повествование идёт от лица Антона.",
        "link": "https://habr.com/ru/company/jugru/blog/563988/"
    },
    {
        "title": "REST hooks for WebRTC Click to Call. Implementation experience",
        "body": "The \"Click to Call\" button on the website is an \"innovation\" that has been around for about 10 years. The technologies under the hood have changed, but the principle remains the same: someone clicks on the button on the site page, then JavaScript launches and requests access to the microphone and establishes a connection to the server — WebRTC SIP gateway. Further, the first client-server leg is a browser gateway, the second leg can be arbitrarily long and through the SIP proxy chain can eventually connect to a mobile or landline phone. Thus, the browser turns, in a sense, into a softphone and becomes a full participant in VoIP telephony.",
        "link": "https://habr.com/ru/company/flashphoner/blog/566524/"
    },
    {
        "title": "Лучшие практики написания комментариев к коду",
        "body": "\nИзвестный профессор МТИ Гарольд Абельсон сказал: «Программы нужно писать для того, чтобы их читали люди, и лишь случайно — чтобы их исполняли машины». Хотя он намеренно преуменьшил важность исполнения кода, однако подчёркивает, что у программ две важные аудитории. Компиляторы и интерпретаторы игнорируют комментарии и с одинаковой лёгкостью воспринимают все синтаксически корректные программы. У людей всё иначе. Одни программы нам воспринимать легче, чем другие, и мы ищем комментарии, которые помогут нам разобраться.\n\nЕсть множество источников информации, помогающих программистам писать более качественный код — книги, сайты, статические анализаторы. Но гораздо меньше источников посвящено повышению качества комментариев. Легко измерить их количество в программе, но качество оценить сложно, и два этих параметра не обязательно взаимосвязаны. Плохой комментарий хуже отсутствия комментария. Вот несколько правил, которые помогут вам найти золотую середину.",
        "link": "https://habr.com/ru/company/vk/blog/568610/"
    },
    {
        "title": "Cам себе облако: установка ELK и TICK стеков в Kubernetes",
        "body": "Казалось бы простая задача - развернуть Kubernetes кластер и в нем запустить централизованный мониторинг TICK стек и логирование ELK стек. Но для меня она осложнилась тем, что с этим технологиями я столкнулся впервые. Чтобы понять, как все работает, хотел пройти простые Quick Start инструкции. К своему удивлению, не нашел детальных актуальных описаний - либо отдельные статьи со своей спецификой, либо многостраничные книги по Kubernetes. Пока собирал пазл из многочисленных материалов, решил написать статью, в которой рассмотреть общую концепцию развертывания TICK и ELK стеков в Kubernetes. Для чего, вообще, решать задачу централизованного мониторинга и логирования в Kubernetes? ",
        "link": "https://habr.com/ru/post/569124/"
    },
    {
        "title": "Вышел NeoVim 0.5.0",
        "body": "Долгожданный релиз NeoVim 0.5.0 наконец-то вышел 2 июля 2021 года. Это заняло больше времени, чем кто-либо ожидал, но это того стоило. Более 4000 коммитов, это так много, что сломало некоторые инструменты выпуска. Поэтому эти заметки не смогут затронуть каждое из многочисленных изменений, которые были внесены в ходе разработки, и будут сосредоточены только на наиболее заметных  для пользователя улучшениях, самыми крупными из которых являются:Lua как превосходный язык сценариев и конфигурации.Протокол языкового сервера (Language server protocol) (LSP).Treesitter (ранний доступ).",
        "link": "https://habr.com/ru/post/569550/"
    },
    {
        "title": "Распространение консольных приложений macOS до конечных пользователей",
        "body": "Начиная с macOS 10.15 Catalina разработчикам требуется заверять свои приложения и утилиты командной строки. Если с приложениями, распространяемыми через App Store все прозрачно, то распространение консольных утилит может вызвать сложности. В данной статье я покажу, как можно доставлять такие утилиты до конечных пользователей (будем проделывать все необходимые операции в терминале, а также автоматизируем эти действия двумя вариантами - через bash-скрипт и с помощью SPM executable).",
        "link": "https://habr.com/ru/post/572970/"
    },
    {
        "title": "PVS-Studio 7.14: intermodular analysis in C++ and plugin for JetBrains CLion",
        "body": "\nThe PVS-Studio team is increasing the number of diagnostics with each new release. Besides, we are improving the analyzer's infrastructure. This time we added the plugin for JetBrains CLion. Moreover, we introduced intermodular analysis of C++ projects and speeded up the C# analyzer core.",
        "link": "https://habr.com/ru/company/pvs-studio/blog/573100/"
    },
    {
        "title": "Делаем быстрый поиск по неточному совпадению среди 100 миллионов товаров",
        "body": "Это четвертая статья с этой картинкой для привлечения внимания. Она каким-то удивительным образом опять подошла по смыслу.Мы делаем проект по управлению большими каталогами товаров, и нам потребовалось быстро искать товары по неточному совпадению.Забегая вперед, скажу, что от идеи до рабочего решения на продакшене прошло пять часов.Исходная ситуация такова: таблица в MS SQL базе, 50 миллионов записей, записи добавляются постоянно, удаляются или обновляются крайне редко. Средняя длина названия товара составляет 64 символа. Поиск по неточному совпадению работает, для этого используются триграммы и полнотекстовый индекс по столбцу с триграммами. Ранжирование результатов осуществляется при помощи функции CONTAINSTABLE. Результаты получаются релевантные, но поиск работает откровенно медленно, 2-5 секунд на запрос, в зависимости от длины запроса. Мы хотим ускорить его раз в 20, а лучше в 100 подручными средствами.",
        "link": "https://habr.com/ru/post/578068/"
    },
    {
        "title": "Построение простого flow в IBM App Connect (Integration Bus)",
        "body": "Make legacy great again.Когда я только начинал работать на IBM Integration Bus, руководств по построению приложений я толком найти не мог, тем более на русском, в том числе и на Хабре. Пора это исправлять. Наша цель - построить простой сервис, который на вход будет принимать JSON с одной цифрой и возвращать её инкремент. Данное руководство работает как в десятой версии интеграционной шины, так и в одиннадцатой.",
        "link": "https://habr.com/ru/post/578234/"
    },
    {
        "title": "Взаимное автоматическое распечатывание двух Vault кластеров в Kubernetes",
        "body": "Введение\nКогда я устанавливаю Vault в Kubernetes, я держу в голове, что очень важно иметь возможность сделать автоматическое распечатывание(Auto-Unseal), чтобы кластер Vault был по настоящему высокодоступным.\nВ моей предыдущей статье \"Highly available Vault cluster in Kubernetes\" (ссылка), несмотря на то, что я изо всех сил пытался сделать кластер Vault максимально доступным, без автоматического распечатывания кластер Vault мог бы выдержать частичный отказ подов, но не пережил бы перезагрузку всего кластера.\nВ этой статье хорошо объяснено, почему это произошло. Для меня проблема заключается в том, что я не пользуюсь \"службой AWS KMS\", которую можно было бы использовать, или подобной службы безопасности от \"облачного\" провайдера, потому что я управляю Kubernetes на self-hosted \"облаке\" (в этой статье объясняется моя настройка).\nВ Vault версии 1.1 добавлена поддержка \"Transit Auto Unseal\", которая заключается в использовании второго Vault кластера B для автоматического распечатывания (Auto-Unseal) кластера А.\nИтак, вот идея: развернуть 2 кластера Vault A и B и настроить их так, чтобы они делали автоматическое распечатывание друг для друга.",
        "link": "https://habr.com/ru/company/nixys/blog/578870/"
    },
    {
        "title": "Модифицируем процесс загрузки с помощью утилиты make-initrd",
        "body": "В этой статье мы хотим помочь глубже разобраться, как устроен процесс загрузки Linux, дать советы по реализации сложных сценариев загрузки Linux, а также познакомить с удобным и быстрым генератором initramfs образов - make-initrd.",
        "link": "https://habr.com/ru/company/aktiv-company/blog/582606/"
    },
    {
        "title": "Как мы автоматизируем iOS: настройка Gitlab CI + Fastlane + Firebase + ItunesConnect",
        "body": "В основном идея использования CI/CD для iOS, да и для других платформ, — это автоматизация рутинной работы. Когда мы работаем над одним приложением, можем вручную собирать небольшой проект. Но команда растёт, хочется тратить время эффективнее, чем вручную собирать проект или объяснять новичкам, что же там с Code-signing нужно делать. Пожалуй, самое рутинное и самое важное занятие, которое берёт на себя CI, — это прогон тестов. Нет зелёных тестов? В master не попадёшь. А с ростом команды вероятность того, что кто-то вольёт в master нерабочий код, будет только увеличиваться. Нужна автоматизация.В этой статье я хочу подробно рассказать о пути настройки Gitlab CI + Fastlane + Firebase + Testflight. Примеры приводятся на основе одного проекта, в котором участвовали 10 разработчиков. В конце будут описаны проблемы, с которыми мы сталкивались, и их решения.Для кого будет полезен этот опыт? Для всех, кому нужен CI/CD и кто сидит на Gitlab. Для Github будет другая связка, например с Travis, — остальные компоненты неизменны. В нашей команде все используют Gitlab CI, Fastlane вместо голого xcodebuild для быстроты и удобства разработки, Firebase и Testflight.Если у нас бесплатный Gitlab и мы укладываемся в лимит Firebase, то получаем бесплатное решение по настройке CI/CD.",
        "link": "https://habr.com/ru/company/psb/blog/583532/"
    },
    {
        "title": "Modula-3. The article from “Computer newspaper” N12 2000",
        "body": "   One of the main tenets of the Unix philosophy is that a good tool for a good cause. Suppose you have a task to develop a large application that should have multiple threads of execution, possibly be distributed and, of course, have a graphical interface. I would like to make such a program quickly and without unnecessary mistakes.  I think the first question to ask in a situation like this is, \"Which programming language is right?\" C is not a bad choice, but not for such a project. It does not scale very well, and does not have the means of working with processes at all. Then C++? But C++ is a complex language, and past experience has shown that it will take a fair amount of time to debug memory allocation problems. What else?  There is a well-designed tool for just such a job. It is a Modula-3 language developed and implemented by the Digital Equipment Corporation Systems Research Center (SRC). Modula-3 is a modern, modular, object-oriented language. Other features include automatic memory management (built-in garbage collector), exception handling, support for dynamic types, and multi-threaded programming.  The SRC implementation includes a compiler, a minimal recompilation system (m3build), and a wide range of libraries and sample applications. It must be said that SRC Modula-3 is a free system supplied with source code, including a compiler and a run-time kernel. In addition, SRC Modula-3 has been implemented for a dozen platforms, including Windows 95/NT.  The goal of the developers of the language, in their own words, was not innovation, but the careful selection and consolidation of ideas, time-tested and proven to be useful in practice. Modula-3 is a simple but full-featured language for building large and reliable software packages with a long life cycle.",
        "link": "https://habr.com/ru/post/585570/"
    },
    {
        "title": "Как я переписывал vim конфиг в init.lua",
        "body": "Статья рассказывает о том, как я с нуля переписывал свой  nvim-конфиг (init.vim)  в конфиг с поддержкой lua (init.lua). ",
        "link": "https://habr.com/ru/post/586808/"
    },
    {
        "title": "Gentoo в облаке Hetzner c LUKS шифрованием",
        "body": "В статье описана установка Gentoo в Hetzner Cloud, статья не рекламная. Написана с целью разобрать и описать установку Gentoo с загрузкой без UEFI с шифрованным корневым разделом, а также возможностью разблокировки LUKS без размещения ключа на виртуальной машине, а только при подключении по SSH как наиболее простой и безопасный способ передачи ключа.",
        "link": "https://habr.com/ru/post/587164/"
    },
    {
        "title": "Как нейронные сети заменяют рендеринг",
        "body": "​Нейронные сети уже везде. И фильтры в фотошопе, и подделка лиц в видео. Но многое пока ещё невозможно. Магические слова \"сделай мне видео по моей любимой книжке\" пока не работают. Хоть потихоньку мы и движемся к этому. В этой статье я попробую рассказать что сейчас делается в этом направлении и где проходит современный технический прогресс.В прошлой своей статье я рассказывал про современные генеративные сетки, в первую очередь про StyleGan. Эмбединги и GAN - это красивая математика. Но на практике применений у них пока мало.Сегодня я немного расскажу о чуть более прикладных подходах и проектах, которые помогают генерировать видео. Тут GANы тоже встречаются, но зачастую как малая часть системы, и куда больше значит логика и схема работ.",
        "link": "https://habr.com/ru/company/recognitor/blog/593833/"
    },
    {
        "title": "Визуальный редактор логики для Unity3d. Часть 3",
        "body": "Приветствую Вас, уважаемые читатели. В сегодняшней статье, которая является заключительной в серии о визуальном редакторе логики, как это ни странно, речь пойдет именно о редакторе. Данный аспект всей системы в целом является наиболее сложным и обширным, в том числе и по реализации. Я постараюсь раскрыть все основные моменты архитектуры, а также те решения, которые я использовал для создания таких вещей, как рисование связей, компонентов, инспектора и т. п.",
        "link": "https://habr.com/ru/post/595009/"
    },
    {
        "title": "Blue (Голубой) Midnight Wish — еще один алгоритм хэширования (для ценителей)",
        "body": "Привет всем хабровчанам и просто заглянувшим! Поддавшись осенне-зимнему тренду на Хабре на (около)криптографические статьи, я решил поддержать оный, потому что чем больше годной информации на русском, тем лучше-ж, да..?Итак, сегодня я хочу рассказать вам о Blue Midnight Wish (BMW, да-да, может кто-то еще не понял). Сразу хочу предупредить - это моя первая статья, поэтому будьте нежнее, по возможности...",
        "link": "https://habr.com/ru/post/595481/"
    },
    {
        "title": "Нормализация SQL profiler трейса для группировки",
        "body": "Если вы разбираетесь \"почему тормозит база\" и у вас есть трейс, созданный MS SQL profiler, то что вы делаете первым делом? Правильно, сохраняете его в таблицу, чтобы поразбираться с ним с помощью родного SQL, а не в GUI. Очень хотелось бы сделать group by TextData, но увы - так не получится из-за разных параметров у процедур и кверей. А выразительных способностей SQL не хватет, чтобы эффективно 'нормализовать' трейс. Но ведь можно скрестить ежа и ужа, SQL и Python, и решить задачу в несколько строк! Полезные скрипты ниже.",
        "link": "https://habr.com/ru/post/647449/"
    },
    {
        "title": "Digital art и искусственный интеллект — симбиоз цифр и искусства",
        "body": "В качестве предисловия оговорюсь, что на Хабре я впервые, решил представить свою дебют на этой платформе, так сказать. Речь здесь не пойдёт о рисовании картин с использованием AI и графических паттернов. Скорее наоборот, превращение классического изобразительного исксства в многочисленную последовательность нейронных сетей в итоговым кодом в заключительном виде. Расскажу предысторию. В начале этого года, случайным образом, попало в моё поле зрения одно заманчивое словосочетание - digital art. И так как я в теме crypto уже давненько, я не смел не поинтересоваться, каким образом искусство (будь то живопись или музыка) коррелирует с криптой, и как это происходит (и для чего))) на просторах блокчейна. В итоге ознакомления с этой идеей, и не только идеей, но и инфраструктурой NFT (Non-Fungible-Token, невзаимозаменяемый цифровой актив), я с радостью обнаружил что уже хочу создать что-то подобное, но в своём, авторском исполнении. Парой слов опишу, что зверёк по имени НФТ это хэшированное изображение в любом формате,  записанное в сети блокчейн в формате, являющегося аналогом ERC-721 в сети Ethereum (для тех кто ещё не в курсе темы). Задуманному быть конечно, но сказать легко, а вот сделать - труднее. Особенно, когда делаешь что-то впервые. Начал я с изучения подобных платформ на просторах всемирной паутины, начиная с крупнейших маркетплейсов opensea.io, makersplace.com,  и не очень крупных, pixeos.art, ghostmarket.io и много много других. Кроме маркетплейсов, я обнаружил чисто minting-платформы, как правило тематические, т.е. они занимаются только созданием NFT карточек и как-правило одного направления. Криптокотики всякие (с них всё и началось!), Криптопанки и прочая фауна. Нашлось кроме всего пару аутсайдеров, которые вовсе создавали неформатные NFT, с прицелом на автоматическое масштабирование за счёт пользователей, к примеру на одной из платформ за NFT контент принимаются уникальные ссылки в интернете, на другой - регистрируются домены, а заодно и снимок с NFT. Не буду сильно углубляться в обозревание ежедневно растущего формата цифровых активов NFT, а лучше наконец-то перейду к своей задумке.",
        "link": "https://habr.com/ru/post/648507/"
    },
    {
        "title": "Golang-дайджест № 13 (1 – 31 января  2022)",
        "body": "Свежая подборка новостей и материаловИнтересное в этом выпускеВыпущены Go 1.17.6 и 1.16.13, Go 1.18 beta2, GoLand 2022.1, tinyGo 0.22 с поддержкой M1/​​macOS ARM, мобильная игра на GolangПриятного чтения!",
        "link": "https://habr.com/ru/post/649005/"
    },
    {
        "title": "Cимбиоз цифр и искусства (часть 2)",
        "body": "В продолжении поста о создании алгоритма распознавания картин художников, хочу поделиться одной мыслью. Искусственный Интеллект как я его всегда представлял, являлся неким разумом, рациональной машиной по разрешению заданных вопросов и задач, заданных человеком. Будь то скрипт с исходными данными, или же голосовой помощник, он готов дешифровать и анализировать входящую информацию и выдавать ответ, даже если он в принципе неверный. Просто статистически данный ответ являлся наиболее верным за определённый отрезок времени (массив данных). Т.е. в большинстве алгоритмов главенствует системный подход к обработке данных (по аналогии, по логике, по большинству совпадений и т.д.). Как-бы я обрадовался если увидел где-нибудь \"нелогичный\" нерациональный ИИ-помощник, который выдавал странный, но главное правильный вариант из множества возможных, так сказать, попадал бы в \"яблочко\". К примеру, хотел бы я посмотреть вечером фильм,но, и чтобы этот фильм мне точно понравился бы. Задаю вопрос онлайн-помощнику, и что он выдаёт? Он выдаёт то, что смотрели и лайкали множество людей до этого, или он выдаёт высокорейтинговое кино определённого жанра, который я задал, но не имеющего ничего общего с тем, что мне действительно по душе. Я, конечно, знаю, какие фильмы мне пришлись \"по душе\". Лезу в поисковик, и набираю фильм наподобие... или фильмы похожие на... после чего вижу три-четыре портала с бесконечными списками фильмов. Вхожу и обнаруживаю, что эти фильмы, во первых далеки друг от друга по своей сути, и во вторых они может мне и понравились бы мне, но с совсем другой стороны, как будто я увидел их случайно щёлкая пультом ТВ и решил остановиться на них. ",
        "link": "https://habr.com/ru/post/649909/"
    },
    {
        "title": "Sberbank International: работа в платформенной команде разработки",
        "body": "Всем привет! Многие IT-компании, да и мы в Сбере пытаемся принять на работу лучших сотрудников. Часто наши HR-специалисты отмечают, что у кандидата возникают дополнительные вопросы в части задач и технического стека платформенной команды в SBI (Sberbank International). Так вот, данная статья раскрывает немного деталей о SBI Platform Team, чтобы у кандидата сразу было представление о том, над чем мы работаем.Я Артём Соковец, руковожу платформенной командой в Sberbank International. До этого был TeachLead&ProductOwner продукта Platform V Studio. Прошёл путь от специалиста по автоматизации тестирования до лидера SDETs, а в 2018 году сменил профиль на разработку и двигаюсь в этом направлении дальше с заплывом в смежные области — DevOps и MobileDev.  Давайте погрузимся в нашу специализацию. Сейчас есть три основных направления, о которых далее пойдёт речь:1.      Адаптация Platform V под дочерние банки в других странах. 2.      Разработка новых бизнес-приложений с использованием Platform V.3.      Разработка интеграционного слоя с использованием Synapse.Кому интересно узнать детали, прошу под <cut>.",
        "link": "https://habr.com/ru/company/sberbank/blog/650149/"
    },
    {
        "title": "70+ бесплатных инструментов для компьютерной криминалистики (форензики)",
        "body": "Расследование инцидентов в области информационной безопасности не такая горячая тема, как пентесты, но эта научная и практическая дисциплина продолжает развиваться, во многом, благодаря Open Source-сообществу.Давайте пройдемся по просторам GitHub и посмотрим, какие инструменты для сбора и анализа цифровых доказательств доступны всем желающим.Под катом утилиты для разбора содержимого оперативной памяти, исследования докер-образов, анализа журналов, извлечения информации из кеша браузеров и многое другое.",
        "link": "https://habr.com/ru/company/bastion/blog/651869/"
    },
    {
        "title": "Маленькая история о том, как я переустанавливал ОС из-за libexpat, или как не стоит обрабатывать ошибки",
        "body": "Альтернативный заголовок: \"В любой непонятной ситуации возвращай Out of memory\".Давеча решил я запустить свой самописный сервер веселья ради, как я делал это тысячу раз до этого, и каково же было моё удивление, когда я внезапно увидел следующую строчку в консоли:Error when parsing \"example_proj.xml\": 1:0 out of memoryДля парсинга конфигурационных файлов в проекте используется сторонняя библиотека (назовём её LibCustomConfig), которая в свою очередь использует широко распространённую libexpat.Итак. Out of memory? На XML в 50 строчек? Сказать, что я был ошарашен - это не сказать ничего. \"Но ведь раньше всё работало\".",
        "link": "https://habr.com/ru/post/653151/"
    },
    {
        "title": "Парсинг при помощи JAVA",
        "body": "Всем привет, данная статья является - маленьким туториалом, для примера были взяты XML данные с сайта Центр Банка.",
        "link": "https://habr.com/ru/post/656575/"
    },
    {
        "title": "Вопросы и ответы для собеседования Go-разработчика",
        "body": "Структурирование информации — очень полезный навык. И дабы привнести некоторый порядок в этап подготовки к интервью на должность Golang разработчика (и немножко техлида) решил записывать в этой заметке в формате FAQ те вопросы, которые я задавал, задавали мне или просто были мной найдены на просторах сети вместе с ответами на них. Стоит относиться к ним как к шпаргалке (если затупишь на реальном интервью — будет где подсмотреть) и просто набору тем, которым тебе стоит уделить внимание.\nЯ постарался копнуть в каждый вопрос чуть глубже чем, возможно, надо бы — что бы у читателя был не только короткий ответ на вопрос, но и некоторое понимание \"а почему именно так устроена та или иная штука\". Более того, крайне рекомендую ознакомиться и с ссылками на источники, что будут под ответами — там вы найдете более развернутые ответы.\nДа, это очень объемный пост, и вряд ли его можно вдумчиво осилить за один подход, но поместив его в закладки он, возможно, когда-то сослужит вам добрую службу (читать его можно по частям, находясь в метро или между вечными совещаниями; да и Ctrl + F никто не отменял). Ещё ему очень не хватает оглавления для удобной навигации между вопросами, но у хабраредактора нет возможности генерировать TOC (если будут запросы об этом в комментариях — сделаю его руками). Об очепятках, пожалуйста, пишите в личку.",
        "link": "https://habr.com/ru/post/658623/"
    },
    {
        "title": "Парсинг для взрослых или Инфраструктура для промышленного парсинга",
        "body": "В студенческие годы я написал на заказ много парсеров магазинов и социальных сетей. Со временем парсеры усложнялись и из скриптов превращались в полноценные веб-приложения c базой данных и Rest API. В статье описан шаблон веб-приложения, который использую для создания парсеров.",
        "link": "https://habr.com/ru/post/662928/"
    },
    {
        "title": "Lexical Analysis in 11l",
        "body": "This article discusses the lexical analyzer, which is an integral part of any compiler.\n\nThe task of the lexical analyzer is to split the source code of the program into tokens.\n\nSo for example the code\nprint(1 + 2)\nwill be tokenized as\nprint, (, 1, +, 2 and )",
        "link": "https://habr.com/ru/post/663872/"
    },
    {
        "title": "Apache OpenOffice. Динамические массивы",
        "body": "— Указатели в СтарБейсике видишь? — … — А они там есть.",
        "link": "https://habr.com/ru/post/665674/"
    },
    {
        "title": "Как ускорить Python с помощью C-расширений. Часть 2",
        "body": "Привет, Хабр! Меня зовут Игорь Алимов, я ведущий разработчик группы Python в МТС Digital, и это вторая часть статьи, посвященной тому, как писать быстрый код на Python с использованием C-расширений. Я расскажу о всех нюансах и приведу конкретный пример применения этого метода.Первую часть статьи читайте здесь, чтобы увидеть продолжение – переходите под кат!",
        "link": "https://habr.com/ru/company/ru_mts/blog/668986/"
    },
    {
        "title": "Collective meaning recognition",
        "body": "The published material is in the Appendix of my book [1]Modern civilization finds itself at a crossroads in which to choose the meaning of life. Because of the development of technology, the majority of the world's population may be \"superfluous\" - not in demand in the production of values. There is another option, where each person is a supreme value, an absolute individual and can be indispensably useful in the technology of the collective mind.In the eighties of the last century, the task of creating a scientific field of \"collective intelligence\" was set. Collective intelligence is defined as the ability of the collective to find solutions to problems more effectively than each participant individually. The right collective mind must be...",
        "link": "https://habr.com/ru/post/669602/"
    },
    {
        "title": "Защищаем API – что важно знать?",
        "body": "В фундаменте каждой информационной защиты лежит глубокое понимание технологии целевой системы. В этой статье речь пойдет о защите API (Application Programming Interface) — важнейшего набора функций для каждого прогера.Интересно узнать об актуальных инструментах защиты API и о том, почему их важно применять? Го под кат! ",
        "link": "https://habr.com/ru/company/angarasecurity/blog/670500/"
    },
    {
        "title": "Как попробовать ELK-стек за один вечер и наконец-то перестать grep'ать логи",
        "body": "Как часто вы, в очередной раз матерясь и grep'ая простыню текста, говорили себе, что вот-вот перестанете хранить логи в файлах и переедете на ELK? Я - часто, а виной тому кажущаяся сложность настройки всей системы в целом. Наверное, так оно и есть, но для того, чтобы складывать логи и искать по ним, как оказалось, много ума не нужно.Дисклеймер: я не знаю всех тонкостей ELK стека и возможно данный сетап не подойдет для огромной компании с сотней проектов и терабайтами логов, но там и без этой статьи все знают. Судите строго, давайте советы мне и другим в комментариях - я буду только рад.В данной статье мы: разберем компоненты ELK стека и развернем его одной командой; законфижим Filebeat и научим его собирать и отправлять логи; рассмотрим интерфейс Kibana и научимся искать по логам; настроим Kibana и разберемся с правами доступа; поговорим об индексах, шаблонах и об автоудалении индексов (неактуальных логов);",
        "link": "https://habr.com/ru/post/671344/"
    },
    {
        "title": "How we tackled document recognition issues for autonomus and automatic payments using OCR and NER",
        "body": "In this article, I would like to describe how we’ve tackled the named entity recognition (aka NER) issue at Sber with the help of advanced AI techniques. It is one of many natural language processing (NLP) tasks that allows you to automatically extract data from unstructured text. This includes monetary values, dates, or names, surnames and positions. Just imagine countless textual documents even a medium-sized organisation deals with on a daily basis, let alone huge corporations. Take Sber, for example: it is the largest financial institution in Russia, Central and Eastern Europe that has about 16,500 offices with over 250,000 employees, 137 million retail and 1.1 million corporate clients in 22 countries. As you can imagine, with such an enormous scale, the company collaborates with hundreds of suppliers, contractors and other counterparties, which implies thousands of contracts. For instance, the estimated number of legal documents to be processed in 2022 has been over 65,000, each of them consisting of 30 pages on average. During the lifecycle of a contract, a contract usually updated with 3 to 5 additional agreements. On top of this, a contract is accompanied by various source documents describing transactions. And in the PDF format, too.Previously, the processing duty befell our service centre’s employees who checked whether payment details in a bill match those in the contract and then sent the document to the Accounting Department where an accountant double-checked everything. This is quite a long journey to a payment, right?",
        "link": "https://habr.com/ru/post/673142/"
    },
    {
        "title": "Как устроена механика web акселерации: критерии выбора под проект",
        "body": "Наверное, вы легко перечислите 10 или более web-акселераторов, и список их постоянно растет. Кроме разных функциональных возможностей, web-акселераторы значительно отличаются архитектурно, тем, как они взаимодействуют с операционной системой и реализуют те или иные HTTP-стандарты.Понимание архитектурных различий и внутренностей конкретных прокси может помочь в выборе решения, наиболее подходящего к конкретному проекту, и разобраться со сложными задачами производительности и аномалиями обслуживания.  Цель статьи — рассказать о принципах и механизме работы HTTP протоколов и серверов и критериях выбора Web Accelerator для вашего проекта.  ",
        "link": "https://habr.com/ru/company/oleg-bunin/blog/679540/"
    },
    {
        "title": "Операционная система FreeBSD на ноутбуке Lenovo",
        "body": " \tВ этой статье я хочу поделиться с общественностью некоторыми аспектами настройки и эксплуатации операционной системы FreeBSD при установке на современный ноутбук с целью использования его как основного рабочего места инженера (программиста, электронщика или конструктора). В своих предыдущих статьях я упоминал, что являюсь тонким ценителем этой ОС и с некоторых пор организовал своё рабочее место под управлением FreeBSD, о чем ни сколько не пожалел, и даже наоборот — мои волосы теперь по-настоящему мягкие и шелковистые.  \tМоя статья посвященная настройке САПР КОМПАС-3D под FreeBSD получила ряд одобрительных комментариев, поэтому мне захотелось продолжить тему «FreeBSD на десктопе». К тому же, есть добрые предпосылки — недавно я приобрел новый современный ноутбук Lenovo Ideapad 3 Gaming взамен окончательно рассыпавшегося на несколько частей Asus VX7, а с ним и массу приятного и затейливого опыта установки и настройки ОС FreeBSD для работы на новом «железе». В этой статье я не будут касаться установки и настройки специализированного ПО и прочих САПР, будет рассмотрен только системный вопрос: установка операционной системы, драйверов, патчей, библиотек, настройка и борьба с железом. Будет много выдержек из системного руководства (мануала - man) — уж сильно я к нему пристрастился за последние 130 лет.Ссылка на статью в формате PDF для \"офф-лайн\" прочтения",
        "link": "https://habr.com/ru/post/683702/"
    },
    {
        "title": "10 Easy Steps to Build an Android Chat App using Kotlin in 2022",
        "body": "This tutorial will guide you step by step in building an Android chat app in Kotlin with the help of third-party messaging SDKs. The reason I chose Kotlin for this tutorial is that - it is a lightweight programming language suggested by Google for building apps that work on Android devices. In the steps ahead, I’ll show you how to develop an app in Android Studio, with messaging features that can integrate using SDKs. I use MirrorFly’s chat SDKs throughout this tutorial. ",
        "link": "https://habr.com/ru/post/683898/"
    },
    {
        "title": "Telegramm-habr-бот. Долгий путь к совершенству",
        "body": "Каждый день мы просматриваем habr. Каждый день заходим на главную ленту и просматриваем её. Что, если автоматизировать этот просмотр?В статье я расскажу, как я писал telegram-бота на python3, который вытаскивает заголовки статей с habr и пишет их в telegram.И т. Д. ",
        "link": "https://habr.com/ru/post/686174/"
    },
    {
        "title": "Темная сторона Снупи. Глубокое погружение",
        "body": "В предыдущей статье мы кратко рассмотрели фреймворк Snoopy. А также прошлись по существующим проблемам и ограничениям массового фингерпринтинга.Как обсуждалось ранее, текущая реализация фреймворка использует только одну функцию — последовательность размеров зашифрованных ресурсов. Поэтому далее опишем функциональные модули Snoopy в контексте именно этой функции.",
        "link": "https://habr.com/ru/company/first/blog/689232/"
    },
    {
        "title": "Импортозамещение VR-а клавиатуре покоя не даёт",
        "body": "Давным-давно, ... в общем появился у Sony PlayStation шлем VR. Штука оказалась интересная и позволяла не только играть в vr-игры, но и смотреть фильмы.Правда, сразу выяснились некоторые \"тонкости\": нормальное использование возможно было только при использовании с Sony PlayStation (что, в общем-то, очевидно) и через специализированную программу Rad (бывший LittlStar). Причём особого разнообразия программ-проигрывателей небыло, использование же программы Rad требовало оплаты подписки. Сначала всё было хорошо: и подписка платилась, и кино смотрелось. Потом появились санкции и, вдруг, оказалось, что заплатить из России нельзя. И вообще вы ничего не можете, пока \"... until those restrictions and sanctions have been lifted ...\".Конечно, такое отношение не может радовать пользователй. С другой стороны, это является хорошим поводом постучать по клавиатуре и сделать немного импортозамещения.Чтобы шлем работал, необходимо было отвязать функцию просмотра фильмов от специализированного / платного / не-российского программного обеспечения. И ниже описан процесс такого \"отвязывания\".Эта статья по составу содержит примеры кода и решений, которые нужнодобавить в проигрыватель VR, чтобы им можно было нормально пользоваться.Приведённые здесь сведения не являются какими-либо новыми илиособенными знаниями. Всё, что здесь приведено вы можете самостоятельнонайти в интернете или посчитать на калькуляторе.Для мнеленьчитать результат здесь.",
        "link": "https://habr.com/ru/post/691116/"
    },
    {
        "title": "Как оставаться программистом, если у тебя память как у дрозофилы",
        "body": "Мой мадригал тем инструментам разработки, которые изменили мою жизньПрограммирование стало гораздо более многогранным ремеслом с тех пор, как в середине 1990-х я впервые попробовал AmigaBASIC. В те времена еще можно было купить один большой том о компьютере, на котором вы программируете – и там бы нашлось 99% всей нужной информации. Эта книга, где на множестве страниц уголки загнуты в качестве закладок, обклеенная стикерами, лежала бы у вас под рукой, пока вы вбивали бы команды в монохромный текстовый редактор.Современная книга по клиентскому веб-фреймворку может быть толще, чем во времена программирования под C64 бывали мануалы, достаточные для создания полноценных игр. С другой стороны, сегодня информация по любым платформам, для которых требуется писать код, находится буквально в одном клике.Сегодня никто бы больше и не подумал покупать документацию по разработке – и Microsoft, и Apple свободно выкладывают свою документацию в Интернете для всех желающих. А что говорить о проектах с открытым исходным кодом! Во времена npm, PyPI и GitHub сложно объяснить, насколько неоднозначным решением (которое требовалось всесторонне обдумывать) раньше считалось потребовать хоть какие-нибудь возможности, которые выходили бы за рамки функционала операционной системы. Часто вместе с продуктом приходилось сдавать и все его зависимости.",
        "link": "https://habr.com/ru/post/691908/"
    },
    {
        "title": "Автоматическое реферирование научных статей. Обзор работ",
        "body": "Задача автоматического реферирования научного текста формулируется следующим образом: на основе текста научной статьи и, возможно, некоторой другой информации о ней, например цитат и ссылок на эту статью, содержащихся в других работах, требуется породить с помощью алгоритмов автоматической обработки текста небольшой сжатый реферат, который при этом будет максимально точно и полно передавать основные идеи, методы и результаты, описанные в статье.",
        "link": "https://habr.com/ru/company/unistar_digital/blog/693058/"
    },
    {
        "title": "Пишем простой интерпретатор на C++ с помощью TDD, часть 2",
        "body": "В первой части был написан лексер. Далее будет рассмотрена разработка парсера.\n\n Парсер\nПарсер будет реализован по алгоритму сортировочной станции, так как он достаточно прост и не нуждается в рекурсии. Сам алгоритм таков:\n\nВ начале даются пустой выходной поток и пустой стек. Начнём читать токены из входного потока по очереди.\n\n\n Если это число, то передать его в выходной поток. \n Если это лево ассоциативный оператор, то выталкиваем токены из стека в выходной поток до тех пор, пока он не опустеет, либо не его вершине не встретится скобка, или оператор с более низким приоритетом. \n Если это открывающая скобка, то положить её в стек. \n Если это закрывающая скобка, то выталкиваем токены из стека в выходной поток до обнаружения открывающей скобки. Вытолкнуть открывающую скобку из стека, но не передавать её в выходной поток. Если стек опустел, и скобка не найдена, то генерируем ошибку. \n\nПосле достижения конца входного потока, вытолкнуть все оставшиеся в стеке операторы в выходной поток. Если в нём найдено что-либо кроме операторов, то генерируем ошибку.\n\nПрикинем, какие тесты могут понадобиться для начала.\n\n\n При получении пустого списка, возвращается пустой список. \n При получении списка с одним числом, возвращается список с этим числом. \n При получении [1 + 2], возвращается [1 2 +]. \n При получении [1 + 2 + 3], возвращается [1 2 + 3 +], так как оператор + является лево ассоциативным. \n При получении [1 * 2 + 3], возвращается [1 2 * 3 +]. \n При получении [1 + 2 * 3], возвращается [1 2 3 * +], так как оператор * имеет больший приоритет. \n\nСо скобками и ошибками разберёмся позднее. Итак, напишем первый тест из списка.\n\nTEST_CLASS(ParserTests) {\npublic:\n    TEST_METHOD(Should_return_empty_list_when_put_empty_list) {\n        Tokens tokens = Parser::Parse({});\n        Assert::IsTrue(tokens.empty());\n    }\n};\n\n",
        "link": "https://habr.com/ru/post/232081/"
    },
    {
        "title": "Изучение комбинаторных парсеров с Rust",
        "body": "Привет, Хабр! Представляю вашему вниманию перевод статьи \"Learning Parser Combinators With Rust\".\nЭта статья учит основам комбинаторных парсеров людей, которые уже знакомы с Rust. Предполагается, что никаких других знаний не требуется, а всё, что не имеет прямого отношения к Rust, а также некоторые неожиданные аспекты его использования, будут объяснены. Эта статья не поможет вам выучить Rust, если вы его ещё не знаете, и в этом случае, вы, вероятнее всего, не поймёте комбинаторные парсеры хорошо. Если вы хотите изучить Rust, я рекомендую книгу \"Язык программирования Rust\".",
        "link": "https://habr.com/ru/post/469213/"
    },
    {
        "title": "О провиженинге тестовых баз",
        "body": "Тема, насколько старая, настолько же и актуальная. Поделюсь, своим концептом на архитектуру провиженинга тестовых субд, с целью получения комментариев по существу - может кто ходил уже этой дорогой. И знает более короткий/удобный пусть.В общем, в одной далёкой-далёкой галактике динамичной-быстро развивающейся компании есть множество (десятки) продовых oracle-баз. Продовые бд - названы одинаково. Специфика обстановки, с этой стороны: SE, типовой размер баз 3-3.5Тб, самая большая бд - 7+Тб. Легаси-монолит, всё работает - на хранимках (да, буээ и фу, но разговор не об этом). Из этого бытия следует что, поскольку легаси/монолит: существует армия разработчиков, поделённая на группы. И т.к. с одной стороны: группы - работают с разными проектами, в разных стадиях работы, групп много, а с другой стороны - всё запихано в одних и тех же базах - группы работают практически с одними и теми же объектами бд и с разными целями этой работы, включая разрушающие тесты.Т.е., такое бытие определяет потребности каждой группы в выделенной, для группы тестовой бд. А то и: прям для каждого разработчика.Иначе говоря: тестовых баз надо:",
        "link": "https://habr.com/ru/post/542366/"
    },
    {
        "title": "Наследование грамматик в Sprache (или еще один настраиваемый калькулятор выражений для .NET)",
        "body": "Статья демонстрирует технику создания парсеров с использованием наследования грамматик. Наследование позволяет описывать новые грамматики на основе уже существующих путем добавления новых правил или переопределения унаследованных, что существенно упрощает реализацию новых парсеров. Изменения в базовой грамматике автоматически становятся доступными во всех порожденных грамматиках. Основная область применения такой техники — поддержка нескольких диалектов или версий языков.\n",
        "link": "https://habr.com/ru/post/228037/"
    },
    {
        "title": "Обработка ошибок в Rust",
        "body": "Как и многие языки программирования, Rust призывает разработчика определенным способом обрабатывать ошибки. Вообще, существует два общих подхода обработки ошибок: с помощью исключений и через возвращаемые значения. И Rust предпочитает возвращаемые значения.\n\nВ этой статье мы намерены подробно изложить работу с ошибками в Rust. Более того, мы попробуем раз за разом погружаться в обработку ошибок с различных сторон, так что под конец у вас будет уверенное практическое представление о том, как все это сходится воедино.\n\nВ наивной реализации обработка ошибок в Rust может выглядеть многословной и раздражающей. Мы рассмотрим основные камни преткновения, а также продемонстрируем, как сделать обработку ошибок лаконичной и удобной, пользуясь стандартной библиотекой.",
        "link": "https://habr.com/ru/post/270371/"
    },
    {
        "title": "Разработка изоморфного RealWorld приложения с SSR и Progressive Enhancement. Часть 4 — Компоненты и композиция",
        "body": "В предыдущей части туториала мы решили проблемы изоморфного роутинга, навигации, фетчинга и начального состояния данных. В итоге, получилась довольно простая и лаконичная основа для изоморфного приложения, которую я также выделил в отдельный репозиторий — ractive-isomorphic-starterkit. В этой части мы начнем писать приложение RealWorld, но сначала осуществим декомпозицию. Погнали!\n",
        "link": "https://habr.com/ru/post/351378/"
    },
    {
        "title": "Мальчик взломал Instagram и заработал $10 000",
        "body": "\n\nШкольник из Финляндии стал самым юным обладателем награды Bug Bounty за всю историю Facebook, возможно, вообще за всю историю ИТ. Десятилетний мальчик по имени Яни (родители скрывают фамилию) нашёл способ удаления произвольных комментариев к сообщениям в социальной сети Instagram, сообщает финская газета Iltalehti.\n\n«Я проверял, можно ли в комментариях запостить вредоносный код. Оказалось, нельзя. Зато я заметил, что могу удалять оттуда чужие комментарии», — сказал третьеклассник. Более подробно о способе взлома он не рапространяется, хотя дыра уже закрыта и можно бы опубликовать код SQL-инъекции, если это она.\n\nНаписав о баге в Facebook, Яни (точнее, его родители) заслуженно получил чёрную хакерскую карту VISA White Hat с десятью тысячами долларов.\n",
        "link": "https://habr.com/ru/news/t/372191/"
    },
    {
        "title": "Проектирование дашбордов для веб-аналитики e-commerce сайта. Часть 4: Youtube-канал",
        "body": "Легко посчитать, сколько трафика пришло с ютуб-канала. К примеру, зайти в счетчик Яндекс Метрики или Google Analytics. А вы попробуйте узнать, что происходило с вашим видео на канале. Кто его посмотрел, кто добавил в фавориты, а кто дислайкнул. Вот для выгрузки таких данных и потребуется скрипт на Python. \n\n\nДинамика Youtube-активностей",
        "link": "https://habr.com/ru/post/467035/"
    },
    {
        "title": "В Москве отложили введение пропускного режима",
        "body": "Мэр Сергей Собянин объявил о переносе введения пропускного режима в Москве на более поздний срок с продлением режима самоизоляции до 1 мая 2020 года. \n \n«Огромное количество вопросов возникло в связи с планировавшимся введением пропусков для передвижения по городу. Опыт первой нерабочей недели показал, что пока такой необходимости нет. Большинство жителей города добросовестно выполняют требование оставаться дома. Москвичи проявили ответственную гражданскую позицию и солидарность в борьбе против коронавируса, против общей беды. Я искренне вам признателен. Поэтому пропускной режим передвижения по городу можно пока не вводить», — написал Собянин в своём блоге. ",
        "link": "https://habr.com/ru/news/t/495386/"
    },
    {
        "title": "Хостинг сайта на Imgur",
        "body": "\n\nВ интернете трудно найти нормальный хостинг для файлов, зато есть огромное количество бесплатных хостингов картинок вроде Imgur или Flickr. Поэтому давным-давно появилась идея размещать там произвольные файлы под видом картинок (есть масса плагинов, чтобы заливать на Flickr любые файлы или прятать произвольные файлы внутри настоящих фотографий). Сейчас эта концепция продвинулась ещё дальше.\n\nЕсли вкратце, то экспериментальный инструмент Web2img сначала перекодирует файлы вашего веб-сайта в формат изображений (для размещения на хостинге), а затем преобразует эту картинку в JS-скрипт для выполнения в браузере на лету (через service worker). Таким образом, контент сайта загружается с Imgur прямо в браузер.",
        "link": "https://habr.com/ru/company/itsumma/news/t/579422/"
    },
    {
        "title": "Вышел Git 2.34: что нового",
        "body": "Распределенная система управления версиями Git обновилась до версии 2.34. Обновление состоит из исправлений, которые предложилили более сотни участников сообщества. Новая версия включает в себя как исправление багов из прошлых версий, так и добавление новых функций.",
        "link": "https://habr.com/ru/news/t/589529/"
    },
    {
        "title": "Инвайты в обмен на истории",
        "body": "Привет, Хабр!По традиции, все билеты на конференции, которые мне попадаются или достаются за участие в различных мероприятиях и их освещение в телеграмм-канале Mobile AppSec World, я разыгрываю среди подписчиков. За прошедшие несколько недель я уже выдал ивайты на OFFZONE 2022, которая пройдет 25-26 августа в Москве, и на Mobius, которая была в Питере. И здесь я как раз и собрал самые крутые истории, которые мне прислали, чтобы вы также могли их прочитать и улыбнуться вместе со мной (орфография и стиль полностью перенесены из сообщения авторов без изменений). Итак, поехали!",
        "link": "https://habr.com/ru/company/swordfish_security/news/t/675048/"
    },
    {
        "title": "Строим DSL на C# при помощи парсер-комбинаторов",
        "body": "\nПеревод статьи Николаса Блумхардта, известного .NET разработчика, автора IoC/DI контейнера Autofac. В этой статье Николас показывает на реальном примере как с наименьшими усилиями написать парсер предметно-ориентированного языка программирования с помощью Sprache, библиотеки парсер-комбинаторов.\n\n\nНаш текущий проект включает в себя небольшой процесс подачи и утверждения заявок на создание учетных записей пользователей. Это хороший пример для обсуждения предметно-ориентированных языков и Sprache. Сейчас я опишу некоторые требования.\n\nНабор типов учетных записей пользователей является неограниченным; в настоящее время это «служащий», «подрядчик», «временный сотрудник» и так далее. Для получения учетной записи, пользователь должен заполнить соответствующую анкету.\n\nПри сборе и сохранении данных анкеты, её содержание не имеет значения, пока соответствующая информация не будет представлена администратору, который в конечном итоге утвердит или отклонит заявку.\n\n",
        "link": "https://habr.com/ru/post/127642/"
    },
    {
        "title": "Пишем веб-сервер на Common Lisp часть вторая",
        "body": "В прошлой статье мы начали разработку нашего веб-сервера. Продолжим c файлом util.lisp. В этом пакете будут находится все наши вспомогательные функции для обработки запросов. Для начала обьявим переменную *line*, она нам понадобится в дальнейшем.",
        "link": "https://habr.com/ru/post/131780/"
    },
    {
        "title": "Загружаем в Oracle данные SNMP-мониторинга",
        "body": "Некоторое время назад, я написал статью посвященную вопросам оптимизации загрузки данных в БД Oracle. Судя по обилию последовавших комментариев, статья вызвала живой интерес, но, судя по тем-же комментариям (а также последовавшей статье о загрузке данных в PostgreSQL) многими она была понята не так, как я на то рассчитывал. По большей части, виноват в этом я сам, поскольку, в процессе упрощения изложения материала, оторвался от жизни настолько, что задача перестала быть понятна окружающим (это, в свою очередь, негативно сказалось на понимании причин выбора методов, использованных для ее решения).\n\nСегодня, я хочу исправить допущенные ошибки. Я расскажу о реальной задаче обработки данных SNMP-мониторинга, уделяя максимальное внимание техническим подробностям. Я постараюсь обосновать выбор подходов для ее решения и сравнить их производительность. Также, я уделю внимание тем техническим моментам, которые могут вызвать сложности у новичков. Прежде чем двигаться дальше, я хочу выразить свою признательность DenKrep, xlix123, zhekappp и всем прочим товарищам, давшим невероятное количество полезных советов, в процессе обсуждения предыдущей статьи.\n",
        "link": "https://habr.com/ru/post/199518/"
    },
    {
        "title": "Разработка изоморфного RealWorld приложения с SSR и Progressive Enhancement. Часть 3 — Routing & Fetching",
        "body": "В предыдущей части туториала мы научили наше изоморфное приложение проксировать запросы к backend api, с помощью сессии передавать начальный стейт между синхронными запросами и осуществлять Server-side rendering с возможностью переиспользования разметки на клиенте (hydrate). В этой части мы решим еще две ключевые проблемы изоморфных веб-приложений: изоморфный роутинг и навигация, и повторный фетчинг и начальное состояние данных. И сделаем это буквально 5-ю строками кода. Погнали!\n\n",
        "link": "https://habr.com/ru/post/350428/"
    },
    {
        "title": "Работа с данными на границе Vue.js-приложения",
        "body": "Подавляющее большинство веб-приложений как-то взаимодействует с окружающим миром. Например, с REST API серверных частей приложений или с некими внешними сервисами. Материал, перевод которого мы сегодня публикуем, посвящён обработке данных на границах приложений. В частности, речь пойдёт о том, как преобразовывать данные, поступающие в приложение из внешних источников, в правильно сформированные объекты тех типов, на работу с которыми рассчитано приложение.\n\n",
        "link": "https://habr.com/ru/company/ruvds/blog/505756/"
    },
    {
        "title": "Восстановление типов JSON",
        "body": "Для транспорта данных я почти всегда упаковываю их в JSON. Но вот беда: как правило, библиотеки для парсинга возвращают примитивные типы да объекты с массивами — всё то, что заложено самим форматом. Но что если хочется получить модели сущностей?",
        "link": "https://habr.com/ru/post/650513/"
    },
    {
        "title": "Сравнение скорости обработки JSON разными парсерами и браузерами",
        "body": "Преамбула\nЗанимаясь сейчас написанием интерфейса/middleware для одной IPTV-STB приставки, столкнулся с достаточно медленной работой javascript-парсера встроенной Оперы при вызове eval (пока встроенной была не Опера, а ANT Galio все было еще печальнее, но это тема отдельного разговора). То есть, там вообще все работает медленно, т.к. это все-таки просто приставка, но в данном конкретном случае с тормозами надо было что-то делать — через ajax грузилась программа ТВ-передач, и пока eval парсил приходящую JSON-строку, приставка на действия пользователя вообще не откликалась (причем достаточно долго). В итоге я решил вопрос использованием JSONP, который заработал на приставке в несколько раз быстрее (а заодно и решил вопрос с кросс-доменностью), но попутно задумался над производительностью парсеров в принципе. На хабре нашел только одну статью про это, но JSONP там не было… Плюс в комментах были несколько позитивных критических замечаний, поэтому решил провести свое тестирование. Используются все парсеры с JSON.org и браузеры Opera 9.64, Firefox 3.5, Internet Explorer 8, Google Chrome 2, Safari 4.\n",
        "link": "https://habr.com/ru/post/65989/"
    },
    {
        "title": "Учебный курс. Создание сложной модели данных для приложения ASP.NET MVC, часть 2",
        "body": "Это продложение цикла статей, посвященого разработке с помощью Entity Framework и ASP.NET MVC 3. Первые главы вы можете найти по следующим ссылкам: \n\nСоздание модели данных Entity Framework для приложения ASP.NET MVC \nРеализация базовой CRUD-функциональности с Entity Framework в приложении ASP.NET MVC. \nСортировка, фильтрация и разбиение по страницам с Entity Framework в приложении ASP.NET MVC \nСоздание сложной модели данных для приложения ASP.NET MVC \nВ предыдущих уроках вы научились работать с простой моделью данных, состоящей из трёх сущностей. В этом уроке вы добавите несколько сущностей и связей между ними и научитесь работать с аннотациями для управления классами моделей.\n\nИзменения, касающиеся сущности Course\n",
        "link": "https://habr.com/ru/company/microsoft/blog/134160/"
    },
    {
        "title": "pymorphy2",
        "body": "В далеком 2009 году на хабре уже была статья \"Кузявые ли бутявки..\" про pymorphy — морфологический анализатор для русского языка на Python (штуковину, которая умеет склонять слова, сообщать информацию о части речи, падеже и т.д.) \n\nВ 2012м я начал потихоньку делать pymorphy2 (github, bitbucket) — думаю, самое время представить эту библиотеку тут: pymorphy2 может работать в сотни раз быстрее, чем pymorphy (втч без использования C/C++ расширений) и при этом требовать меньше памяти; там лучше словари, лучше качество разбора, лучше поддержка буквы ё, проще установка и более «честный» API. Из негатива — не все возможности pymorphy сейчас реализованы в pymorphy2.\n\nЭта статья о том, как pymorphy2 создавался (иногда с довольно скучными техническими подробностями), и сколько глупостей я при этом наделал; если хочется просто все попробовать, то можно почитать документацию. \n",
        "link": "https://habr.com/ru/post/176575/"
    },
    {
        "title": "Пишем простой интерпретатор на C++ с помощью TDD, часть 3",
        "body": "В первой части был написан лексер, а во второй части — парсер. Далее будет рассмотрена разработка вычислителя и фасада для всего интерпретатора, а также рефакторинг кода для устранения дублирования.\n\n Вычислитель\nПриступим к самому интересному. Вычисление выражения в постфиксной записи можно осуществить двумя способами: через рекурсию, неявно используя стек процесса, или используя явный стек. Реализуем второй вариант. Алгоритм с использованием явного стека такой:\n\n\n Если на вход подан операнд, он помещается на вершину стека. \n Если на вход подан знак операции, то соответствующая операция выполняется над требуемым количеством значений, извлечённых из стека, взятых в порядке добавления. Результат выполненной операции кладётся на вершину стека. \n После полной обработки входного набора символов результат вычисления выражения лежит на вершине стека. \n\nВ данной статье я не буду реализовывать контекст выполнения и вычисление нескольких выражений. Поэтому начальный список тестов будет коротким:\n\n\n Если на входе пустой список, возвращаем 0. \n Если на входе список с одним числом, возвращаем это число. \n Если на входе [1 2 +], возвращаем 3. \n\nСоздадим новый тестовый класс и добавим первый тест.\n\nTEST_CLASS(EvaluatorTests) {\npublic:\n    TEST_METHOD(Should_return_zero_when_evaluate_empty_list) {\n        double result = Evaluator::Evaluate({});\n        Assert::AreEqual(0.0, result);\n    }\n};\n\n",
        "link": "https://habr.com/ru/post/232097/"
    },
    {
        "title": "Правильная работа с датой и временем в Ruby on Rails",
        "body": "Всем привет! Меня зовут Андрей Новиков и в последнее время я работаю над проектом по разработке приложения, которое используется в разных частях нашей страны и автоматизирует работу людей. В каждом конкретном часовом поясе нашему приложению необходимо правильно получать, сохранять и отображать время, причём как в прошлом, так и в будущем – например, рассчитать начало рабочей смены и так же правильно его отображать: отсчитать время до конца смены, показать, сколько люди ехали до точки назначения и определить, уложились ли они в норматив, в также многое-многое другое.\n\n\n\nЗа те уже несколько лет, что я пишу на Ruby on Rails, мне не приходилось сталкиваться с подобными проблемами — до этого все мои приложения работали в одном часовом поясе. А тут неожиданно пришлось немало попотеть, отлавливая самые разные ошибки и пытаясь выяснить, как же работать с датой и временем так, чтобы их в дальнейшем избежать.\n\nВ результате, сегодня мне есть, чем с вами поделиться. Если вы регулярно встречаетесь с тем, что время сохраняется или отображается некорректно с характерным разбросом в несколько часов (3 часа для Москвы), какие-то ночные записи перекочёвывают на соседние дни, а время упорно отображается не так, как хотят пользователи, и вы не знаете, что со всем этим делать — добро пожаловать под кат.\n",
        "link": "https://habr.com/ru/company/at_consulting/blog/266681/"
    },
    {
        "title": "Проектирование идентичных форм в WPF с применением абстрактных классов",
        "body": "Недавно столкнулся с весьма интересной задачей, которая довольно-таки часто может встречаться при проектировании пользовательских интерфейсов. Вопрос, конечно, сравнительно тривиальный, однако полноценной и развёрнутой информации по нему я не нашёл, потому решил поделиться собственным опытом. Статья может оказаться полезной для Junior-разработчиков, а также людей, только начинающих изучать ООП и не имеющих серьёзного практического опыта в программировании.\n",
        "link": "https://habr.com/ru/post/307308/"
    },
    {
        "title": "Рецепты для ELFов",
        "body": "\nНа русском языке довольно мало информации про то, как работать с ELF-файлами (Executable and Linkable Format — основной формат исполняемых файлов Linux и многих Unix-систем). Не претендуем на полное покрытие всех возможных сценариев работы с эльфами, но надеемся, что информация будет полезна в виде справочника и сборника рецептов для программистов и реверс-инженеров.\nПодразумевается, что читатель на базовом уровне знаком с форматом ELF (в противном случае рекомендуем цикл статей Executable and Linkable Format 101).\nПод катом будут перечислены инструменты для работы, описаны приемы для чтения метаинформации, модификации, проверки и размножения создания эльфов, а также приведены ссылки на полезные материалы.",
        "link": "https://habr.com/ru/company/inforion/blog/460247/"
    },
    {
        "title": "Примерно 20 строк, примерно такие же результаты: wc на Elixir",
        "body": "Полгода назад Крис Пеннер опубликовал Beating C With 80 Lines Of Haskell: Wc. В предисловии говорится:\nЗадача состоит в том, чтобы построить более шустрый клон оптимизированной вручную реализации утилиты wc на C в нашем любимом высокоуровневом языке программирования со сборкой мусора — на Haskell! Звучит достаточно просто, не так ли?Крис прошел весь путь от простой реализации при помощи ByteStrings, через моноиды, встроенные моноиды и, наконец, пришел к параллельной многоядерной версии вышеописанного, которой и удалось немного побить чистый C-код во время выполнения на четырех ядрах.\nНесколько дней назад на Хабре была размещена еще одна заметка на ту же тему от 0xd34df00d Побеждая C двадцатью строками Haskell: пишем свой wc. Автор доказал возможность пользования идиоматического хаскеля и в 20 (двадцати) строках кода реализовал алгоритм, который почти в десять раз быстрее, чем идиоматическая реализация на C.",
        "link": "https://habr.com/ru/post/489548/"
    },
    {
        "title": "Откладываем палиндромы на новый год",
        "body": "Это короткая статья о том, как я занялся задачей об отложенных палиндромах в 2020-ом году и установил мировой рекорд уже в 2021-ом. Суть задачи предельна проста: найти такое число, простые преобразования которого позволяют получить палиндром. Тем не менее, уже больше 20-и лет эта проблема не имеет строгого решения.\n\nМоё знакомство с отложенными палиндромами началось в ночь с 10 на 11 декабря на просторах ютуба. Я обдумывал квадрат Паркера и перебирал видео из поисковой выдачи. На фоне вполне привычных переводов от Mad Astronomer выделялся репортаж телеканала Мир-24 о московском школьнике-рекордсмене",
        "link": "https://habr.com/ru/post/536104/"
    },
    {
        "title": "Unity3D и MySQL",
        "body": "\nСегодня мы разберёмся как подключить проект на Unity3D к БД MySQL.\n",
        "link": "https://habr.com/ru/post/185594/"
    },
    {
        "title": "Windows Phone 8: Создаем приложение. Матрица. Часть 3. MVVM",
        "body": "И так, как и обещал, третья часть приложения Матрица для платформы WP8 с использованием паттерна MVVM. Для самых нетерпеливых можно сразу скачать с Github, а также опробовать у себя на смартфоне, скачав с Windows Phone Store.\n\nПоддерживаются расширения экранов HD720P (720x1280), WVGA (480x800), WXGA (768x1280). Есть маленький минус: при использовании расширения отличного от 480x800, нужно перезапустить приложения после установки, так как не нашел как получить высоту и ширину элемента Grid до загрузки модели вида. А теперь по порядку.\n\nWindows Phone 8: Создаем приложение. Матрица. Часть 1\nWindows Phone 8: Создаем приложение. Матрица. Часть 2\nWindows Phone 8: Создаем приложение. Матрица. Часть 3. MVVM\n\n\nРазвернутый вид всего приложения на экране WVGA (480x800)\n",
        "link": "https://habr.com/ru/post/201240/"
    },
    {
        "title": "Асинхронный JavaScript: без колбеков и промисов",
        "body": "Наверное, каждый, кто использовал JavaScript, когда-либо сталкивался (или столкнётся в будущем) с асинхронными вызовами. Может быть, это будет обращение к базе на стороне сервера. Может быть — работа с таймером для создания анимации на сайте.\n\nДля того, чтобы «побороть» асинхронность, используются разные инструменты от промисов до смены языка программирования. Но иногда очень хочется бросить всё и написать на чистом JS линейный код:\n\ntimeout(1000);\nconsole.log('Hello, world!');\n\n\nМожно ли реализовать нечто подобное? Разумеется, можно.\nВ данной статье мы рассмотрим один опасный, но действенный способ.\n",
        "link": "https://habr.com/ru/post/232671/"
    },
    {
        "title": "MMO с нуля. С помощью Netty и Unreal Engine. Часть 1",
        "body": "Всем привет! В нескольких статьях я хотел бы поделиться опытом создания подобия ММО игры используя Unreal Engine и Netty. Возможно архитектура и мой опыт кому-то пригодится и поможет начать создавать свой игровой сервер в противовес unreal dedicated server, который слегка прожорлив или заменить собой фреймворки для разработки многопользовательских игр такие как Photon.\n\nВ конечном итоге у нас будет клиент, который логинится или регистрируется в игре, может создавать игровые комнаты, пользоваться чатом и начинать игры, соединение будет зашифровано, клиенты будут синхронизироваться через сервер, в игре будет присутствовать одно оружие — лазер, выстрел будет проверяться на проверочном сервере. Я не стремился сделать красивую графику, тут будет только необходимый минимум, дальнейший функционал добавляется по аналогии. Логику можно легко расширить на сервере, добавить например случайные игры и балансер. Для меня было важно создать ММО базу и разобраться с тем что понадобится для создания полноценной мобильной ММО игры.\n\nЧасть 1. Общая картина, сборка библиотек, подготовка клиента и сервера к обмену сообщениями\nЧасть 2. Наращивание игрового функционала + алгоритм Diamond Square\n\n\n",
        "link": "https://habr.com/ru/post/333788/"
    },
    {
        "title": "Rust: Знакомимся с языком на примере «Угадай-ки»",
        "body": "Давайте познакомимся с Rust, поработав над маленьким проектом! Мы покажем основные концепты Rust на реальном примере. Вы узнаете о let, match, методах, ассоциированных функциях, подключении сторонних библиотек и много о чем другом. Мы реализуем классическую задачу: игра “угадай-ка”.",
        "link": "https://habr.com/ru/post/349134/"
    },
    {
        "title": "Пошаговая инструкция: как отправить данные в Amplitude с помощью Google Tag Manager",
        "body": "Самая подробная инструкция по передаче событий с сайта в Amplitude с помощью Google Tag Manager. Для кого:— Для продакт-менеджеров и аналитиков, которые хотят внедрить Amplitude на сайт;— Для разработчиков, которые будут внедрять Amplitude на сайт;— Для всех, кто слышал об Amplitude и хочет передавать данные о событиях на сайте в эту систему.",
        "link": "https://habr.com/ru/post/541332/"
    },
    {
        "title": "Мой опыт перевода typescript проекта на ESM",
        "body": "Нет, нельзя.",
        "link": "https://habr.com/ru/post/570734/"
    },
    {
        "title": "Unity3d: вызов метода без словаря",
        "body": "Создание консоли в Unity, которой не нужен словарь методов для их вызова и которая поможет вам отлавливать ошибки в вашем приложении или игре, а также воспроизводить их. Консоль способна вызвать как методы с обычными типами данных в параметрах, так и их List-ы и массивы. Исходник проекта прилагается.",
        "link": "https://habr.com/ru/post/664670/"
    },
    {
        "title": "Расширяем Emacs своими руками",
        "body": "Статья о умелом использовании Emacs моего коллеги, желающего стать хабраГражданином, и наблюдать НЛО. Пожалуйста инвайт на d.klykvin@гмайл.ком\n\nОднажды я открыл для себя игру Годвилль, где герой живёт сам по себе,\nи подпинывать его надо когда самому будет не лень. Но, спустя n-ное\nколичество недель, мне надоело открывать браузер чтобы посмотреть\nсамочувствие моего героя, и я решил написать расширение для emacs,\nкоторое будет само лезть в сеть и выводить интересующую меня\nинформацию.\nНаверняка эта статья будет неинтересна гуру emacs, но для первых шагов\nможет пригодиться\n",
        "link": "https://habr.com/ru/post/73872/"
    },
    {
        "title": "LogParser — привычный взгляд на непривычные вещи",
        "body": "Когда я в очередной раз использовал LogParser, то чтобы проникнуться и чужим опытом, ввел его название в поиск на Хабре. Как результат — сообщение «Удивительно, но поиск не дал результатов». Вот уж воистину удивительно, когда столь интересный инструмент обойден вниманием. Пришла пора восполнить этот пробел. Итак, встречайте LogParser. Маленькая, но чертовски полезная утилита для любителей SQL.\n\nИз названия инструмента, казалось бы, очень непросто понять, что он делает в разделе SQL. А правда заключается в том, что он такой же LogParser, как и ChartGenerator. В то смысле, что он справляется с обоими задачами с одинаковыми успехом. В целом я бы его охарактеризовал как SQL-процессор гетерогенных данных. Концепция работы в общем такова, что он берет данные из некоторого формата и преобразует их в табличный вид (собственно говоря, только на этом этапе и выполняется иногда парсинг). Затем, посредством выполнения над этими табличными данными некоторого SQL-запроса формирует таблицу с результатом и сохраняет ее опять же в некотором формате. Если коротко, то цепочка выглядит как подготовка входных данных->SQL-процессинг->генерация выходных данных.",
        "link": "https://habr.com/ru/post/85758/"
    },
    {
        "title": "Node.JS и выгрузка каталога из 1С на сайт",
        "body": "На днях закрыли очередной проект. Суть: создание новой версии интернет-каталога. Старая версия сайта, в силу ряда причин, клиента не устраивала. Особенностью проекта была его номенклатурная база. Объём номенклатуры каталога составлял ~26000 позиций раскиданных по дереву из 513 узлов + характеристики товара. Почти каждая номенклатурная позиция имела описание на 1-2К текста.\n\nФайл выгрузки каталога в формате ComerceML 2 для старого сайта весил 104 MB. Формировался на стороне 1С 10 минут и после передачи на хостинг, парсился на стороне сайта полтора часа (!) со 100% загрузкой CPU.\n",
        "link": "https://habr.com/ru/post/189812/"
    },
    {
        "title": "Простой интерпретатор с нуля на Python (часть 3)",
        "body": "\n\nСодержаниеПростой интерпретатор с нуля на Python #1\nПростой интерпретатор с нуля на Python #2\nПростой интерпретатор с нуля на Python #3\nПростой интерпретатор с нуля на Python #4\n\nРазъяснение к публикацииПользователь @duse ранее выкладывал переводы двух предыдущих статей, явно намереваясь перевести всю серию. Так как тема меня очень интересует, а новых переводов нет, обратился к первоисточнику. С английским не очень силён, чтобы не терять суть, стал переводить на русский. Так и родился этот перевод. Прошу прощения у @duse в случае, если мне стоило ещё чуточку потерпеть. Но для сообщества в любом случае должна быть польза.\n\n\nТаким образом, мы написали лексер библиотеку комбинатора парсеров для нашего интерпретатора. В этой части, мы создадим структурные данные абстрактного синтаксического дерева (AST), и напишем парсер, используя нашу библиотеку комбинаторов, которые переводят список токенов, возвращенных лексером, в абстрактное синтаксическое дерево (AST). После того, как мы распарсим AST, запустить программу будет очень просто.\n\n",
        "link": "https://habr.com/ru/post/208872/"
    },
    {
        "title": "Как обойтись почти без исключений, заменив их уведомлениями",
        "body": "Здравствуйте, Хабр.\n\nИногда попадаются статьи, которые хочется перевести просто за имя. Еще интереснее, когда такая статья может пригодиться специалистам по разным языкам, но содержит примеры на Java. Совсем скоро надеемся поделиться с вами нашей новейшей идеей по поводу издания большой книги о Java, а пока предлагаем ознакомиться с публикацией Мартина Фаулера от декабря 2014, которая до сих пор не была переведена на русский язык. Перевод сделан с небольшими сокращениями.\n",
        "link": "https://habr.com/ru/company/piter/blog/270331/"
    },
    {
        "title": "Elixir: делаем код расширяемым с помощью Behaviour",
        "body": "\nИтак, определим диспозицию… Вы написали кусочек кода, который вы хотите использовать с большим количеством разных \"вещей\" — звучит не очень научно, но всё же. Эти разные вещи объединяет какое-то общее свойство, через которое они достигают одинакового результата на высоком уровне абстракции; только вот пути достижения результата могут быть совершенно разными.\nЧасто ваш код должен использовать только одну такую вещь за раз, но вы же не хотите делать ваш код настолько узким? Это просто отвратительно. Разве не замечательно, когда другие люди смогут создать новые \"вещи\" и расширить ваш код, в то время как вы даже не кассаетесь клавиатуры?\nНо разве я не могу выбрать конкретную реализацию и использовать её? Мне больше ничего и не надо....Вы конечно можете. Но что случится, если вы поменяете своё мнение о \"вещи\", которую вы используете. Вдруг ваша конфетка без обёртки окажется не тем, чем кажется? А вдруг ещё хуже — вашу дивную \"штучку\" перестанут поддерживать? В этаких ужасных условиях было бы круто, если бы вы могли быстро поменять одно на другое, не меняя при этом вообще всё что мы написали. Прально?",
        "link": "https://habr.com/ru/post/312442/"
    },
    {
        "title": "Руководство по созданию расширений для Jinja2",
        "body": "Jinja2 — Python-библиотека для рендеринга шаблонов, являющаяся де-факто стандартом при написании веб-приложений на Flask и довольно популярной альтернативой встроенной системе шаблонов Django. Хотя и будучи сильно привязана к языку, Jinja2 позиционирует себя как инструмент для дизайнеров и верстальщиков, упрощающий вёрстку и отделяющий её от разработки, и пытающийся по мере возможностей изолировать не-разработчиков от Python. Вёрстка, впрочем, не единственное возможное её применение; например, в своей работе я использую шаблоны Jinja2 для генерации SQL-запросов.\n\nJinja2 расширяема, и многие возможности (например, интернационализация и управление циклами) реализованы именно как расширения. Однако, документация по написанию расширений, как мне кажется, несколько неполна; от примера несложного (но тщательно прокомментированного) расширения она перескакивает сразу к описанию API некоторых классов Jinja2, которое довольно трудно читать подряд. В этой статье я попытаюсь исправить это упущение и создать в голове читателя полную и ясную картину того, как работает Jinja2, как устроены её расширения и как с помощью расширений модифицировать разные этапы обработки шаблонов.",
        "link": "https://habr.com/ru/post/340254/"
    },
    {
        "title": "Intel Edison. Работа с облаком Intel IoT Analytics: управление устройством",
        "body": "\n\nПродолжение работы с облаком Intel IoT Analytics, будет посвящена обратной связи с устройством, отправка команд для управления устройством. Первая часть Intel Edison. Работа с облаком Intel IoT Analytics: регистрация и отправка данных. Реализуем операции включения/выключения светодиода и реле. Для демонстрации, возьмем стенд из предыдущего поста.\nДля отправки команд устройству используется специальный тип компонента — Actuation. В предыдущем посте рассматривался тип компонента “sensor”, который позволяет отправлять данные с устройства. Actuation передает данные по протоколу MQTT и WebSocket. Этот тип компонента вызывает команду “command String” и для нее параметры имя/значение.\n",
        "link": "https://habr.com/ru/post/384631/"
    },
    {
        "title": "Работа с библиотекой Newtonsoft.Json на реальном примере. Часть 1",
        "body": "Если Вы читаете данную статью, значит, скорее всего, Вы в курсе что такое JSON и картинка ниже Вам знакома. Но в любом случае советую посетить эту страничку, если Вы там еще не были, а так же перед прочтением желательно ознакомиться с общими принципами работы с нотацией JSON на языке C#, например по этой ссылке.\n\n\n",
        "link": "https://habr.com/ru/post/481514/"
    },
    {
        "title": "Эволюция Docker. Часть 2.3",
        "body": "Данная статья является четвертой в цикле (1, 2, 3), посвященном изучению исходного кода Docker и прямым продолжением предыдущей статьи, которую мне пришлось преждевременно завершить в виду зависания редактора хабра. В этой статье мы закончим изучать код первого публичного релиза Docker v0.1.0. Будут рассмотрены оставшиеся команды по управлению контейнерами, сетевой стек, а также создание образа и запуск контейнера.",
        "link": "https://habr.com/ru/post/575296/"
    },
    {
        "title": "Лямбда-исчисление в 397 байтах",
        "body": "\nЛямбда-исчисление — это язык программирования с единственным ключевым словом. Это асфальтовая топь Тьюринга, обнаруженная научным руководителем Тьюринга. В этом посте я расскажу о совершенно новой 397-байтной реализации двоичного лямбда-исчисления в виде Linux ELF для x86-64. Также в нём представлены удобно портируемый код на C и собранные двоичные файлы APE для других платформ.",
        "link": "https://habr.com/ru/post/654273/"
    },
    {
        "title": "Как я разогнал fail2ban* в тысячу раз с помощью SIMD",
        "body": "Fail2ban — утилита чрезвычайно полезная во многих случаях. Думаю, многие используют её для того, чтобы в автоматическом режиме блокировать особенно назойливых «посетителей». К сожалению, если входящий поток становится слишком большим, fail2ban теряет все свои полезные свойства, потому что разбор лога безнадёжно отстаёт от реальности.Лог nginx из 100 тысяч строчек fail2ban при самых простых настройках разбирает порядка 45 секунд. Нехитрыми манипуляциями его можно ускорить раз в 6, но этого оказалось недостаточно. Наивная реализация на аналогичного фильтра на Rust уже обеспечила требуемую производительность, но если уж взялся за оптимизацию, то остановиться трудно.* только необходимую часть функционала",
        "link": "https://habr.com/ru/post/668634/"
    },
    {
        "title": "Сканер уязвимостей на Python или как написать сканер за 6 часов",
        "body": "Сканер уязвимостей на Python или как написать сканер за 6 часовНедавно мне довелось участвовать в хакатоне по информационной безопасности на научной конференции в прекрасном городе Санкт-Петербург в СПбГУТ. Одно из заданий представляло из себя написание собственного сканера уязвимостей на любом ЯП  с условиями, что использование проприетарного ПО и фреймворков запрещено. Можно было пользоваться кодом и фреймворками существующих сканеров уязвимости с открытым кодом. Это задание и мое решение с моим коллегой мы и разберем в этой публикации.",
        "link": "https://habr.com/ru/post/689942/"
    },
    {
        "title": "Каркас для web-приложений, построенный на CodeIgniter",
        "body": "\nНаверняка, многие веб-программисты изучали и, может быть, даже использовали такой замечательный фреймворк как CodeIgniter. Мой выбор пал на него ввиду того, что у него самый низкий порог вхождения, он наиболее прост в изучении, хорошая документация, быстрый и т.д. и т.п. Для простых проектов самое «оно», чтоб попробовать свои силы именно как разработчик. Само собой, для более серьезных проектов лучше использовать более функциональные и навороченные фреймворки.\n\nДалее буду описывать, как я «апгрейдил» CodeIgniter, чтобы использовать этот каркас для разных проектов, т.к. базовый его функционал и примеры из документации, мягко говоря, очень простые, а в жизни всё гораздо сложнее. Итак, начнем-с.\n",
        "link": "https://habr.com/ru/post/130387/"
    },
    {
        "title": "Чтение конфигурационных файлов в Java: nProperty",
        "body": "\nМногие разработчики сталкиваются с необходимостью чтения конфигурационных (*.ini, *.prop, *.conf, etc.) файлов в разрабатываемых приложениях. В Java есть стандартный класс Properties, с помощью которого можно очень легко загрузить ini-файл и прочитать его свойства. При большом объеме конфигурационных файлов чтение и запись настроек в объекты превращается в очень нудную и рутинную работу: создать объект Properties, конвертировать каждую настройку в нужный формат и записать его в поле.\n\nБиблиотека nProperty (Annotated Property) призвана упростить этот процесс, сократив примерно в два раза требуемый код для написания загрузчиков настроек.\n\nЧтобы показать, каким образом возможно обещанное сокращение кода в два раза, ниже приведены два примера: в первом примере используется стандартный класс Properties, во-втором — nProperty.\n\n",
        "link": "https://habr.com/ru/post/194658/"
    },
    {
        "title": "$mol_atom: теория и практика реактивности",
        "body": "Здравствуйте, меня зовут Дмитрий Карловский и я… состоятельный человек. У меня есть состояние на сервере, есть состояния в локальных хранилищах, есть состояние окна браузера, есть состояние доменной модели, есть состояние интерфейса. И всё это многообразие состояний нужно поддерживать синхронизированным. Если одно состояние как-то изменяется, то остальные связанные с ним состояния должны как можно скорее обновиться. Особую пикантность ситуации придаёт то, что синхронизация с сервером может занимать секунды, а блокировать пользовательский интерфейс можно лишь на доли секунд.\n\nДалее вы узнаете: как реактивность побеждает асинхронность, как императивная реактивность уживается с функциональной, как простые абстракции позволяют писать надёжный и быстрый код, а также как я однажды перешёл на идемпотентную сторону силы и всё заверте",
        "link": "https://habr.com/ru/post/317360/"
    },
    {
        "title": "Простой http-сервер на Wolfram Language",
        "body": "Преамбула\n\nПринципиальная схема работы сервера\nИдея написания этой статьи возникла у меня после прочтения похожей статьи на Хабрахабр, где рассказывается о том, как создать собственный сервер на localhost с использованием Mathematica. Сам веб-сервер был написан с использованием Python и расширяемого сервера Tornado. Он обрабатывал запросы и отправлял ответы в формате json, а логика была реализована в Mathematica. При этом общение между Python и Mathematica происходило при помощи командной строки, а каждый запрос на сервер перезапускал ядро Математики. Остальные подробности можно прочитать в самой статье автора @Nilis. Здесь я хотел бы показать как написать простой код, который будет выполнять аналогичные функции — то есть создать http-сервер для обработки запросов и отправки ответов. Плюс хотелось бы показать некоторые интересные возможности Wolfram Language и его синтаксиса. ",
        "link": "https://habr.com/ru/company/wolfram/blog/320196/"
    },
    {
        "title": "Как мы перевели конфигурирование наших сервисов с XML на YAML",
        "body": "Предыстория вопроса\nНашей компанией, среди прочего, разработаны несколько сервисов (точнее — 12), работающих бэкендом наших систем. Каждый из сервисов представляет собой Windows-службу и выполняет свои специфические задачи.\n\nХочется все эти сервисы перенести под *nix-ОС. Для этого надо отказываться от обёртки в виде Windows-служб и переходить с .NET Framework на .NET Standard. \n\nПоследнее требование приводит к необходимости избавиться от некоторого Legacy-кода, который не поддерживается в .NET Standard, в т.ч. от поддержки конфигурирования наших серверов через XML, реализованного с использованием классов из System.Configuration. Заодно таким образом решается и давняя проблема, связанная с тем, что в XML-конфигах мы время от времени ошибались при изменении настроек (например, иногда не туда ставили закрывающий тэг или забывали его вовсе), а замечательная читалка XML-конфигов System.Xml.XmlDocument молча проглатывает такие конфиги, выдавая совсем непредсказуемый результат.\n\nБыло решено перейти на конфигурирование через модный YAML. Какие проблемы при этом перед нами встали, и как мы их решили — в этой статье.",
        "link": "https://habr.com/ru/company/utex/blog/438362/"
    },
    {
        "title": "Python vs. Scala для Apache Spark — ожидаемый benchmark с неожиданным результатом",
        "body": "\nApache Spark на сегодняшний день является, пожалуй, наиболее популярной платформой для анализа данных большого объема. Немалый вклад в её популярность вносит и возможность использования из-под Python. При этом все сходятся на том, что в рамках стандартного API производительность кода на Python и Scala/Java сопоставима, но касательно пользовательских функций (User Defined Function, UDF) единой точки зрения нет. Попробуем разобраться в том, насколько увеличиваются накладные расходы в этом случае, на примере задачи проверки решения SNA Hackathon 2019.",
        "link": "https://habr.com/ru/company/vk/blog/443324/"
    },
    {
        "title": "Конспектируем Книгу Rust:: Времена и структуры",
        "body": "Продолжаем работать с 10.3. \nКМБ.- Двойная жизнь.- Восстание мертвецов.- Ошибка в документации.- Ужасающие подробности из The Rustonomicon.- Архитектурные озарения.- Развязка.\n\nПредыдущая часть: Времена и функции\nНачало и содержание: Владение\n",
        "link": "https://habr.com/ru/post/569496/"
    },
    {
        "title": "Пользовательские типы и std::format в C++20",
        "body": "std::format — очень полезное (и серьезное) нововведение C++20, позволяющее нам форматировать текст в строки удобным и эффективным образом. Оно привносит в язык форматирование в стиле Python в сочетании с безопасностью и простотой использования.В этой статье я расскажу, как реализовать пользовательские средства форматирования (форматтеры) в соответствии с новой std::format архитектурой.",
        "link": "https://habr.com/ru/company/otus/blog/686900/"
    },
    {
        "title": "(Как написать (Lisp) интерпретатор (на Python))",
        "body": "\n\nПеревод статьи \"(How to Write a (Lisp) Interpreter (in Python))\" Питера Норвига. В данной статье Питер довольно кратко, но емко описывает принцип работы интерпретаторов и показывает как можно написать совсем крошечный (всего 90 строк на Python) интерпретатор подмножества языка Scheme. Перевод публикуется с разрешения автора.\n\nПитер Норвиг (англ. Peter Norvig) — американский ученый в области вычислительной техники. В данный момент работает директором по исследованиям (ранее — директор по качеству поиска) в корпорации Google. Ранее являлся главой Подразделения вычислительной техники в исследовательском центре Амес NASA, где он руководил штатом из двухсот ученых, занимающихся разработками NASA в областях анатомии и робототехники, автоматизированной разработке ПО и анализа данных, нейроинженерии, разработки коллективных систем, и принятия решений, основанном на симуляции.\n\n",
        "link": "https://habr.com/ru/post/115206/"
    },
    {
        "title": "Моё маленькое расследование или История одного взлома",
        "body": "Всё началось с сообщения «Тут?» от моего друга в одной из социальных сетей. «Яндекс нашёл на сайте вирусы. Глянешь?» «Отчего ж не глянуть», подумал я.\nТак началось моё трёхдневное исследование скриптов, дабы понять суть взлома и что там вообще происходит.\n",
        "link": "https://habr.com/ru/post/184150/"
    },
    {
        "title": "Windows Phone 8: Создаем приложение. Матрица. Часть 2",
        "body": "Windows Phone 8: Создаем приложение. Матрица. Часть 1\nWindows Phone 8: Создаем приложение. Матрица. Часть 2\n\nЗдравствуйте. Сегодня мы продолжим создание приложения, используем новый шаблон «Панорама», а так же добавим всевозможные настройки, что позволит изменять все параметры матрицы. Сразу оговорюсь, что при задании сильно больших чисел в некоторых настройках, резко понижается производительность, но с этим мы еще будем бороться в следующих частях. \n\nТак же хочу сразу вспомнить основные цели этих статей: это написание приложения с использованием максимального числа всего: различных контролов, техник, шаблонов и т.д. Ну а так же получение конечного продукта с заданными свойствами. \n\n\nСкриншот работы приложения\n",
        "link": "https://habr.com/ru/post/195760/"
    },
    {
        "title": "Закон №139-ФЗ: взгляд со стороны небольшого провайдера",
        "body": "Пару недель назад к моему хорошему знакомому (по совместительству системному администратору в городском, но не очень крупном провайдере) коллеги из Роскомнадзора поставили на вид, что по IP он, конечно, блокирует запрещенные сайты, но по URL или доменным именам совершенно нет, а при смене IP адреса запрещенным ресурсом тот снова начинает открываться. Товарищ пожаловался мне на судьбу, заодно намекнув, что один раз лично его уже штрафовали за невыполнение требований печально известного № 139-ФЗ.\n\n",
        "link": "https://habr.com/ru/post/216209/"
    },
    {
        "title": "Время Perl",
        "body": "\n\nPerl и CPAN предоставляют множество самых разных инструментов для работы с временем. Традиционный и наиболее известный DateTime вызывает столь же традиционные серьёзные нарекания к скорости работы и потреблению памяти, поэтому он постепенно стал вытесняться из нашей системы альтернативными модулями. TIMTOWDI — это замечательно, но в проекте всё-таки хочется иметь какой-никакой порядок. Поэтому мы решили протестировать несколько самых популярных модулей по скорости, функционалу и удобству использования и выбрать тот самый единственный, который станет нашим основным инструментом.\n",
        "link": "https://habr.com/ru/company/regru/blog/254453/"
    },
    {
        "title": "AndroCAD: Rise to Power. Электронщики и Android",
        "body": "Когда-то один чувак произнес: “Государство — это я. Нет меня — нет и государства”. Это было 300 лет назад. Людвиг №16, Король-Солнце. Честно, без подданных он — никто.\n\nНа Хабре часто мелькают success-story “одиночек”. Про то, как одному парню стукнула в голову идея, и он решил создать программу/сервис/сайт. Он накопил мульён/взял кредит, собрал команду/нанял компанию, поруководил полгода/год. И вот, ОН сделал проект! Ай, маладца!\n\nЯ расскажу о проекте настоящего одиночки, с нуля до… Сам не знаю. Ни суксесса, ни фейла не наблюдается. В общем, занимательное чтиво для общего развития.\n\n\n\nДалее: ОЧЕНЬ МНОГО БУКВ.\n",
        "link": "https://habr.com/ru/post/271557/"
    },
    {
        "title": "Как написать свою «песочницу»? Разбор простейшей «песочницы»",
        "body": "\nЕсли вам случалось писать большие приложения, вы, вероятно, использовали такие виртуальные машины, как VMWare, Virtual PC или что-то иное. Но задавались ли вы вопросом: как они работают? Эти удивительные, можно сказать, магические технологии увлекали меня довольно долгое время. Чтобы развенчать «магию» и разобраться в деталях, я написал «с нуля» собственную систему виртуализации – «песочницу». Решение этой задачи было довольно сложным делом. Реализация подобного продукта ставит множество вопросов, ответы на которые вы не найдете в Google, поэтому я хочу поделиться своим опытом с сообществом. \n",
        "link": "https://habr.com/ru/company/infowatch/blog/317396/"
    },
    {
        "title": "Telegram бот для Mikrotik с Webhook и парсером JSON",
        "body": "Как вы думаете, можно ли, используя только Mikrotik скрипт, написать интерактивный Telegram бот, который будет работать целиком в среде маршрутизатора с поддержкой Webhook, входящих событий от API Telegram?",
        "link": "https://habr.com/ru/post/337978/"
    },
    {
        "title": "Великолепная пятерка: must have инструменты для ускорения разработки",
        "body": "\n \nОт переводчика: этот пост — перевод оригинальной статьи Рейндера де Вриса, опытного программиста, разработавшего собственный курс обучения кодингу. Автор делится мыслями об инструментах, которые могут оказаться полезными разработчикам, позволяя ускорить и оптимизировать процесс программирования\n \nСоздание приложения требует достаточно много времени и часто — денег. Иногда у вас может недоставать средств для разработку многофункциональной программы, а бывает, что средства есть, но нужно работать максимально быстро, чтобы не упустить удачный момент для релиза, опередив конкурентов. Что делать — урезать возможности программы, чтобы закончить ее побыстрее, или искать иные способы ускорить процесс?",
        "link": "https://habr.com/ru/company/skillbox/blog/426561/"
    },
    {
        "title": "Простой парсер арифметических операций",
        "body": "Для учёбы необходимо было написать парсер арифметических операций, который мог бы рассчитывать не только простейшие операции, но и работать со скобками и функциями.\n\nВ интернете не нашел готовых и подходящих для меня решений (некоторые были чересчур сложные, другие были не полностью удовлетворяли условиям моей задачи). Немного погрустив, приступил к решению задачи самостоятельно и теперь хочу поделиться своим г****кодом оригинальным решением с миром.\n\nПервая проблема, с которой я столкнулся — скобки. Мало того, что они должны выполняться первыми, так внутри них также могут находиться скобки. И так далее.\n\n\n\nТочно такая же история с функциями — в параметрах функции могут находится другие функции и даже целые выражения.\n\n",
        "link": "https://habr.com/ru/post/439966/"
    },
    {
        "title": "Библиотеки для декодирования видео. Сравнение на Python и Rust",
        "body": "Многие задаются вопросом — насколько медленный Python в операциях декодирования? Правда ли, что компилируемые языки дают прирост скорости во всем, чего касаются? Что быстрее: OpenCV или ничего? Ответы на эти и другие бесполезные вопросы под катом вы прочитать не сможете. Там обычное скучное исследование производительности в конкретной задаче.\nВсе заинтересовавшиеся, добро пожаловать!",
        "link": "https://habr.com/ru/post/467537/"
    },
    {
        "title": "Эволюция Docker. Часть 2.2",
        "body": "Данная статья является третьей в цикле (1,2), посвященном изучению исходного кода Docker и прямым продолжением предыдущей статьи, в которой мы начали разбирать код первого публичного релиза Docker v0.1.0. В этой части будет рассмотрена реализация практически всех команд, а в конце, мы создадим образ и запустим докер контейнер на его основе. Для удобства я постарался разбить список команд на условные группы: работа с образами, работа с контейнерами, сетевой стек и т.д. А теперь, как говорится, “without further ado”, приступим к изучению кода из файла commands.go начиная с команд для управления образами (images).",
        "link": "https://habr.com/ru/post/575256/"
    },
    {
        "title": "Введение в Template Haskell. Часть 2. Инструменты цитирования кода",
        "body": "Данный текст является переводом документации Template Haskell, написанной Булатом Зиганшиным. Перевод всего текста разбит на несколько логических частей для облегчения восприятия. Далее курсив в тексте — примечания переводчика. Другие части:\n\nЧасть 1. Необходимый минимум\nЧасть 3. Прочие аспекты TH\n\n\nМонада цитирования\nПоскольку шаблоны должны возвращать свои значения обёрнутыми в монаду Q, для этого имеется набор вспомогательных функций, которые “поднимают” (оборачивают в Q) конструкторы типов Exp, Lit, Pat: lamE (соотв. LamE), varE, appE, varP и т.д. В их сигнатурах так же используются переобозначенные поднятые типы: ExpQ = Q Exp, LitQ = Q Lit, PatQ = Q Pat… (все их можно найти в модуле Language.Haskell.TH.Lib). Используя эти функции, можно значительно сократить код, реже используя do-синтаксис.\nВ TH также есть функция lift, которая поднимает до Q Exp значение любого типа из класса Lift.\nВ некоторых редких случаях, вам может понадобиться не генерация уникального имени, а использование точного имени идентификатора из внешнего (по отношению к шаблону) кода. Для этих целей есть (чистая) функция mkName ∷ String → Name. Есть также вспомогательная функция dyn s = return (VarE (mkName s)), которая возвращает значение Exp представляющее переменную с данным именем (dyn ∷ String → Q Exp).\n\nЦитирующие скобки\nПостроение значений Exp, представляющих абстрактное синтаксическое дерево — трудоёмкая и скучная работа. Но к счастью, в Template Haskell есть цитирующие скобки, которые преобразуют конкретный Haskell-код в структуру, представляющую его. ",
        "link": "https://habr.com/ru/post/132679/"
    },
    {
        "title": "PHP: фрактал плохого дизайна",
        "body": "Предисловие\nЯ капризный. Я жалуюсь о многих вещах. Многое в мире технологий мне не нравится и это предсказуемо: программирование — шумная молодая дисциплина, и никто из нас не имеет ни малейшего представления, что он делает. Учитывая закон Старджона, у нас достаточно вещей для постижения на всю жизнь.\n\nТут другое дело. PHP не просто неудобен в использовании, плохо мне подходит, субоптимален или не соответствует моим религиозным убеждениям. Я могу рассказать вам много хороших вещей о языках, которых я стараюсь избегать, и много плохих вещей о языках, которые мне нравятся. Вперёд, спрашивайте! Получаются интересные обсуждения.\n\nPHP — единственное исключение. Фактически каждая деталь PHP в какой-то мере поломана. Язык, структура, экосистема: всё плохо. И даже нельзя указать на одну убийственную вещь, настолько дефект систематичный. Каждый раз, когда я пытаюсь систематизировать недостатки PHP, я теряюсь в поиске в глубину обнаруживая всё больше и больше ужасных мелочей(отсюда фрактал).\n\nPHP — препятствие, отрава моего ремесла. Я схожу с ума от того, насколько он сломан и насколько воспеваем каждым уполномоченным любителем нежелающим научиться чему-либо ещё. У него ничтожно мало оправдывающих положительных качеств и я бы хотел забыть, что он вообще существует.\n",
        "link": "https://habr.com/ru/post/142140/"
    },
    {
        "title": "jParser: анализ двоичных файлов работает просто",
        "body": "jParser делает простым чтение структур данных из двоичных файлов джаваскриптом.\n\n\nВы один раз описываете структуру, анализ её происходит автоматически.\n \nПроцесс анализа данных может быть расширен самописными функциями. Чем упрощается разбор нетривиальных файлов.\n \njParser действует и во браузере, и в NodeJS, потому что работает на основе jDataView.\n\nAPIЭлементарные структуры:\n\n\nЦелые числа без знака: uint8, uint16, uint32\n \nСо знаком: int8, int16, int32\n \nДробные с плавающей точкой: float32, float64\n \nСтроковые: char, string(len)\n \nМассив: array(type, len)\n \nПоложение: tell, skip(len), seek(pos), seek(pos, func)\n\nМетоды jParser:\n\n",
        "link": "https://habr.com/ru/post/144008/"
    },
    {
        "title": "Внутренняя работа плагина unobtrusive jQuery validate в ASP.Net MVC",
        "body": "Это 3 часть серии «Понимание ненавязчивой валидации в ASP.Net MVC».\n\n1. Работа плагина jQuery validate изнутри \n2. Понимание Html-кода, сгенерированного ненавязчивой валидацией в ASP.Net MVC\n3. Внутренняя работа плагина unobtrusive jQuery validate в ASP.Net MVC.\n\nО чем мы поговорим в этой статье:\n\nМетод «parse»\n\nсекция «parceElement»\n\nобъяснение параметра «skipAttach»\nобъяснение функции «parceElement»\n\n\nсекция «validateInfo»\n\nобъяснение функции «validateInfo»\n объяснение объекта «return»\n\n\n\n\nАдаптеры\n\n\nМетод «parse»\nМы объясним цикл ненавязчивой валидации, который происходит, когда документ загружается, и поймем роль каждого компонента.\nЕсли мы посмотрим в конец jquery.validate.unobtrusive.js мы найдем\n\n$(function () {\n  $jQval.unobtrusive.parse(document);\n});\n\nИтак, мы вызываем метод «parse()» и передаем ему «document»\nЧто представляет собой метод «parse()»?",
        "link": "https://habr.com/ru/post/181758/"
    },
    {
        "title": "Эволюция алгоритма Test The Text",
        "body": "Test The Text выделяет стоп-слова в тексте. Стоп-слова делают текст тяжелее, слабее, длиннее.\n\nСтоп-слова делятся на несколько категорий:\n— модальные глаголы;\n— усиляющие и обобщенные определения и наречия;\n— клише и канцеляризмы;\n— гиперонимы;\n— паразиты времени;\n— отглагольные существительные;\n— пассивный залог;\n— наречия;\n— причастные обороты.\n\nПрототип выделял модальные глаголы, используя список «мочь», «долженствовать» и «нуждаться» во всех формах:\n\n    'modal': {\n        'can': u\"\"\"могу, мог, могла, можешь, может, могло, можем, можете, могли, могут, \n                        смог, смогла, смогли, сможет, можно, нужен\"\"\",\n        'need': u'нуждаться, нуждается, нужно, нужна, нужны',\n        'should': u'должен, должна, должны, должно',\n        'other': u'стоит, обязан, следует, необходимо, требуется'\n    },\n\n ",
        "link": "https://habr.com/ru/company/ttt/blog/204898/"
    },
    {
        "title": "Обещания JavaScript",
        "body": "Всем привет, и ещё раз всех с прошедшими праздниками. Трудовые будни набирают обороты и вместе с ними растёт информационный голод мучающий нас. Мир разработки переднего конца не дремлет и готовит нам много сюрпризов в наступившем году, и уж поверьте мне, скучно не будет ни кому. Одна из новых особенностей которые нам готовят разработчики браузеров совместно с группами разработчиков пишущих спецификации — JavaScript Promises(далее в переводе — Обещания, прошу сильно не бить) — полюбившийся многим шаблон написания асинхронного кода обзаводится нативной поддержкой. Что же такое обещания и с чем их едят можно прочесть в нижеследующем переводе(слегка вольном) замечательной статьи Джейка Арчибальда. \n\n",
        "link": "https://habr.com/ru/post/209662/"
    },
    {
        "title": "Удаленное включение по Mac-адресу C# (Wake On Lan)",
        "body": "В этой статье я хотел бы поделиться небольшим опытом удаленного включения компьютера. Эта тема, пожалуй, многим известна, но хотелось бы еще раз уделить внимание данной технологии. Свою статью я разделю на две части: \n\nСканирование локальной сети, получение IP-адреса, HostName, Mac-address;\nСоздание \"magic packet\" и отправка.\n\nВот так примерно выглядит созданная программа:\n\n\n\nИтак, приступим к выполнению первого пункта.\n",
        "link": "https://habr.com/ru/post/262699/"
    },
    {
        "title": "В помощь аналитику: пишем свою автоматическую выгрузку отчетов Яндекс.Метрики с помощью AWS бесплатно",
        "body": "В своей практике работы аналитиком мне часто приходится сталкиваться с ситуациями, когда коллеги ежедневно тратят много времени на нудную выгрузку данных для очередной отчетности. Если для Google Analytics и других продуктов Google написано множество плагинов, сервисов и надстроек для Excel, то для Яндекс Метрики и других аналитических систем удалось найти только пару-тройку библиотек 2013 года.\n\nПри работе с рекламными системами типа Adfox ситуация не менее «тяжелая». Многочисленные выгрузки вручную могут со временем вогнать в депрессию кого угодно, совершенно не оставив времени на полезную часть этого действия: анализ и выводы на основе этих данных. Иногда выходом является обращение за помощью к разработчикам, которые могут помочь с настройкой выгрузки необходимых данных. Однако на практике требования к отчетам часто меняются, а постоянно дергать разработчиков не получится.\n\nВ этой и следующих статьях я покажу как с помощью Amazon Web Services просто настраивать автоматическую выгрузку данных. На AWS можно в течение 12 месяцев пользоваться бесплатным аккаунтом, в лимиты которого входит описанный в статье алгоритм. Можно выбрать и любой другой сервис аренды вычислительных мощностей, однако совсем бесплатных я не встречал. К тому же на инстансах AWS уже есть питон с нужными библиотеками.\n",
        "link": "https://habr.com/ru/post/265383/"
    },
    {
        "title": "Найди коррупционера. Анализ данных чиновников из проектов Канцелярской сотни (с примерами на R)",
        "body": "Как определить чиновников, наиболее подозрительных с точки зрения коррупции? Проще всего — сравнив их доходы и уровень жизни. \n\nВ этой статье я хочу показать возможности сайтов с открытой информацией о чиновниках, посмотреть на то, как эти чиновники живут и попытаться определить тех, кто наиболее подозрителен с точки зрения коррупции. \n\nПочему открытая информация о доходах чиновников важна? Потому что это позволяет их контролировать. \n\n\nФото из инстаграмма дочери бывшего руководителя ГАИ Украины Александра Ершова. На фото дочь Ершова в Каннах рядом с Пэрис Хилтон. В результате скандала из-за несоответствия задекларированных доходов и образа жизни семьи Ершов подал в отставку.\n",
        "link": "https://habr.com/ru/post/271773/"
    },
    {
        "title": "Затмение на острове Java или внимательней читайте стэктрейсы",
        "body": "Я занимаюсь веб-разработкой, на работе мы используем стэк технологий на scala для наших проектов, основу этого стэка составляет Lift framework, также известный как liftweb. Lift использует sbt для управления сборкой и jetty или другой контейнер сервлетов как веб-сервер.\n\nОднажды мне пришлось поработать из дома, работалось прекрасно, разработческая версия сервера запускалась, все было как обычно. Но на следующий день, когда я вернулся к работе в офисе, при первом же запуске сервера случился полный облом. На экране консоли прямо во время запуска широко раскинулось исключение java.net.ConnectException с текстом Connection timed out: connect и трейсом на 86 строк. К сожалению, не было написано куда именно оно не смогло установить подключение. Поскольку сервер только запускается, единственное соединение, которое он должен пытаться установить — это LISTEN на определенном порту. Но исключение явно не об этом. Мало того, на порту уже отвечали с какой-то ошибкой больше 500.",
        "link": "https://habr.com/ru/post/277373/"
    },
    {
        "title": "Пишем изящный парсер на Питоне",
        "body": "В C++17 (нет-нет, Питон скоро будет, вы правильно зашли!) появляется новый синтаксис для оператора if, позволяющий объявлять переменные прямо в заголовке блока. Это довольно удобно, поскольку конструкции вида\n\nFoo foo = make_foo();\nif(foo.is_nice()) {\n    // do work with foo\n}\n// never use foo again\n// foo gets deleted\n\nдовольно общеупотребительны. Код выше лёгким движением руки программиста (и тяжёлым движением руки комитета по стандартизации) превращается в:\n\nif(Foo foo = make_foo(); foo.is_nice()) {\n    // do work with foo\n}  // foo gets deleted\n// never use foo again (well, you can't anyway)\nСтало чуть-чуть лучше, хотя всё ещё не выглядит идеально. В Python нет и такого, но если вы ненавидите if в Python-коде так же сильно, как я, и хотите научиться быстро писать простые парсеры, то добро пожаловать под кат. В этой статье мы попытаемся написать короткий и изящный парсер для JSON на Python 2 (без каких-либо дополнительных модулей, конечно же). \n",
        "link": "https://habr.com/ru/post/309242/"
    },
    {
        "title": "JavaScript: методы асинхронного программирования",
        "body": "Синхронный код на JavaScript, автор которого не стремился сбить с толку тех, кто этот код будет читать, обычно выглядит просто и понятно. Команды, из которых он состоит, выполняются в том порядке, в котором они следуют в тексте программы. Немного путаницы может внести поднятие объявлений переменных и функций, но чтобы превратить эту особенность JS в проблему, надо очень постараться. У синхронного кода на JavaScript есть лишь один серьёзный недостаток: на нём одном далеко не уехать.\n\n\n\nПрактически каждая полезная JS-программа написана с привлечением асинхронных методов разработки. Здесь в дело вступают функции обратного вызова, в просторечии — «коллбэки». Здесь в ходу «обещания», или Promise-объекты, называемые обычно промисами. Тут можно столкнуться с генераторами и с конструкциями async/await. Асинхронный код, в сравнении с синхронным, обычно сложнее писать, читать и поддерживать. Иногда он превращается в совершенно жуткие структуры вроде ада коллбэков. Однако, без него не обойтись.\n\nСегодня предлагаем поговорить об особенностях коллбэков, промисов, генераторов и конструкций async/await, и подумать о том, как писать простой, понятный и эффективный асинхронный код.",
        "link": "https://habr.com/ru/company/ruvds/blog/337662/"
    },
    {
        "title": "Parcel — пишем плагин",
        "body": "\nВ прошлой статье я рассказал про новый бандлер Parcel, который не требует конфигурирования и готов к бою сразу после установки. Но что делать, если вдруг стандартного набора ассетов не хватает? Ответ прост — написать свой плагин.",
        "link": "https://habr.com/ru/post/344858/"
    },
    {
        "title": "Julia. Веб-сервисы",
        "body": "\nПродолжаем рассматривать технологии Julia. И сегодня речь пойдёт о пакетах, предназначенных для построения веб-сервисов. Не секрет, что основная ниша языка Julia — высокопроизводительные вычисления. Поэтому, довольно логичным шагом является непосредственное создание веб-сервисов, способных выполнять эти вычисления по запросу. Безусловно, веб-сервисы — не единственный способ коммуникации в сетевой среде. Но, поскольку, именно они сейчас наиболее широко используются в распределённых системах, то рассмотрим именно создание сервисов, обслуживающих HTTP-запросы.\nОтметим, что в силу молодости Julia, имеется набор конкурирующих пакетов. Поэтому попробуем разобраться как и для чего их использовать. Попутно сравним реализации одного и того же JSON-веб-сервиса с их помощью.",
        "link": "https://habr.com/ru/post/449338/"
    },
    {
        "title": "Вывод информации на дисплей покупателя",
        "body": "Появился дисплей покупателя. Интересно стало попробовать его использовать в качестве информационного табло для вывода информации о текущем дне, времени до конца рабочего дня/недели, информации о погоде, курсе валют.\nПри этом не хотел использовать ресурсоёмкие приложения и свой ПК. Остановился на связке мини-ПК Raspberry + Linux + Дисплей покупателя.\n",
        "link": "https://habr.com/ru/post/457352/"
    },
    {
        "title": "Пишем свой парсер математических выражений и калькулятор командной строки",
        "body": "\n\nПримечание: полный исходный код проекта можно найти здесь.\nВы когда-нибудь задавались вопросом, как цифровой калькулятор получает текстовое выражение и вычисляет его результат? Не говоря уже об обработке математических ошибок, семантических ошибок или работе с таким входными данными, как числа с плавающей запятой. Лично я задавался!\n\nЯ размышлял над этой задачей, проводя инженерные разработки для моей магистерской работы. Оказалось, что я трачу много времени на поиск одних и тех же физических единиц измерения, чтобы проверить преобразования и правильность своих вычислений.",
        "link": "https://habr.com/ru/company/vdsina/blog/540608/"
    },
    {
        "title": "Парсим URL",
        "body": "Хочу поделиться одной полезной утилиткой, написанной на pure JavaScript, — URL. По сути это небольшой парсер URL'ов, работающий почти как window.location, но не перезагружающий страницу браузера при манипуляциях.\n\nА заодно скажу пару слов про getters & setters в JavaScript. \n\nUPD1: по просьбам трудящихся, вынесу сюда примеры:\n// Пусть текущий URL = 'http://my.site.com/somepath/'\nvar u = new URL('relative/path/index.html')\nu.href // my.site.com/somepath/relative/path/index.html\nu.href = '/absolute/path.php?a=8#some-hash'\nu.href // my.site.com/absolute/path.php?a=8#some-hash\nu.hash // #some-hash\nu.protocol = 'https:'\nu.href // my.site.com/absolute/path.php?a=8#some-hash\nu.host = 'another.site.com:8080'\nu.href // another.site.com:8080/absolute/path.php?a=8#some-hash\nu.port // 8080\n// и так далее, и тому подобное\n\n* This source code was highlighted with Source Code Highlighter.\nРаботает в FF3+ (может и в 2+, не пробовал) и в IE6+ ( и это — моё ноу-хау :-) ).\nРазобрана в статье также полностью кросс-браузерная реализация, но в использовании — немного более громоздкая:\n// Пусть текущий URL = 'http://my.site.com/somepath/'\nvar u = new URL('relative/path/index.html')\nu.href() // my.site.com/somepath/relative/path/index.html\nu.href('/absolute/path.php?a=8#some-hash')\nu.href() // my.site.com/absolute/path.php?a=8#some-hash\n// и т.д.\n\n* This source code was highlighted with Source Code Highlighter.\n\nДа, и я привожу свой листинг полностью, извиняйте, так надо.\n\n",
        "link": "https://habr.com/ru/post/65407/"
    },
    {
        "title": "Введение в шаблонизатор Blitz",
        "body": "Из документации о Blitz: Чрезвычайно быстрый и мощный шаблонизатор для очень больших интернет-проектов.\n\nПриведу несколько фактов:\n\nЭто шаблонизатор используемый Хабром;\nЭтот шаблонизатор используется на высоко-нагруженных проектах, он написан на C, подключается как расширение PHP;\nЕго скорость сопоставима с самим php (бенчмарк под катом); \nВерстальщики будт счастливы, так как в шаблонах нет логики приложения, нет циклов, ветвлений и т.д.;\nОдин из его авторов Алексей Рыбак fisher.\n\n\n",
        "link": "https://habr.com/ru/post/93720/"
    },
    {
        "title": "Учебный курс. Создание модели данных Entity Framework для приложения ASP.NET MVC",
        "body": "На примере веб-приложения для Contoso University мы продемонстрируем создание приложений ASP.NET MVC с использованием Entity Framework, в функциональность которого будут входить такие возможности как принятие стуентов, создание курсов и назначение преподавателей.\n\nДанные учебные материалы объяснят по шагам процесс создания веб-приложения для Contoso University. Вы можете скачать готовое приложение или создать его согласно приведенной последовательности шагов. Примеры приведены на C#, примеры кода доступны в C# и VB. Если у вас есть вопросы, косвенно касающиеся учебных материалов, вы можете задать их ASP.NET Entity Framework forum или Entity Framework and LINQ to Entities forum.\n\nОбучение предполагает наличие знаний по работе с ASP.NET MVC в Visual Studio, в противном случае хорошее место для начала обучения ASP.NET MVC Tutorial. Если вы предпочитаете работать с ASP.NET Web Forms, обратите внимание на Getting Started with the Entity Framework и Continuing with the Entity Framework.\n\n",
        "link": "https://habr.com/ru/company/microsoft/blog/133316/"
    },
    {
        "title": "Генератор Федеративного Фильтра Калмана с использованием Генетических Алгоритмов",
        "body": "В рамках своей научной активности реализовал так называемый Федеративный Фильтр Калмана (Federated Kalman Filter). В этой статье рассказывается о том, что такое «Федеративный ФК», чем он отличается от обобщенного, а также описывается консольное приложение, реализующее данный фильтр и генетические алгоритмы для подбора параметров его математической модели. Приложение было реализовано с использованием TPL (Task Parallel Library), поэтому пост будет интересен не только специалистам по цифровой обработке сигналов.\n\nUPD1: после прочтения двух недавних статей решил тоже присоединиться к эксперименту/исследованию/авантюре (называйте как хотите). В конце статьи добавил еще один опрос — \"Стали бы Вы поощрать рублем такие узко специализированные статьи на Хабрахабре?\".\n\n",
        "link": "https://habr.com/ru/post/178453/"
    },
    {
        "title": "Пишем простейший скриптовый язык программирования на C# (Часть 1)",
        "body": "Добрый день, %username%. Сегодня мы будем писать скриптовый язык программирования на C#, а точнее его интерпретатор.\n\nПролог\nЯ изучаю C# уже год, но никак не могу его нормально выучить. Подумав чуть-чуть я понял что нужно писать что-то более сложное, и в процессе этого получать опыт. Я решил написать интерпретатор Brainfuck. Написал его я минут за 5, но он так и остался без циклов. Затем я начал придумывать свой язык, писал кучу концептов синтаксиса и т.д.\nСкорее под кат!\n",
        "link": "https://habr.com/ru/post/179529/"
    },
    {
        "title": "FORTH: POP3 наноклиент. Часть 2",
        "body": "Во второй части попробуем написать минимального POP3 клиента. Он будет уметь подключаться к серверу, логиниться в почтовый ящик, узнавать сколько там писем и скачивать последнее. Для иллюстрации этого будет достаточно. \n",
        "link": "https://habr.com/ru/post/210128/"
    },
    {
        "title": "Sqimitive.js — Frontend Primitive или «Backbone без фантиков»",
        "body": "Уже довольно давно большинство сайтов перестало быть набором HTML/PHP/CSS/JS-файлов, которые достаточно просто загрузить на сервер. Bower, Grunt, Component.js, AMD, Require.js, CoffeeScript, Clojure, Composer, npm, LESS и ещё 100500 инструментов — всё это сегодня применяется для сборки проектов, обновления компонентов, загрузки зависимостей, сжатия кода, компиляции из одного JavaScript в другой, подтасовки карт, прополки огорода и даже готовки яичницы.\n\nМногих людей это вдохновляет. Да что там — 95% моих знакомых в один голос твердят, как подключив всего пару-тройку библиотек с особой, уличной магией можно забабахать сайт на over-9000 зелёных австралийских долларов — и всего за один вечер, с перерывом на кофе и бублики.\n\nА я — странный человек. Не люблю смешения языков, технологий, библиотек. Angular, Knockout, React — они все хороши, но каждая — по-своему сложна. А ведь есть и «гибриды», где сходится сразу несколько миров — как Ember и Knockout.Bootstrap. Вдобавок, многие построены на jQuery — впрочем, к ней даже у меня претензий нет; наверное, таким и должен был быть JavaScript.\n\nКак бы то ни было, реальность беззастенчиво входит в контакт с мечтами и расставляет точки над «i». Мне так же приходится писать на «new & popular» — а когда пишешь, душа томится и просится создать очередной велосипед… а ей разве откажешь? Она ведь как дитя малое.\n\nВелосипед был создан. Велосипед без фантиков. Такой же простой, как автомат Калашникова, и многогранный, как швейцарский нож, где вместо наследования — события, вместо моделей, коллекций и представлений — один класс, с неограниченной вложенностью и полной свободой действий, почти в два раза меньший Backbone.js, использующий Underscore.js и, необязательно, jQuery/Zepto.\n\nДобро пожаловать в Sqimitive.\n",
        "link": "https://habr.com/ru/post/239149/"
    },
    {
        "title": "Инфраструктура разработки приложения на PhoneGap для iOS и Android",
        "body": "Сегодня я расскажу вам о нашем опыте разработки кросс-платформенных мобильных приложений на основе PhoneGap/Cordova. В проекте используются такие технологии, как HTML5, CSS3 и Angular.js. Grunt применяется в качестве task manager’а, позволяющего упростить и ускорить выполнение рутинных задач. Все сборки компилируются локально во время процесса разработки.\n\n\nИсточник: build.phonegap.com\n\nКогда версия готова к этапу тестирования, она компилируется с помощью PhoneGap Build и загружается на Ubertesters — сервис дистрибуции мобильных приложений, который позволяет проводить тестирование быстро и эффективно на всех подключенных устройствах. Приложение поддерживает минимум iOS 6 и Android 4.1 (87.5 % доля рынка).\n",
        "link": "https://habr.com/ru/company/arcadia/blog/257749/"
    },
    {
        "title": "Деобфускация одного скрипта с попапами",
        "body": "Тяжело найти человека, который не сталкивался бы с таким отвратительным явлением на сайтах, как рекламный попап. Откровенно не понимаю зачем их делают, но, судя по всему, это работает. И это печально. В своё время данное явление достало даже разработчиков браузеров из-за чего на тот же window.open были наложены ограничения, не позволяющие открывать новые окна без спросу пользователя. К сожалению их было недостаточно и в борьбу включились баннерорезки. К сожалению API, предоставляемые браузерами, не идеальны и потому периодически обнаруживаются новые пути ухода от блокировки, которые как-то приходится затыкать. Вот только довольно сложно заткнуть брешь не зная как она работает и разработчики рекламных скриптов это тоже прекрасно понимают. В результате код обфусцируется всё новыми и новыми способами. Здесь я попробую разобрать один такой скрипт и техники обфускации кода, применяемые в нём, крайний раз обнаруженный на средней популярности сайте хентайной мангой (японские порнокомиксы).",
        "link": "https://habr.com/ru/post/341360/"
    },
    {
        "title": "Blockchain на Go. Часть 3: Постоянная память и интерфейс командной строки",
        "body": "Содержание\n\n\nBlockchain на Go. Часть 1: Прототип \n Blockchain на Go. Часть 2: Proof-of-Work\nBlockchain на Go. Часть 3: Постоянная память и интерфейс командной строки\nBlockchain на Go. Часть 4: Транзакции, часть 1\nBlockchain на Go. Часть 5: Адреса \nBlockchain на Go. Часть 6: Транзакции, часть 2\nBlockchain на Go. Часть 7: Сеть\n\nВступление\nВ предыдущей части мы построили блокчейн с PoW системой и возможностью майнинга. Наша реализация всё ближе к полностью функциональному блокчейну, но ей все ещё не хватает некоторых важных функций. Сегодня мы начнем хранить блокчейн в базе данных, после этого сделаем интерфейс командной строки для операций с блокчейном. По сути, блокчейн — это распределенная база данных. Мы пока опустим «распределенная» и сосредоточимся на «база данных».",
        "link": "https://habr.com/ru/post/351296/"
    },
    {
        "title": "Intel Edison. Облако Intel IoT Analytics: отправка SMS и RESTful клиент на ASP.NET",
        "body": "\nЗаключительная часть работы с облаком Intel IoT Analytics. Добавление отправки SMS уведомления используя HTTP шлюзы и создание простого RESTful клиента на ASP.NET. Подведение итогов.\n\nОтправка SMS уведомления используя HTTP шлюз\nВ предыдущей работе Intel Edison. Работа с облаком Intel IoT Analytics: создание правил и отправка уведомлений были сформированы правила позволяющие отправлять: уведомление на e-mail и управлять питанием реле. Отправку SMS сообщения, добавим к этим двум созданным правилам.\nПравила:\n\nHigth_temp_PowerOnRelay_and_send_to_web@devdotnet.org\nLow_temp_PowerOffRelay_and_send_to_web@devdotnet.org\n\nБудем использовать SMS шлюз smsc.ru. API доступно по ссылке.\n",
        "link": "https://habr.com/ru/post/384929/"
    },
    {
        "title": "Notifications: action required for take profit / stop loss. In case your Broker doesn't support those orders",
        "body": "There is a Russian Broker — Tinkoff Bank. Now here is the problem: the broker doesn't support take profit and stop loss orders. At all. If you want to feel more convenient while trading, then you need some workaround for this situation, until Tinkoff Bank developers finally release those orders as the killer feature. In the article, I will show you my workaround.\nupdate:2019-03-22, the Broker published platform 3.0.0 (a major update) in Google Play. The changelog features take profit/stop loss orders",
        "link": "https://habr.com/ru/post/443434/"
    },
    {
        "title": "Как научить преодолевать трудности, а заодно и писать циклы",
        "body": "Несмотря на то, что речь пойдет об одной из базовых тем, данная статья написана для опытных специалистов. Цель — показать какие заблуждения бывают у новичков в программировании. Для практикующих разработчиков эти проблемы уже давно решены, позабыты или вообще не замечены. Статья может пригодиться, если вдруг вам придется помогать с этой темой кому-нибудь. В статье проводятся параллели с материалом из различных книг по программированию авторства Шилдта, Страуструпа, Окулова.\n\nТема про циклы выбрана потому, что на ней отсеивается довольно много людей при освоении программирования.\n\nДанная методика рассчитана на слабых студентов. Как правило, сильные на этой теме не застревают и особенных методик для них придумывать не нужно. Второстепенная цель статьи — перевести эту методику из класса «работает на всех студентах, но только у одного преподавателя» в класс «работает у всех студентов, всех преподавателей». На абсолютную оригинальность не претендую. Если вы уже применяете похожую методику для обучения этой теме, напишите, пожалуйста, чем ваш вариант отличается. Если решите применить, расскажите по итогам, как все прошло. Если похожая методика описана в какой-нибудь книжке, напишите, пожалуйста, название.\n",
        "link": "https://habr.com/ru/post/456500/"
    },
    {
        "title": "Hello World из байт-кода для JVM",
        "body": "Скомпилируем простенькую программу выводящую \"Hello World\" и пройдемся по его структуре\nНе думаю, что статья будет достаточно информативной для тех, кто поверхностно не знает как выглядит байт-код и как с ним работает JVM (например, хотя бы простейшие инструкции (знание об их существовании)).\nНа самом деле, это не так сложно. Достаточно использовать инструмент javap из JDK и рассмотреть дизассемблированный код.\nА мы приступим к разбору самой структуры байт-кода для JVM",
        "link": "https://habr.com/ru/post/480550/"
    },
    {
        "title": "Генерация типизированных ссылок на элементы управления Avalonia с атрибутом x:Name в XAML с помощью C# Source Generators",
        "body": "\n\nВ апреле 2020-го года разработчиками платформы .NET 5 был анонсирован новый способ генерации исходного кода на языке программирования C# — с помощью реализации интерфейса ISourceGenerator. Данный способ позволяет разработчикам анализировать пользовательский код и создавать новые исходные файлы на этапе компиляции. При этом, API новых генераторов исходного кода схож с API анализаторов Roslyn. Генерировать код можно как с помощью Roslyn Compiler API, так и методом конкатенации обычных строк.\nВ данном материале рассмотрим процесс реализации ISourceGenerator для генерации типизированных ссылок на элементы управления AvaloniaUI, объявленные в XAML. В процессе разработки научим генератор компилировать XAML с помощью API компилятора XamlX, используемого в AvaloniaUI, и системы типов XamlX, реализованной поверх API семантической модели Roslyn.",
        "link": "https://habr.com/ru/post/530454/"
    },
    {
        "title": "Вжух, и прогоны автотестов оптимизированы. Intellij IDEA плагины на службе QA Automation",
        "body": "\n\nПривет, Хабр. Я работаю QA Automation инженером в компании Wrike и хотел бы поговорить о том, как нам удалось оптимизировать процесс код-ревью для репозитория с 30 000+ автотестов при помощи IntelliJ IDEA плагина. Я расскажу о внутреннем устройстве плагина и о том, какие проблемы он решает в нашей компании. А еще в конце статьи будет ссылка на Github репозиторий с кодом плагина, с помощью которого вы сможете попробовать встроить плагин в ваши процессы.",
        "link": "https://habr.com/ru/company/wrike/blog/532704/"
    },
    {
        "title": "GraphQL в мобильной разработке. Пишем клиент для Android",
        "body": "\n\nДоброго времени суток! С вами Анна Жаркова, ведущий разработчик компании Usetech, и мы продолжаем нашу серию статей, посвященных работе с технологией GraphQL при разработке мобильных приложений. \n\nВ прошлой части мы говорили о подготовке облачного GraphQL бекенда на Hasura. В этой статье мы перейдем собственно к подключению GraphQL и API к нашему приложению. И начнем мы с Android клиента.\n\ngithub.com/apollographql/apollo-android\nwww.apollographql.com/docs/android\n\nНаше приложение состоит из нескольких экранов:\n\n\nвход\nрегистрация\nлента постов\nэкран создания и редактирования поста\nэкран с информацией о текущем пользователе.\n\nЭкраны и сопутствующий код уже у нас есть, осталось подключить API.\nИзображения мы храним в Firebase Storage, поэтому не затрагиваем этот вопрос.",
        "link": "https://habr.com/ru/company/usetech/blog/645789/"
    },
    {
        "title": "Добавляем поддержку Markdown в ASP.NET Core приложение. Часть 1",
        "body": "Последние несколько лет ознаменовали становление Markdown в качестве общепринятого языка разметки HTML-текста. Он становится доступным во все большем количестве мест и фактически уже стал стандартом для документации, которая публикуется и редактируется в интернете. Если вы работаете с Git и GitHub, то вы уже используете Markdown для форматирования README.md и, вероятно, всей остальной документации, которую вы пишете для своих проектов, связанных с разработкой программного обеспечения. Большая часть документации для разработчиков, которую вы сегодня можете найти в интернете, будь то коммерческая документация от таких компаний, как Microsoft, Google и т. д., или типовые решения для документации наподобие ReadTheDocs или KavaDocs, — создается и поддерживается с помощью Markdown.",
        "link": "https://habr.com/ru/company/otus/blog/681662/"
    },
    {
        "title": "Monadic Parser Combinator в Nemerle",
        "body": " Недавно обнаружил замечательную статью Monadic Parser Combinator про создание парсеров. Основная идея заключена в том, что бы описать парсер как объект первого класса, что бы можно было произвести декомпозицию исходной задачи и представить искомый парсер в виде синтеза более простых парсеров. Что бы облегчить комбинацию парсеров используется подход replace error with list of success. В языке haskell очень удобно работать с созданием парсеров, так как эта задача естественно ложится на концепцию монад, к сожалению в nemerle монады не поддерживаются, но все же язык достаточно мощный, что бы справиться с данной задачей.\n\n",
        "link": "https://habr.com/ru/post/50859/"
    },
    {
        "title": "Пошаговое описание создания простого приложения для Samsung Bada",
        "body": "Предварительные замечания\nЗдравствуйте. Хотелось бы прежде всего поздравить всех с наступившим Новым Годом и сразу перейти к делу. Эта статья будет посвящена вопросу создания простых программ для Bada — операционной системы для мобильных устройств, которые выпускает корейская Samsung. Заранее хочу сказать, что под катом простой рецепт изготовления простого приложения без пространных рассуждений о оптимальности и стройности кода. \nНа Хабре уже есть довольно обстоятельные статьи, которые посвящены Bada, например эта и эта, но вот пошагового описания создания приложения для новичков нет. Кому интересно — прошу под кат.\n\n",
        "link": "https://habr.com/ru/post/111080/"
    },
    {
        "title": "Основы Clojure Web Applications",
        "body": "Сегодня я попробую показать основы создания веб приложений на языке Clojure. Здесь не будет сложной логики и модных фреймворков. Будет использоваться ряд библиотек для работы с примитивами. По мере упоминания я попробую в двух словах объяснить, какой функционал они предоставляют.\n\nАрхитектура веб-приложений в примитивах состоит из веб-сервера, который направляет запросы на обработчики в зависимости от пути, параметров, метода. Обработчик выполняет определенный код, делает запросы к базе данных, работает с файловой системой. После обработки запроса, генерируется ответ и отсылается клиенту.\n\nНаше приложение будет принимать через форму одно значение, брать из базы данных второе, складывать их, а результат отдавать клиенту. При этом введенное значение будет заменять старое в базе данных. Глупая, бесполезная и не интересная логика — я знаю.\n",
        "link": "https://habr.com/ru/post/116595/"
    },
    {
        "title": "Публикация видео на канале пользователя YouTube",
        "body": "Разрабатывая приложение под Android для создания слайд-шоу из фотографий, столкнулся с задачей публиковать готовые ролики на личном канале пользователя YouTube.\nПришлось повозиться, т.к. во-первых, применяем облачные вычисления и обработка данных может занимать дольше времени, чем действует token. А во-вторых, чтобы реализовать функцию, пришлось столкнуться с некоторыми неточностями и вопросами в мануале Google. Подробности под катом. \n\n",
        "link": "https://habr.com/ru/post/171035/"
    },
    {
        "title": "ASP.NET MVC 4 RAZOR Динамическое многоуровневое меню из БД",
        "body": "Как и обещал в предыдущем посте DropDownList, Задать «value» для default option в MVC 4, сегодня расскажу про построение динамического многоуровневого меню с бесконечной вложенностью, хранящееся в БД MsSQL. Помню в свое время на ПХП это тоже было задачкой на пару дней. Но для MVC 4 с движком RAZOR — еле разобрался, хотя в итоге как всегда ничего сложного или сверхъестественного. Статья рассчитана на тех, кто делать это не умеет. Если Вы знаете как сделать лучше — поделитесь. Приступим.\n\nСей мануал предполагает, что Вы уже оперируете знаниями, полученными при ознакомлении с этими статьями: Entity Framework в приложении ASP.NET MVC. Или этими: ASP.NET MVC 4 Tutorials\n\n1) Сначала нужно разобраться со структурой БД. Это главное. С теорией можно ознакомиться в статье Иерархические структуры данных в реляционных БД. Мы будем использовать максимально простую структуру, называемой «структура со ссылкой на предка».\n",
        "link": "https://habr.com/ru/post/174531/"
    },
    {
        "title": "Делегаты и события в .NET",
        "body": "От переводчика. Судя по своему опыту, а также по опыту знакомых коллег-программистов, могу сказать, что для начинающего разработчика среди всех базовых функций языка C# и платформы .NET делегаты и события являются одними из наиболее сложных. Возможно, это из-за того, что необходимость делегатов и событий на первый взгляд кажется неочевидной, или же из-за некоторой путаницы в терминах. Поэтому я решил перевести статью Джона Скита, рассказывающую о делегатах и событиях на самом базовом уровне, «на пальцах». Она идеальна для тех, кто знаком с C#/.NET, однако испытывает затруднение в понимании делегатов и событий.\n\nПредставленный здесь перевод является вольным. Однако если под «вольным», как правило, понимают сокращённый перевод, с упущениями, упрощениями и пересказами, то здесь всё наоборот. Данный перевод является немного расширенной, уточнённой и обновлённой версией оригинала. Я выражаю огромную благодарность Сергею Теплякову aka  SergeyT, который внёс неоценимый вклад в перевод и оформление данной статьи.\n\nЛюди часто испытывают затруднения в понимании различий между событиями и делегатами. И C# ещё больше запутывает ситуацию, так как позволяет объявлять field-like события, которые автоматически преобразуются в переменную делегата с таким же самым именем. Эта статья призвана прояснить данный вопрос. Ещё одним моментом является путаница с термином «делегат», который имеет несколько значений. Иногда его используют для обозначения типа делегата (delegate type), а иногда — для обозначения экземпляра делегата (delegate instance). Чтобы избежать путаницы, я буду явно использовать эти термины — тип делегата и экземпляр делегата, а когда буду использовать слово «делегат» — значит, я говорю о них в самом широком смысле.\n",
        "link": "https://habr.com/ru/post/198694/"
    },
    {
        "title": "Пишем парсер с помощью XPath и Yii",
        "body": "Введение\nИногда бывают задачи когда нужно реализовать обертку для работы с API некоторого сервиса для нужд заказчика и сделать подобною задачу в основном довольно просто, но в сервиса не всегда есть этот API, либо возникает мысль что лучше бы его не было, поэтому приходиться парсить полностью страницу контента.\n\nВ качестве примера для данной статьи мы будем использовать выданное демо форума XenForo и заранее созданной темой, откуда будем парсить типичные данные: заголовок, время создания и сам текст темы, при этом парсинг будет осуществляться в авторизированном аккаунте форума. Все остальные данные можно будет взять по аналогии.\n\nСам парсер реализуем в виде компонента для удобного использования в Yii2.\n",
        "link": "https://habr.com/ru/post/216227/"
    },
    {
        "title": "jsonex – упрощаем сложные клиент-серверные диалоги",
        "body": "\n\nВзаимодействие между клиентом и сервером как правило устроено очень просто и опирается на довольно примитивный инструментарий. Это не создает проблем само по себе, но зачастую даже небольшое усложнение поставленной задачи плохо укладываться в привычные подходы, порождая не слишком изящные решения-заплатки. Многие задачи решаются в каждом новом проекте заново, бессистемно и независимо друг от друга. К подобным задачам относятся, например:\n\n\nBatch-запросы\nПередача даты в составе сложной структуры данных\nОбозначение кастомных типов данных\nПроброс round-trip данных, которые сервер должен вернуть в ответе\nДополнение запроса и ответа метаданными\nОбработка ошибок, пришедших в ответе\n\nРазработчики тратят немало времени, раз за разом создавая неказистые велосипеды на серверной стороне, после чего их приходится поддерживать еще и на стороне клиента.\n\njsonex представляет собой попытку объединить решение упомянутых выше и многих других задач в рамках простого единого подхода, основанного на концепции вычислимых данных (callable data).\n",
        "link": "https://habr.com/ru/post/224261/"
    },
    {
        "title": "Perl 6 и Rakudo: заметки от 2009 года",
        "body": "Серия статей о Perl 6 и Rakudo – одном из компиляторов, поддерживающих спецификацию Perl6. Эта статья собрана из заметок от 2009 года.\n\nУстанавливаем Rakudo\nВ данный момент существует несколько неполных реализаций Perl 6. Самая полная из них – это компилятор Rakudo (скачать).\n\nПользователи git могут создать свою копию при помощи следующих команд:\n$ git clone git://github.com/rakudo/rakudo.git\n$ cd rakudo\n$ perl Configure.pl --gen-parrot --gen-moar --gen-nqp --backends=parrot,jvm,moar\n$ make\n$ make install\n\n\nКак вариант, можно собрать его из исходников, скачав их с github.com/rakudo/rakudo/tree/nom\n\nДля Windows есть готовый установщик бинарников. Версии установщика и исходный код доступны по ссылке \n",
        "link": "https://habr.com/ru/post/248713/"
    },
    {
        "title": "Создание Excel файла из селекта с параметрами при помощи чистого PL/SQL, как альтернатива Oracle*Reports",
        "body": "Цели, которых я хотел достичь\n\nExcel, как результат селекта, текст которого процедура узнает только в runtime\nСелект перед выпонением видоизменяется в соответствии с параметрами, которые получает процедура\nПроцедуре передаются параметры файла, который будет создан\nВозможность получения результирующего файла в форматах Excel Workbook,CSV,HTML,XML\n\nХранимая PL/SQL процедура получает в параметрах \n\n текст селекта\n параметры файла Excel\n параметры выполнения\nи создает полноценный Excel с несколькими таблицами(sheets).\nЯ знаю, что есть Crystal Reports и Oracle BI Publisher. \nНо, во-первых, это крупные продукты(с большими ценами...), а Publisher, насколько я знаю не работает как отдельный модуль без Oracle Business Intelligence Enterprise Edition. И кроме того, речь шла о довольно узкой задаче создания файла без layout.\n\nВ конце, я написал один PL/SQL пакет, который находится в database и может быть вызван из любой аппликации. В ходе написания я столкнулся со многими ограничениями и хочу рассказать о том, как их поборол.\n\nДля тех — кто сомневается, я этого, конечно не мог знать заранее, но за несколько лет, что пакет работает в большой компании, у меня не было проблем свести RDF любой сложности, с многими триггерами/формулами, в один селект, хвала Ораклу. Наоборот, так как селект — стринговый параметр и его можно построить динамически, это дает большую гибкость. В параметрах можно задать даже имя таблицы.\n",
        "link": "https://habr.com/ru/company/oda/blog/263323/"
    },
    {
        "title": "Функциональное программирование непопулярно, потому что оно странное",
        "body": "Я знаю людей, которые искренне недоумевают по поводу того, что функциональное программирование не очень популярно. К примеру, сейчас я читаю книжку «Из смоляной ямы» (Out of the Tar Pit), в которой авторы после аргументов в пользу функционального программирования говорят:\n",
        "link": "https://habr.com/ru/post/303312/"
    },
    {
        "title": "Пишем Ruby gem для Yandex Direct API",
        "body": "Очень хотелось изучить Ruby получше, а рабочего проекта не было. И я попробовал написать gem для работы с Yandex Direct API.\nПричин было несколько. Среди них: Yandex Direct API очень типичен для Яндекса и современных REST-сервисов вообще. Если разобраться и преодолеть типичные ошибки, то можно легко и быстро написать аналоги для прочих API Яндекса (и не только). И ещё: у всех аналогов, которые мне удалось найти, были проблемы с поддержкой версий Директа: одни были заточены под 4, другие под новую 5, и поддержке units я нигде не нашёл.\nМетапрограммирование — великая вещь\nОсновная идея gem-а — раз в языке вроде Ruby или Python можно создавать новые методы и JSON-подобные объекты на лету, то методы интерфейс для доступа к REST-сервису могут повторять функции самого Rest-сервиса. Чтобы можно было писать так:\nrequest = {\n    \"SelectionCriteria\" => {\n      \"Types\" => [\"TEXT_CAMPAIGN\"]\n    },\n    \"FieldNames\" => [\"Id\", \"Name\"],\n    \"TextCampaignFieldNames\" => [\"BiddingStrategy\"]\n}\n\noptions = { token: Token }\n@direct = Ya::API::Direct::Client.new(options)\njson = direct.campaigns.get(request)\nА вместо того, чтобы писать справку, отсылать пользователей к мануалам по указанному API.",
        "link": "https://habr.com/ru/post/311512/"
    },
    {
        "title": "Метарегулярные выражения на D",
        "body": "Пробежался по хабам и не нашел ничего написанного одновременно в хабы \"D\" и \"Ненормальное программирование\". Может сложиться совершенно ложное представление что на D пишут исключительно нормальные люди, или еще хуже того — что знание D автоматически делает из любого программиста нормального человека. Спешу опровергнуть.\nХотя сам я строго говоря программистом на D не являюсь — у меня нет ни одного промышленного проекта, зато я периодически с удовольствием роюсь в чужом коде выковыривая вкусные изюминки. А еще я пишу для себя небольшие утилиты, чаще всего для обработки текстовых данных, то что обычно делается на скриптовых языках, благо D предлагает очень неслабый набор инструментов для работы со строками.\nНу а там где текстовые процессоры, там и регулярные выражения, как же без них. И здесь D снова оказывается на высоте, по легкости и удобству использования его библиотека регулярных выражений приближается к Perl. Но в Perl регулярки являются частью синтаксиса, можно сказать что сам язык выстроен в значительной мере вокруг них, а в D это вполне себе независимый модуль — std.regex из стандартной библиотеки написанный Дмитрием Ольшанским. Еще один замечательный момент — парсер выражения может быть построен во время компиляции (естественно если само выражение задано литералом), и разумеется я не мог удержаться чтобы не посмотреть как оно внутри устроено.\nИ вот тут то, разбираясь в деталях у меня слетела шляпа возникла мысль, а нельзя ли вызывать одно регулярное выражение изнутри другого? Не вставить литерал (как тривиально можно сделать в Perl например), а непосредственно вызвать скомпилированный код одного выражения изнутри другого. Достаточно на мой взгляд дурацкая идея чтобы с ней стоило поиграть.\nИтак, чего мы хотим? Примерно вот такого (пока это псевдокод):\nINT=regexp(\"\\d+\");\nLIST=regexp(\"INT(,INT)*\");",
        "link": "https://habr.com/ru/post/323186/"
    },
    {
        "title": "Векторные модели и русская литература",
        "body": "\nВы никогда не задумывались, почему тексты классических русских писателей так ценятся, а сами писатели считаются мастерами слова? Дело явно не только в сюжетах произведений, не только в том, о чём написано, но и в том, как написано. Но при быстром чтении по диагонали осознать это трудно. Кроме того, текст какого-нибудь значимого романа нам просто не с чем сравнить: почему, собственно, так прекрасно, что в этом месте появилось именно это слово, и чем это лучше какого-то другого? В какой-то мере реальное словоупотребление могло бы контрастно оттенить потенциальное, которое можно найти в черновиках писателя. Писатель не сразу вдохновенно пишет свой текст от начала до конца, он мучается, выбирает между вариантами, те, что кажутся ему недостаточно выразительными, он вычеркивает и ищет новые. Но черновики есть не для всех текстов, они отрывочны и читать их сложно. Однако можно провести такой эксперимент: заменить все поддающиеся замене слова на похожие, и читать классический текст параллельно с тем, которого никогда не было, но который мог бы возникнуть в какой-то параллельной вселенной. Попутно мы можем попытаться ответить на вопрос, почему это слово в этом контексте лучше, чем другое, похожее на него, но всё-таки другое.\nА сейчас всё это (кроме собственно чтения) можно сделать автоматически.",
        "link": "https://habr.com/ru/post/326380/"
    },
    {
        "title": "Работа с ресурсами, или как я пропихивал @Cleanup",
        "body": "Это вымышленная история, и все совпадения случайны.\n\nНаконец-то команда разработки компании Unknown Ltd. выпустила релиз вовремя. Руководитель отдела разработки Эндрю, системный архитектор Юг и простой рядовой разработчик Боб собрались на планирование. ",
        "link": "https://habr.com/ru/post/339046/"
    },
    {
        "title": "Как победить дракона: переписываем вашу программу на Golang",
        "body": "Так случилось, что ваша программа написана на скриптовом языке — например, на Ruby — и встала необходимость переписать ее на Golang.\nРезонный вопрос: зачем вообще может понадобится переписывать программу, которая уже написана и нормально работает?\n",
        "link": "https://habr.com/ru/company/flant/blog/437044/"
    },
    {
        "title": "На сцене вновь лауреаты международных конкурсов SSH и sudo. Под рукодством заслуженного дирижера Active Directory",
        "body": "Исторически сложилось, что sudo права регулировались содержимым файлов из /etc/sudoers.d и visudo, а авторизация по ключам велась с использованием ~/.ssh/authorized_keys. Однако с ростом инфраструктуры возникает желание управлять этими правами централизованно. На сегодняшний день вариантов решения может быть несколько:\n\n\nСистема управления конфигурацией — Chef, Puppet, Ansible, Salt\nActive Directory + sssd \nРазнообразные извращения в виде скриптов и ручного редактирования файлов \n\nНа мой субъективный взгляд, оптимальным вариантом централизованного управления является все-таки связка Active Directory + sssd. Преимущества данного подхода вот в чем: \n\n\nДействительно Единый централизованный каталог пользователей. \nРаздача прав sudo сводится к добавлению пользователя в определенную группу безопасности. \nВ случае различных Linux-систем возникает необходимость вводить дополнительные проверки на определение ОС при использовании систем конфигурации. \n\nСегодняшняя сюита будет посвящена именно связке Active Directory + sssd для управления правами sudo и хранением ssh ключей в едином репозитории.\nИтак, зал застыл в напряженном молчании, дирижер поднял палочку, оркестр приготовился.\nПоехали.",
        "link": "https://habr.com/ru/post/449702/"
    },
    {
        "title": "Скачиваем аудио вконтакте через клиентский js или расширение файлов .m3u8",
        "body": "Как все начиналось...\nКак всегда, зависая вконтакте, я решил скачать пару новых аудиозаписей на комп. Но меня ждало разочарование: аудиозаписи возвращались в каком-то странном формате: m3u8. Этот формат даже vlc media pleyer не воспроизводил, и я стал думать, что делать…",
        "link": "https://habr.com/ru/post/457438/"
    },
    {
        "title": "Блокчейн: что нам стоит PoC построить?",
        "body": "Глаза боятся, а руки чешутся!\n\nВ прошлых статьях мы разобрались с технологиями, на которых строятся блокчейны (Что нам стоит блокчейн построить?) и кейсами, которые можно с их помощью реализовать (Что нам стоит кейс построить?). Настало время поработать руками! Для реализации пилотов и PoC (Proof of Concept) я предпочитаю использовать облака, т.к. к ним есть доступ из любой точки мира и, зачастую, не надо тратить время на нудную установку окружения, т.к. есть предустановленные конфигурации. Итак, давайте сделаем что-нибудь простое, например, сеть для перевода монет между участниками и назовем ее скромно Сitcoin. Для этого будем использовать облако IBM и универсальный блокчейн Hyperledger Fabric. Для начала разберемся, почему Hyperledger Fabric называют универсальным блокчейном?\n\n",
        "link": "https://habr.com/ru/post/466157/"
    },
    {
        "title": "Пишем API на Rust с помощью процедурных макросов",
        "body": "Процедурные макросы в Rust — это очень мощный инструмент кодогенерации, позволяющий обходиться без написания тонны шаблонного кода, или выражать какие-то новые концепции, как сделали, к примеру, разработчики крейта async_trait.\nТем не менее, многие вполне обоснованно побаиваются пользоваться этим инструментом, в основном из-за того, что разбор синтаксического дерева и атрибутов макроса зачастую превращается в \"закат солнца вручную\", так как задачу приходится решать на очень низком уровне.\nВ данной статье я хочу поделиться некоторыми, на мой взгляд, удачными подходами к написанию процедурных макросов, и показать, что на сегодняшний день процедурные макросы можно создавать относительно просто и удобно.",
        "link": "https://habr.com/ru/post/486740/"
    },
    {
        "title": "Умное добавление музыкальных групп в Google Таблицы через VK API, Tampermonkey и Telegram бота",
        "body": "Как организовать хранилище музыкальных групп в Google Таблицах с поддержкой с разных программ?\n\n\nДано: Аккаунты в Google, VK, Telegram.\nЗадача: Создать хранилище музыкальных групп с возможностью удобного пополнения.\nИнструменты: Google Apps Script (GAS), VK API, Tampermonkey, Telegram Bot API.",
        "link": "https://habr.com/ru/post/504664/"
    },
    {
        "title": "Telegram на go: часть 1, парсим схему",
        "body": "Желание написать качественный клиент для любимого мессенджера на go возникало давно, но только месяц назад я решил, что время пришло и у меня есть достаточная квалификация для этого.Разработа все еще в процессе, но уже пройден увлекательный путь от полного непонимания протокола до относительного стабильного клиента. В серии статей я расскажу, с какими сложностями я столкнулся и как с ними боролся.",
        "link": "https://habr.com/ru/post/535076/"
    },
    {
        "title": "Векторные языки — SQL интерпретатор в 100 строк",
        "body": "В предыдущей статье я описал векторные языки и их ключевые отличия от обычных языков. На коротких примерах я постарался показать, как эти особенности позволяют реализовывать алгоритмы необычным образом, кратко и с высоким уровнем абстракции. В силу своей векторной природы такие языки идеально присоблены для обработки больших данных и в качестве доказательства в этой статье я полностью реализую на векторном языке простой SQL интерпретатор. А чтобы продемонстрировать, что программист на векторном языке может писать на векторном языке на любом языке, я реализую тот же самый интерпретатор на Rust. Преимущества векторного подхода столь велики, что даже интерпретатор в интерпретаторе сможет обработать select с группировкой таблицы в 100 миллионов строк за полминуты. ",
        "link": "https://habr.com/ru/company/dbtc/blog/552852/"
    },
    {
        "title": "Облако для всех. Строим CI/CD pipeline для бессерверных функций",
        "body": "В публичном облаке SberCloud.Advanced, построенном на технологиях Huawei, имеется крайне полезный сервис бессерверных вычислений – Function Graph. С его помощью можно быстро набросать код для решения конкретной бизнес-задачи и запустить его на выполнение, не тратя время на развертывание и настройку отдельных серверов. Но все это замечательно и очень удобно, пока речь идет всего о паре функций. А если таких функций уже больше 5 и они активно развиваются, то это уже похоже на проект, а проект нужно ставить на контроль и организовывать хоть и простейший, но процесс.     В статье покажем, каким образом можно организовать и контролировать процесс развертывания проекта на основе бессерверных функций. Это решение - наиболее экономичный вариант для небольших команд и стартапов, чей проект пока находится в стадии раскрутки, в условиях органиченных бюджетов, ролей и тд.    ",
        "link": "https://habr.com/ru/company/huawei/blog/568866/"
    },
    {
        "title": "Упрощаем создание мелодий C# Console.Beep. Нотная запись по-человечески, PC Speaker синтезатор",
        "body": "У Вас никогда не возникало желание добавить в код сладенькую засушенную изюминку в виде олдскульных бип-мелодий? Или играть музыку щёлкая клавиши на своём ПК с этим самым \"ламповым\" звучанием PC Speaker? Вот и у меня возникло. Есть решение: Console.Beep воспроизводит звуки через PC Speaker (в связи с отсутствием системного драйвера начиная с Win 7 кзвук перенаправляется на звуковое устройство по умолчанию, по собственным наблюдениям на семёрке работает отвратно, зато на десятке вполне приемлемо, но возможно дело не только в операционной системе). Стоит уточнить что поддержка перегрузки Console.Beep(Int32, Int32) заявлена только для систем семейства MS Windows.Для пауз нет ничего проще чем Thread.Sleep.Всё что нам нужно - это using System и using System.Threading.И на первой же мелодии я понял как это неудобно - записывать ноты в виде частоты и колличества миллисекунд. Вот собственно как это работает обычно...",
        "link": "https://habr.com/ru/post/580564/"
    },
    {
        "title": "Создаем приложение Art-pixel на Angular и Nest.js. Часть 2",
        "body": "В этой части мы займемся созданием возможности сохранения рисунка, добавим возможность редактирования наших сохраненных рисунков, а также добавим возможность просмотра пользователем примеров работ, по которым при желании можно будет создавать такие же или лучше. ",
        "link": "https://habr.com/ru/post/648619/"
    },
    {
        "title": "Создание и использование собственных атрибутов AD в PowerShell",
        "body": "\nВ этой статье я покажу вам, как можно расширять схему AD, создавать нестандартные атрибуты и управлять ими в AD — и всё это с помощью Windows PowerShell. Следуя этому руководству, вы сможете устанавливать и управлять собственными атрибутами AD с помощью PowerShell точно так же, как вы управляете другими атрибутами AD.\n\nСтандартная схема Active Directory содержит большинство атрибутов, которые обычно требуются организации в инфраструктуре AD. Однако стандартных атрибутов не всегда достаточно, когда речь идёт о больших организациях. Когда я управлял Active Directory в крупной школе, меня попросили установить несколько атрибутов для пользователей, которые не были доступны в AD по умолчанию. Тогда мне пришлось расширять схему AD для определения кастомных атрибутов и устанавливать эти атрибуты для пользователей.",
        "link": "https://habr.com/ru/company/first/blog/654627/"
    },
    {
        "title": "Flutter: Создание расширения для Chrome",
        "body": "Как создать расширение для браузера? Создание расширения для Google Chrome.Сложность: ОпытныйВсем привет. Месяц назад, пока бороздил просторы интернета, понял, что у меня есть проблема, я хотел проверить текущую цену Биткойна, но каждый раз заходить на сайт валюты мне было тяжело. Итак, я решил сделать расширение для Google Chrome с помощью Flutter. И хочу рассказать как я это сделал.Расширение будет достаточно простым, будет лишь функционал проверки состояния Биткойна. Вам не понадобится дополнительная установка каких-либо плагинов. Мы напишем его с помощью встроенных средств web.",
        "link": "https://habr.com/ru/post/662225/"
    },
    {
        "title": "Как мы парсили информацию об уязвимостях",
        "body": "Итак, существует большое количество платных сервисов, например vuldb.com или vulners.com, которые предоставляют информацию об уязвимостях по подписке. В этой статье я приведу бесплатные источники, с которыми за полгода мы собрали информацию об 3153 уязвимости, для их дальнейшего ресерча. ",
        "link": "https://habr.com/ru/post/670314/"
    },
    {
        "title": "Danger. Автоматизируем ревью на CI и пишем свой плагин",
        "body": "Привет, я Татьяна Родионова, Android-разработчица в Lamoda. Как-то раз передо мной появилась задача упростить ревью пул-реквестов с помощью Danger. Я решила добавить автоматическую проверку код стайла, используя ktlint. Но оказалось, что Danger не поддерживает такое решение, поэтому я добавила такую проверку сама :) Моя статья поможет разобраться в том, как настроить Danger и как заставить его выполнять задачи немного сложнее тех, которые есть в официальном туториале.",
        "link": "https://habr.com/ru/company/lamoda/blog/681564/"
    },
    {
        "title": "Подсветка синтаксиса в статьях с использованием GeSHi",
        "body": "На Хабре, GeSHi упоминался в комментариях, но статей по его использованию не было. Мы рассмотрим использование GeSHi для автоматической подсветки синтаксиса в тексте статей или сообщений на сайте.\n\nGeSHi (Generic Syntax Highlighter) позволяет подсвечивать синтаксис кода, написанного на любом из более 80 языков. GeSHi использует подключаемые файлы с описанием синтаксиса языков, что обеспечивает простоту добавления новых описаний. GeSHi написан на PHP. \n",
        "link": "https://habr.com/ru/post/25497/"
    },
    {
        "title": "ECMAscript 5: Строгий режим, JSON, и так далее",
        "body": "Раньше я проанализировал функциональность обьектов и свойств ECMAScript 5. Это огромный новый аспект языка и он заслуживает особого рассмотрения.\n\nЕсть целый ряд других новых функций и API, которые также требуют внимания. Самыми значимыми из которых являются строгий режим и родная поддержка JSON.",
        "link": "https://habr.com/ru/post/60282/"
    },
    {
        "title": "Проигрываем видео с YouTube используя Action script 3.0",
        "body": "\n\nИ все-таки заказчики не предсказуемые люди!\n\nРаботаешь над проектом, работаешь и все, как кажется, хорошо, а он тебе (заказчик) за неделю до сдачи проекта: «Хочу, чтоб у меня на flash-сайте видео проигрывалось. Да не простое, а с YouTube». Ну и что тут поделаешь… Ничего.\n\nДля уточнения скажу, что сайт сделан в Flash CS4 с использованием Action Script 3.0.\n\nОднако задачка, как оказалось не из легких. И как всегда пришлось выкручиваться.\n\n",
        "link": "https://habr.com/ru/post/69537/"
    },
    {
        "title": "OAuth: описание протокола простым и понятным языком",
        "body": " OAuth — популярный протокол, который позволяет социальным сервисам интегрироваться между собой и дает безопасный способ обмена персональной информацией. OAuth может связать между собой 2 сервиса, каждый из которых имеет свою пользовательскую базу — именно их я в данном случае называю «социальными». Когда начинаешь работать с OAuth, первое ощущение — что протокол весьма сложен и избыточен. В этой статье я попытаюсь объяснить основы OAuth человеческим языком. \n\nПример кросс-авторизации\nВернемся в 2005-й год и представим, что мы пишем социальную сеть. В ней имеется форма импорта контактов из адресной книги GMail. Что нужно для доступа к контактам GMail? Конечно, логин и пароль от ящика. Но если мы попросим ввести их на нашем сайте, пользователь заподозрит неладное. Где гарантия, что мы не сохраняем на сервере введенные пароли? Поэтому нам хочется, чтобы пароль вводился только на сайте GMail, и после этого доступ к контактам через API GMail предоставлялся нашей социальной сети (возможно, на время).",
        "link": "https://habr.com/ru/post/77648/"
    },
    {
        "title": "31 стартап от Y Combinator",
        "body": "23 августа Y Combinator начал летнюю сессию Demo Day — проводимого дважды в год мероприятия, где этот авторитетный стартап-инкубатор демонстрирует свои новые проекты перед множеством инвесторов. \n\nПоскольку по-прежнему большинство новых трендов в интернет-бизнесе исходят именно из США, мы решили перевести статью The Ultimate Roundup, которая представляет нам 31 интересный стартап, многие из которых могут послужить источником вдохновения для интернет-предпринимателей и в рунете.\n\n",
        "link": "https://habr.com/ru/company/fastlaneventures/blog/98526/"
    },
    {
        "title": "Создание приложений реального времени с помощью Server-Sent Events",
        "body": "Буквально недавно стало известно, что Firefox 6 получит SSE (уже есть в Opera 10.6+, Chrome, WebKit 5+, iOS Safari 4+, Opera Mobile 10+) так, что поддержка более половины всех браузеров (охват аудитории пользователей) уже не за горами. Настало время присмотреться к этой технологии. SSE предложил Ian Hickson более 7 лет назад, но только год назад она стала появляться в браузерах. У нас же есть WebSockets зачем нам ещё один какой-то протокол?! Но во всем есть свои плюсы и минусы, давайте посмотрим чем же SSE может быть полезен.\n\nИдея SSE проста — клиент подписывается на события сервера и как только происходит событие — клиент сразу же получает уведомление и некоторые данные, связанные с этим событием. Чтобы понять полезность протокола SSE необходимо сравнить его с привычными методами получения событий, вкратце объясню их суть: \n",
        "link": "https://habr.com/ru/post/120429/"
    },
    {
        "title": "Руководство: пишем интерпретатор с JIT на PyPy",
        "body": "Все исходные коды и примеры из этой статьи доступны здесь.\n\nКогда я первый раз смотрел проект PyPy, мне потребовалось некоторое время, чтобы выяснить, что он из себя представляет. Он состоит из двух вещей:\n\n— набор инструментов для написания интерпретаторов языков программирования;\n— реализация Питона с применением этого набора инструментов.\n\nВероятно, большинство людей думает, что PyPy это только вторая часть, но это руководство не об интерпретаторе Питона. Оно о том, как написать интерпретатор своего языка.\n\nЯ взялся за это руководство для того, чтобы лучше понять как работает PyPy и что он из себя представляет. Предполагается, что вы очень мало знаете о PyPy, поэтому я начну с самого начала.\n\n",
        "link": "https://habr.com/ru/post/124418/"
    },
    {
        "title": "Погодник на java для начинающих и постарше",
        "body": "\n\nПриветствую всех в этот прекрасный день ожидания праздника, это моя первая статья на хабре, в которой я хотел бы рассказа про открытый API погоды Яндекса. Статья является продолжением серии Java для начинающих. Следует отметить, статья рассчитана на тех, кто недавно начал изучения язык или на тех, кто не знаком с данным сервисом, но в любом случае, рад я буду любым читателям (эх тавтология… ). Яндекс дает неплохую возможность для разработчиков, которым требуется в своей программе или на своем сайте разместить погоду, причем информации, которую Яндекс предоставляет более, чем достаточно. \n\nПогоду Вы сможете выбрать за любой день на неделю вперед. Различные состояния (ясно, пасмурно и т. д.), множество языков (для городов, например русский и английский, для состояний все языки стран СНГ и не только: ясно, аяз, açık, ашық и т… д.), я не очень хорош в географии, но, кажется, информация там для всех стран, даже есть миниатюрные картинки состояния погоды, но самое главное, почему я выбрал этот сервис — простая и понятная структура. Сразу оговорюсь, за «рекламу» мне не платили.\n",
        "link": "https://habr.com/ru/post/164101/"
    },
    {
        "title": "Scala WAT: Обработка опциональных значений",
        "body": "В сети и на Хабре уже довольно много статей вводного уровня про то, как начать писать на Scala, и раскрывающих особенности функционального подхода.\n\nКакое-то время назад мы полностью перевели на Scala один из основных для веба проектов. За это время я наблюдал эволюцию разработчиков, включая свою собственную, и у меня скопился объёмный список конструкций, которые тянет написать, если вы раньше писали на Java, и для которых правильное решение на Scala может не быть сходу очевидным. Данные рекомендации могут быть не очень понятны тем, кто до сих пор пишет на Java и не видел до этого код на Scala. Я не буду разъяснять работу стандартных функций и функциональных концепций, всё ищется по ключевым словам в сети.\n",
        "link": "https://habr.com/ru/company/tinkoff/blog/166145/"
    },
    {
        "title": "Вывод метаданных модели MVC в динамическую разметку",
        "body": "В ASP.NET MVC метаданные — атрибуты, описывающие поля модели, используются как при генерации разметки (вывод названия поля, его заполнителя и т.д.), так и при валидации данных (вывод правил валидации). Условно можно выделить 2 вида валидации: \n\nклиентская валидация\nсерверная валидация\n\nКлиентская валидация хороша тем, что пользователь сразу же видит допущенные ошибки в заполнении полей и может внести поправки без необходимости отправлять данные серверу (ненавязчивая валидация). Именно этот тип валидации необходим в нашем случае.\n\nв чем собственно проблема ?При использовании классического подхода к генерации разметки все работает автоматически, но что если мы используем ajax и формируем html разметку динамически на клиенте? В этом случае автоматически ничего не добавится в разметку. Можно конечно же все необходимое добавить вручную и казалось бы проблема исчерпана, но здесь встает проблема дублирования кода, так как одни и те же данные приходится описывать дважды — на сервере и на клиенте, что в свою очередь влечет другие проблемы. В ряде случаев динамическая разметка очень удобна, но здесь встает вопрос о выводе метаданных модели и валидации данных на стороне клиента. Об этом речь пойдет далее.\n\nИтак, необходимо реализовать автоматический вывод метаданных модели MVC на клиентскую сторону и ненавязчивую валидацию. \n",
        "link": "https://habr.com/ru/post/178823/"
    },
    {
        "title": "Начало Windows Phone 8 Development: урок 1. Макет приложения и обработчик событий",
        "body": "Начало Windows Phone 8 Development: урок 1. Макет приложения и обработчик событий\nНачало Windows Phone 8 Development: урок 2. Доступ к локальному хранилищу приложения\nНачало Windows Phone 8 Development: урок 3. Навигация по страницам и передача параметров\nНачало Windows Phone 8 Development: урок 4. Связь с сервисами и привязка к данным\n\nВ сети достаточно много материалов, посвященных разработке под Windows Phone. А вот с частным случаем Windows Phone 8 — дела обстоят несколько печальней. В данном цикле статей будет освящен материал, сглаживающий данный пробел. Однако, если Вы ищите материалы для непосредственного начала обучения по написанию приложений под эту мобильную ОС — то будет тяжело. Советую начать с изучения приложения просто под Windows 8. Однако, если Вы являетесь разработчиком ПО независимо от происхождения или платформы, то это то, что нужно.\n \nВ своих статьях я не придерживаюсь каких либо конкретных целей, не создаю взаимосвязанных уроков или что то подобное. Я просто делюсь своими идеями и опытом, которые можно взять за основу и расширить в соответствии с Вашими потребностями. \n\nИ так. Давайте дадим ответ на вопрос, какие есть этапы разработки во время создания приложения? Вот к каким выводам я пришел:\n",
        "link": "https://habr.com/ru/post/180301/"
    },
    {
        "title": "Разработка мобильных Javascript MVC приложений с Framework7, RequireJS и Handlebars",
        "body": "Недавно передо мной стала задача разработки IPhone и Android приложения. Опыта разработки под IOS у меня ранее не было, да и хотелось написать один раз и запускать на обеих платформах. Соответственно был выбран был выбран Javascript и PhoneGap.\n\nИ если с языком я определился относительно быстро, то далее было много вопросов.\n Хотелось сделать, что бы приложение максимально повторяло интерфейс IOS7 и было похоже на native по скорости работы. При этом с одной стороны не было желания использовать «монстров», на подобии dojo или jquery mobile. c другой стороны хотелось получить удобную модульную MVC структуру приложения.\n\nВ итоге в финал моего личного сравнения вышли:\n — Ionic framework: http://ionicframework.com/ \n — Framework7: http://www.idangero.us/framework7/\n ",
        "link": "https://habr.com/ru/post/227853/"
    },
    {
        "title": "Сервис управляемых аудио-конференций своими руками",
        "body": "Аудио-конференции — удобный инструмент для решения ряда бизнес задач, большинство привыкло пользоваться чем-нибудь готовым, например, Skype. Но есть ряд случаев, когда компании нужен свой инструмент с централизованным управлением, чтобы секретарь или координатор могли создать конференцию, собрать в нее людей и управлять этим процессом. Мы рассмотрим как раз такой случай и будем использовать облачную платформу VoxImplant для реализации нужного функционала, а также другие полезные веб-библиотеки а-ля bootstrap и jquery.",
        "link": "https://habr.com/ru/company/Voximplant/blog/229593/"
    },
    {
        "title": "Домашняя бухгалтерия на платформе CUBA. Часть 2",
        "body": "\n\nЭто продолжение статьи об устройстве небольшого приложения, созданного на платформе CUBA. Приложение представляет собой систему учета домашних финансов и создавалось с двоякой целью: во-первых, собственно для учета моих финансов, а во-вторых, чтобы на простом примере проиллюстрировать возможности платформы. \n\nВ первой части я рассказал об основных частях приложения: модели данных, бизнес-логике среднего слоя и экранах, созданных на технологии Generic UI платформы. Во второй части, как и обещал, расскажу о том, как сменить тему Generic UI, как изменить поведение визуального компонента, и опишу устройство дополнительного UI для мобильных устройств, написанного на JavaScript.\n\n",
        "link": "https://habr.com/ru/company/haulmont/blog/246191/"
    },
    {
        "title": "Выразительный JavaScript: Проект: Веб-сайт по обмену опытом",
        "body": "Содержание\n\nВведение\nВеличины, типы и операторы\nСтруктура программ\nФункции\nСтруктуры данных: объекты и массивы\nФункции высшего порядка\nТайная жизнь объектов\nПроект: электронная жизнь\nПоиск и обработка ошибок\nРегулярные выражения\nМодули\nПроект: язык программирования\nJavaScript и браузер\nDocument Object Model\nОбработка событий\nПроект: игра-платформер\nРисование на холсте\nHTTP\nФормы и поля форм\nПроект: Paint\nNode.js\nПроект: веб-сайт по обмену опытом\nПесочница для кода\n\n\nНа встречах по обмену опытом люди с общими интересами встречаются и делают небольшие неформальные презентации на тему своих знаний. На встрече по обмену опытом среди фермеров кто-нибудь может рассказать о выращивании сельдерея. На встрече программистов вы можете выступить с рассказом про Node.js\n\nТакие встречи – отличный способ расширить свой кругозор, узнать о новинках области, или просто пообщаться с людьми со схожими интересами. Во многих городах есть встречи любителей JavaScript. Обычно их посещение бесплатное, и я нашёл те, которые посещал, дружелюбными и гостеприимными.\n\n\nВстречи моноциклистов\n\nВ последней главе-проекте мы устроим веб-сайт по обслуживанию выступлений, которые делаются на таких встречах. Представьте себе группу людей, которые регулярно встречаются в офисе одного из участников, чтобы поговорить о моноциклах. Проблема в том, что когда предыдущий организатор встреч переехал в другой город, никто не занял его место. Нам нужна система, которая позволит участникам предлагать и обсуждать темы друг с другом, без участия организатора.",
        "link": "https://habr.com/ru/post/246331/"
    },
    {
        "title": "Алгоритм парсинга арифметических выражений",
        "body": "Общие сведения\nВ статье рассмотрен один из возможных алгоритмов программной реализации парсера арифметических выражений, с возможностью последующего расчета их значений.\n\nПарсер — это программа, анализирующая входное арифметическое выражение. Программы подобного класса, иногда называют так же «распознавателями».\n\nПарсинг — процесс разбора входного арифметического выражения на более простые составляющие.\n\nРезультатом работы парсера является сформированное дерево лексем. Под лексемами будем понимать фрагменты входного арифметического выражения, которые не подлежат дальнейшему разбиению на составные части.\n\nОписание алгоритма распознавания приводится без привязки к какому-либо языку программирования. В заключении статьи приведен пример реализации данного алгоритма на PHP. Возможна реализация алгоритма практически на любом языке программирования (даже без поддержки ООП).\n",
        "link": "https://habr.com/ru/post/263775/"
    },
    {
        "title": "Способы передачи финансовых данных #4: Протокол ASTS Bridge",
        "body": "\n\nПомимо международных стандартов и протоколов передачи финансовой информации вроде FIX и FAST, о которых мы рассказывали ранее, на фондовом рынке функционируют и так называемые «нативные» протоколы передачи финансовых данных. Их используют для получения нужной информации как частные трейдеры, так и брокерские компании — такие нативные протоколы более функциональны, чем общепринятые стандарты (вроде того же FIX), что привлекает брокеров.\n\nРанее в России существовали две крупные биржи — ММВБ и РТС. Впоследствии они объединились в единую «Московскую биржу», но каждая из двух торговых площадок за годы независимости успела разработать собственный нативный протокол. О протоколе Plaza II, который был создан специалистами РТС, мы рассказывали в одном из прошлых материалов, а сегодня речь пойдет о проекте ASTS Bridge, который начали развивать их коллеги из ММВБ.",
        "link": "https://habr.com/ru/company/iticapital/blog/270961/"
    },
    {
        "title": "C#, способы хранения настроек программы",
        "body": "Введение\nВ интернете приведено очень много способов хранения настроек программы, но все они как-то разбросаны, поэтому я решил их собрать вместе и расписать, как этим пользоваться.\n\nC# и app.config\nНа хабре уже была посвящена этому тема, поэтому… перейти\n\nC# и Properties.Settings\nИнформация о Properties.Settings\n\nОрганизация Properties.Settings — это обычный xml файл, который можно найти в папке пользователя:\n\nС:\\ Users \\ [user name] \\ AppData \\ Local \\ [ (Project Name) or (AssemblyCompany) ] \\ [name project_cashBuild] \\ [AssemblyVersion] \\ user.config\n\nДля начала нам нужно создать такие переменные для Properties.Settings. Перейдем в Properties -> Settings.settings:\n",
        "link": "https://habr.com/ru/post/271483/"
    },
    {
        "title": "Изучаем английский с Scala на Future и Actor",
        "body": "Решил тут я подтянуть свой английский язык. В частности, захотелось значительно расширить словарный запас. Я знаю, что существует масса программ, которые в игровой форме помогают это сделать. Загвоздка в том, что я не люблю геймфикацию. Предпочитаю по старинке. Листочек бумаги где таблица со словами, транскрипцией и переводом. И учим его учим. И проверяем свои знания, например, закрывая столбец с переводом. В общем, как я учил это в университете. \n\nПрослышал я про то, что существует 3000 наиболее часто используемых слов, подобранных на OxfordDictionary сайте. Вот тут этот список слов: www.oxfordlearnersdictionaries.com/wordlist/english/oxford3000/Oxford3000_A-B Ну а перевод на русский я решил брать отсюда: www.translate.ru/dictionary/en-ru Одна только проблема, все находиться на этих сайтах ну совсем не в том формате, который можно распечатать и учить. В итоге родилась идея это все запрограммировать. Но сделать это не как последовательный алгоритм, а все распаралелить. Что бы выкачивание и парсинг всех слов занял не (3000 слов * 2 сайта) / 60 секунд = 100 минут. Это если давать по 1 секунде на выкачивание и распарсивание страницы для извлечения перевода и транскрипции (в реальности думаю это в 3 раза дольше, пока соединение откроем, пока закроем и тд и тп). \n\n\n",
        "link": "https://habr.com/ru/post/273431/"
    },
    {
        "title": "Обработка запросов в Oracle и PostgreSQL: следствия одного решения",
        "body": "Обработка запросов SQL и  в Оракле, и в Постгресе имеет много общего. Так или иначе, надо выполнить синтаксический разбор, проверить семантику (для чего потребуется метаинформация, и не важно, называется ли это «словарь данных» или «системный каталог»), выполнить какие-то преобразования, построить оптимальный план выполнения (в обеих системах основанный на стоимости, а следовательно требующий заранее собранной статистики).\n\nНо есть одно-единственное существенное различие, которое коренным образом меняет весь подход к обработке. Речь, конечно, о том, что Оракл использует глобальный кэш разобранных запросов, а Постгрес сохраняет запросы локально.\n\nВ статье мы попытаемся проследить, как из-за разницы в одном архитектурном решении логически следует совершенно разная идеология работы в запросами в двух СУБД.\n\nПриведенные примеры (которые выполнялись на версиях Oracle 11.2 XE и PostgreSQL 9.4) содержат время выполнения запросов. Нас интересуют только относительные величины: во сколько раз изменилось время выполнения после внесения в запрос тех или иных изменений. При этом абсолютные цифры могут отличаться на порядки в зависимости от аппаратуры, нагрузки и настроек. Чтобы не давать повод для бессмысленных выводов на их основании, все абсолютные значения в статье отмасштабированы так, чтобы один из запросов составлял в обеих системах 10 секунд.\n",
        "link": "https://habr.com/ru/company/postgrespro/blog/275755/"
    },
    {
        "title": "Фишки XAML-разработчика: динамический Grid",
        "body": "В статье рассмотрим несколько полезных усовершенствований для контрола Grid.\n\n",
        "link": "https://habr.com/ru/post/276077/"
    },
    {
        "title": "Замена выброса исключений уведомлениями",
        "body": "Предлагаю вашему вниманию перевод статьи \"Replace Throw With Notification\" Мартина Фаулера. Примеры адаптированы под .NET.\n\nЕсли мы валидируем данные, обычно мы не должны использовать исключения, чтобы известить о валидационных ошибках. Здесь я опишу как отрефакторить такой код с использованием паттерна «Уведомление» («Notification»).\n\n\n\nНедавно я смотрел на код, который делал базовую валидацию входящих JSON сообщений. Это выглядело примерно так…\n",
        "link": "https://habr.com/ru/post/279737/"
    },
    {
        "title": "Парсер математических выражений C# — опыт дилетанта",
        "body": "Компьютер и человек — как сложно нам понять друг друга. По сути, процесс программирования — это объяснение машине то, что ты от неё хочешь на понятном ей языке.\nВ качестве введения\nПо своей работе, да и в качестве хобби, я связан с процессом написания кода, связанного с математическими вычислениями. Одной из последних задач было написание ПО, в котором пользователь имел бы возможность самостоятельно вводить и использовать при расчёте, визуализации данных и оптимизации некоторых математических выражений. А учитывая свою природную лень и нежелание постоянно дополнять библиотеку кода специальных математических функций пришла в голову мысль — а почему бы не реализовать бредовую студенческую идею, и не изобрести велосипед парсера математических выражений.\n\nКонечно, прежде чем взяться за изобретательский процесс (опять же, в виду вселенской лени), было достаточно долгое изнасилование Яндекса и Гугла на предмет уже существующих реализаций. И их нашлось конечно же не мало. Но к сожалению того, чего хотелось добиться от конкретной реализации не нашлось. А критерии поиска были следующие:\n\n\nПарсер должен быть реализован под .NET не старше 4.0;\nОн должен обрабатывать все базовые математические операторы (+,-,*,/,^, и т.п.) с учётом их приоритетов и скобок разных видов;\nОн должен распознавать основные функции (вроде sin, cos), иметь возможность добавлять в созданный объект парсера свои функции с указанием делегатов методов, вычисляющих их значение (для любого количества входных переменных);\nДолжна быть возможность использования известных парсеру констант, и добавления их с список, используемый при разборе выражения;\nДолжен присутствовать механизм работы с параметрами и переменными. При этом требуются переменные разных типов: просто хранящие числовое значение, либо вызывающие событие, в котором внешний код определяет их значение на момент их вызова;\nДолжен быть реализован механизм функционалов (минимум — интегрирование, сумма ряда и дифференцирование)\nРезультат разбора строкового выражения должен быть представлен в объектной модели бинарного дерева;\nСамое главное — бинарное дерево должно иметь возможность отображения на дерево Linq.Expression с последующей компиляцией его в делегат, выполняющий вычисление на скорости самой платформы .NET.\n\n",
        "link": "https://habr.com/ru/post/281495/"
    },
    {
        "title": "Такая разная асинхронность",
        "body": "Здравствуйте, меня зовут Дмитрий Карловский и я… многозадачный человек. В смысле у меня много задач и мало времени, чтобы их все уже, наконец, закончить. Отчасти это и к лучшему — всегда есть чем заняться. С другой стороны — пока ты разрываешься между проектами, мир катится куда-то не туда и некому забраться на броневик и призвать толпу остановиться и немного подумать. А вопрос-то серьёзный — долгое время мир JS был погружён в ад обратных звонков и с ними не только не боролись — их боготворили. Потом он чуть менее чем полностью погряз в обещаниях. Сейчас к ним с разных сторон усиленно вставляют подпорки разной степени кривизны. А света в конце тоннеля всё не видать. Но обо всём по порядку...\nТеория многозадачности\nСперва определимся с терминами. В процессе работы, приложение выполняет различные задачи. Например, \"скачать файл с удалённого сервера\" или \"обработать запрос пользователя\".\nНе редки ситуации, когда для выполнения одной задачи требуется выполнение дополнительных задач — \"подзадач\". Например, для обработки запроса пользователя, необходимо скачать файл с удалённого сервера.\nЗапустить подзадачу мы можем синхронно, и тогда текущая задача заблокируется в ожидании завершения подзадачи. А можем запустить асинхронно, и тогда текущая задача продолжит своё выполнение не дожидаясь завершения подзадачи.\nТем не менее, обычно для завершения выполнения задачи, пусть и не сразу, но требуется и завершение выполнения подзадачи с последующей обработкой её результатов. Блокировку одной задачи в ожидании сигналов от другой будем называть \"синхронизацией\". В общем случае, синхронизация одних и тех же задач может происходить и множество раз, по самой различной логике, но в дальнейшем мы будем рассматривать лишь простейший и самый распространённый вариант — синхронизацию по завершению подзадачи.",
        "link": "https://habr.com/ru/post/307288/"
    },
    {
        "title": "Как важно писать код, который могут читать люди",
        "body": "Вам приходилось завершать проект одним махом, когда не было нужды снова смотреть в код? Вряд ли. Работая над старыми проектами, вам, вероятно, не хочется тратить время на выяснение, как работает этот код. Если код читабелен, то продукт легко сопровождать, а вы, ваши коллеги или сотрудники — счастливы.\n\nЯркие примеры нечитаемого кода встречаются на соревнованиях JS1k, цель которых заключается в написании лучших JS-приложений, состоящих из 1024 символов или того меньше. То же самое можно сказать и про JSF*ck, крайне своеобразный стиль программирования, использующий только шесть разных символов для написания JS-кода. Глядя на выложенный на этих сайтах код, вы будете ломать голову, пытаясь понять, что здесь происходит. А представьте, каково это: написать подобный код и спустя месяц пытаться исправить баг.\n \nЕсли вы регулярно сёрфите по сети или создаёте интерфейсы, то, вероятно, знаете, что для заполнения большой формы нужно много времени и терпения, которых хватает не всем пользователям. То же самое можно сказать и о коде. Чем легче его читать, тем приятнее долго работать с ним. Или как минимум не возникнет желания выкинуть компьютер в окно.\n\nВ этой статье будут рассмотрены разные уловки и хитрости, позволяющие избежать подводных камней и сделать код более читабельным.\n\nОригинал статьи: https://www.sitepoint.com/importance-of-code-that-humans-can-read/\n",
        "link": "https://habr.com/ru/company/nix/blog/307380/"
    },
    {
        "title": "Как использовать UrlManager для настройки роутинга и создания «дружелюбных» URL",
        "body": "\nЗдравствуйте, дорогие читатели! Я продолжаю цикл статей о том, как мы разрабатывали нетипичный, крупный проект с использованием Yii2 framework и AngularJS. \n\nВ предыдущей статье я описал преимущества, выбранного нами стека технологий, и предложил модульную архитектуру нашего приложения. \n\nВ этом материале речь пойдет о настройке роутинга и создании URL при помощи urlManager для каждого модуля по отдельности. Также разложу по полочкам процесс создания собственных правил для специфических URL, с помощью написания класса, который расширяет UrlRuleInterface. В завершении опишу, как мы реализовали генерацию и вывод мета тегов для публичных страниц сайта. \n\nСамое интересное под катом.\n",
        "link": "https://habr.com/ru/post/308948/"
    },
    {
        "title": "19 неожиданных находок в документации Node.js",
        "body": "Мне хотелось бы думать, что я вполне прилично знаю Node. Вот уже три года, как ни один из сайтов, над которыми я работал, не обходится без него. Но документацию до сих пор я как следует не читал.\n\nМне нравится записывать полезные вещи об интерфейсах, свойствах, методах, функциях, типах данных, и обо всём прочем, что относится к веб-разработке. Так я заполняю пробелы в знаниях. Сейчас я занят документацией к Node.js, а до этого проработал материалы по HTML, DOM, по Web API, CSS, SVG и EcmaScript.\n\n\nЧтение документации Node.js открыло мне немало замечательных вещей, о которых я раньше не знал. Ими я хочу поделиться в этом небольшом материале. Начну с самого интересного. Так же я обычно делаю, когда показываю новому знакомому свои гаджеты.\n",
        "link": "https://habr.com/ru/company/ruvds/blog/318322/"
    },
    {
        "title": "Протокол OSSI и Avaya Communication Manager",
        "body": "В данной статье я попытаюсь подробно рассказать об использовании протокола OSSI для взаимодействия с АТС Avaya Communication Manager. В открытом доступе очень мало информации по данной теме, а уж в русском сегменте все ограничивается поверхностной статьей на Хабре за 2013 год. Необходимо данную несправедливость устранять.\n",
        "link": "https://habr.com/ru/post/320596/"
    },
    {
        "title": "Черная магия метапрограммирования: как работают макросы в Rust 1.15",
        "body": "В прошлой статье мы познакомились с одной из самых интересных возможностей языка Rust — процедурными макросами. \nКак и обещал, сегодня я расскажу о том, как писать такие макросы самостоятельно и в чем их принципиальное отличие от печально известных макросов препроцессора в C/C++.\nНо сначала пройдемся по релизу 1.15 и поговорим о других новшествах, поскольку для многих они оказались не менее востребованы.",
        "link": "https://habr.com/ru/post/321620/"
    },
    {
        "title": "Краткая история JavaScript. Часть 3",
        "body": "Третья и заключительная часть перевода статьи из блога сервиса Auth0 A Brief History of JavaScript. Ключевые моменты: транспайлеры и ECMAScript 2015, немного о новом процессе подготовки обновлений, чего ждать в будущем и как на него повлияют Asm.js и WebAssembly. Перевод подготовлен отделом фронтенд-разработки компании Лайв Тайпинг.\n\nКраткая история JavaScript. Часть 1\nКраткая история JavaScript. Часть 2\n\n",
        "link": "https://habr.com/ru/company/livetyping/blog/324908/"
    },
    {
        "title": "Методы работы с «тяжёлыми» XML",
        "body": "\n\nНа работе попросили провести исследование какими средствами лучше разбирать объёмный XML файл (более 100Mb). Предлагаю сообществу ознакомиться с результатами.\n\nРассмотрим основные методы работы с XML:\n\n1. Simple XML (documentation)\n2. DOM (documentation)\n3. xml_parser (SAX) (documentation)\n4. XMLReader (documentation)\n",
        "link": "https://habr.com/ru/post/330240/"
    },
    {
        "title": "Простой бот для торговли на криптобирже",
        "body": "Всем привет! Сегодня мы напишем своего первого боевого торгового робота для игры на бирже. Криптобирже. Почему криптобирже?\nа) хайповая тема;\nб) у них как-то все попроще.\nВо-первых, хочу сразу предупредить любителей казино «три топора»: на машину вы завтра не заработаете. Статья больше о том, как начать писать своих роботов, поэтому алгоритм будет примитивный, но рабочий. \nВо-вторых, Вы заработаете. Просто немного.",
        "link": "https://habr.com/ru/post/416073/"
    },
    {
        "title": "Работа с абстрактными синтаксическими деревьями JavaScript ",
        "body": "Зачем парсить свой код? Например, для того, чтобы найти забытый console.log перед коммитом. А что делать, если вам надо изменить сигнатуру функции в сотнях вхождений в коде? Справятся ли тут регулярные выражения? В этой статье будет показано, какие возможности перед разработчиком открывают абстрактные синтаксические деревья.\n\n\n\nПод катом — видео и текстовая расшифровка доклада Кирилла Черкашина (z6Dabrata) с конференции HolyJS 2018 Piter.\n",
        "link": "https://habr.com/ru/company/jugru/blog/428628/"
    },
    {
        "title": "Добавляем ZigBee устройства в Homebridge используя CC2531",
        "body": "На Хабре уже встречались статьи о том, как подружить ZigBee устройства различных производителей с системами управления умным домом, без использования фирменных хабов, вроде Xiaomi Gateway. Однако, инструкции для homebridge, я не нашел не только на Хабре, но и на других просторах интернета. Поэтому хочу поделиться опытом добавления ZigBee устройств в homebridge. Огромную благодарность надо выразить создателю ресурса zigbee2mqtt.io, там уже расписаны способы прошивки модема CC2531 и подключения к таким системам управления умным домом как Home Assistant, Domoticz и Majordomo. Статья рассчитана на пользователей, у которых уже установлен и настроен homebridge. \n",
        "link": "https://habr.com/ru/post/462459/"
    },
    {
        "title": "[Туториал] Как создать вашу первую инкрементальную IDLE игру на JavaScript",
        "body": "Сегодня я расскажу вам, как создать простейший ToDo лист простейшую инкрементальную IDLE игру на JavaScript, потратив меньше одного дня ежегодных каникул. Для этого предлагаю выбрать сову игру попроще и не пропускать шагов между овалом и готовой совой пустым проектом и готовой игрой. \n\n\nЛюдям, знающим как делать такие игры, будет скучно; людям, знающим JS, рекомендую смотреть на код сквозь пальцы (во избежание травм) и читать только про механики. Под катом последовательная инструкция, ориентированная на новичков. ",
        "link": "https://habr.com/ru/post/465829/"
    },
    {
        "title": "50 оттенков matplotlib — The Master Plots (с полным кодом на Python)",
        "body": "Те, кто работает с данными, отлично знают, что не в нейросетке счастье — а в том, как правильно обработать данные. Но чтобы их обработать, необходимо сначала проанализировать корреляции, выбрать нужные данные, выкинуть ненужные и так далее. Для подобных целей часто используется визуализация с помощью библиотеки matplotlib.\n\n\n\nВстретимся «внутри»!",
        "link": "https://habr.com/ru/post/468295/"
    },
    {
        "title": "Инициализация в современном C++",
        "body": "\nОбщеизвестно, что семантика инициализации — одна из наиболее сложных частей C++. Существует множество видов инициализации, описываемых разным синтаксисом, и все они взаимодействуют сложным и вызывающим вопросы способом. C++11 принес концепцию «универсальной инициализации». К сожалению, она привнесла еще более сложные правила, и в свою очередь, их перекрыли в C++14, C++17 и снова поменяют в C++20.\nПод катом — видео и перевод доклада Тимура Домлера (Timur Doumler) с конференции C++ Russia. Тимур вначале подводит исторические итоги эволюции инициализации в С++, дает системный обзор текущего варианта правила инициализации, типичных проблем и сюрпризов, объясняет, как использовать все эти правила эффективно, и, наконец, рассказывает о свежих предложениях в стандарт, которые могут сделать семантику инициализации C++20 немного более удобной. Далее повествование — от его лица. ",
        "link": "https://habr.com/ru/company/jugru/blog/469465/"
    },
    {
        "title": "Создание Discord – бота на .NET Core с деплоем на VPS-сервер",
        "body": "\n\nПривет, Хабровчане!\n\nСегодня вы ознакомитесь со статьей, в которой будет рассказано, как создать бота, используя C# на .NET Core, и о том, как его завести на удаленном сервере. \n\nСтатья будет состоять из предыстории, подготовительного этапа, написания логики и переноса бота на удаленный сервер.\n\nНадеюсь, данная статья поможет многим начинающим. ",
        "link": "https://habr.com/ru/post/479180/"
    },
    {
        "title": "Вывод типов в jscodeshift и TypeScript",
        "body": "Вывод типов в jscodeshift и TypeScript\nНачиная с версии 6.0 jscodeshift поддерживает работу с TypeScript (далее TS). В процессе написания codemode-ов (преобразований), может потребоваться узнать тип переменной, которая не имеет явной аннотации. К сожалению, jscodeshift не предоставляет средств для вывода типов «из коробки».",
        "link": "https://habr.com/ru/post/480304/"
    },
    {
        "title": "Анализ утечки второго порядка: когда утекает у тех, кто ворует данные у банка",
        "body": "Все уже привыкли к тому, что данные клиентов российских банков то тут, то там всплывают либо в открытом доступе, либо выставляются на продажу на различных теневых форумах. \n\nСейчас хочется поговорить о том, откуда эта информация берется, на примере конкретного случая с известным российским банком. Чтобы никого не обидеть (а банки очень обидчивы и любят публично поистерить силами своих пиар-отделов, все отрицая в стиле «вы все врете» и «на нас осуществляют информационную атаку»), назову данный банк условно «Эпсилон».\nМне на анализ попало два весьма интересных PHP-приложения, случайно оказавшихся в открытом доступе на одном из серверов в Нидерландах. Но обо всем по порядку…",
        "link": "https://habr.com/ru/post/490786/"
    },
    {
        "title": "Как ‌С#-разработчик у JavaScript плохому учился",
        "body": "\n\nНедавно мне на глаза попалась одна статья на Хабре. В ней сравниваются C# и JavaScript. На мой взгляд, сравнивать их — всё равно что сравнивать луну и солнце, которые, если верить классику, не враждуют на небе. Эта статья напомнила мне о другой публикации. В ней речь идёт о сценариях неожиданного и неочевидного поведения JavaScript, а C# не упоминается от слова совсем, но живое любопытство сподвигло меня попытаться повторить подобное поведение на другом языке.",
        "link": "https://habr.com/ru/post/508526/"
    },
    {
        "title": "Rust глазами Python-разработчика",
        "body": "\nПривет! Мы – часть команды разработки «Рамблер/Медиа» (портал «Рамблер»). На протяжении трех лет мы поддерживаем и развиваем несколько больших python-приложений. Чуть больше года назад перед нами встала задача написать еще одно большое приложение – API к основному хранилищу новостей, и мы сделали это на Rust. \nВ статье мы расскажем о том, что заставило нас отойти от привычного стека технологий, и покажем, какие плюсы по сравнению с Python есть у Rust.\nМы не ответим на вопрос, почему выбор пал именно на Rust, а не Go, например, или на какой-либо другой язык. Также мы не будем сравнивать производительность Python- и Rust-приложений – эти темы достойны отдельного обсуждения. ",
        "link": "https://habr.com/ru/company/rambler_and_co/blog/533268/"
    },
    {
        "title": "Реализация Minecraft Query протокола в .Net Core",
        "body": "Minecraft Server Query – это простой протокол, позволяющий получить актуальную информацию о состоянии сервера путём отправки пары-тройки незамысловатых UDP-пакетов.На вики есть подробное описание этого протокола с примерами реализации на разных языках. Однако меня поразила, насколько куцые реализации для .Net существуют на данный момент. Поискав некоторое время, я наткнулся на несколько репозиториев. Предлагаемые решения либо содержали банальные ошибки, либо имели урезанный функционал, хотя, казалось бы, куда ещё больше урезать-то.Так было принято решение написать свою реализацию.",
        "link": "https://habr.com/ru/post/543798/"
    },
    {
        "title": "GraphQL на Rust",
        "body": "В этой статье я покажу как создать GraphQL сервер, используя Rust и его экосистему; будут приведены примеры реализации наиболее часто встречающихся задач при разработке GraphQL API. В итоге API трёх микросервисов будут объединены в единую точку доступа с помощью Apollo Server и Apollo Federation. Это позволит клиентам запрашивать данные одновременно из нескольких источников без необходимости знать какие данные приходят из какого сервиса.",
        "link": "https://habr.com/ru/post/546208/"
    },
    {
        "title": "Kotlite и Kotgres: генераторы SQL и JDBC кода на Kotlin для Sqlite и Postgresql",
        "body": "Нравится Kotlin? Считаешь SQL мощным инструментом? Подташнивает от слов ORM, JPA, Hibernate? Есть выход! Автоматическая генерация SQL + JDBC без бойлер-плейта.",
        "link": "https://habr.com/ru/post/550264/"
    },
    {
        "title": "Преобразуем строки в числа в разных системах счисления",
        "body": "Одной из частых рутин на работе является преобразование и извлечение чисел из строк текста. Самый наивный и простой подход в языке Java при преобразовании строки в число, это использовать Double.parseDouble(String num). Проблема этого метода в том, что он имеет баги в различных SDK, например в Android. Кроме того, данному методу не передаётся информация об основании системы счисления. Можно, конечно, использовать классы оболочки, передавая им в конструктор основание системы, но хотелось бы извлекать данную информацию из самой строки автоматически.В данной статье описан простой метод преобразования строки в число, который способен автоматически определять основание системы счисления числа, его знак и экспоненту из самой строки.",
        "link": "https://habr.com/ru/post/575456/"
    },
    {
        "title": "Написание компилятора на Haskell + LLVM",
        "body": "На работе я пишу почти исключительно на Python, с университетской скамьи остались некоторые знания C/C++, в одном pet-project использовал Haskell. С таким багажом знаний я взялся за написание компилятора на основе LLVM - зачем и что получилось я уже рассказывал в предыдущей статье.Эту статью я пишу для тех, кто, как и я, заинтересован в изучении Haskell, создании собственных языков программирования, или хочет поиграться с LLVM - но не знает с какого конца подойти к задаче.Я кратко расскажу про необходимый минимум знаний Haskell, про свои ошибки и к каким решениям я пришел - а так же про решения, к которым я не пришел, и про которые узнал позже - и как их можно интегрировать в ваш pet-компилятор. На все это я по возможности дам ссылки на изучение.",
        "link": "https://habr.com/ru/post/581234/"
    },
    {
        "title": "Пишем чат-бот на Python + PostgreSQL и Telegram",
        "body": "Пошаговое руководство написания чат-бота на языке Python.Установим Python и библиотеки на Debian, подключим PostgreSQL, получим вопросы и ответы, подключим морфологию и нормализуем слова, запустим чат-бота в Telegram. Голая практика и полный листинг с комментариями. ",
        "link": "https://habr.com/ru/post/593065/"
    },
    {
        "title": "TypeScript тип any против всех",
        "body": "В жизни каждого разработчика на TypeScript наступает момент, когда ему хочется рвать с все связи с типом any. А ведь по началу, он казался таким милым! Сделай переменной аннотацию типа any и используй любое свойство и метод этой переменной так, как привык работать в JavaScript. Никаких тебе ошибок, все чинно и спокойно, по-старому.Документация TypeScript оправдывает использование any только на время переноса кодовой базы из JavaScript в TypeScript, но считает постыдным его использование в полноценном проекте. Казалось бы, все хорошо, только в описании типов библиотечных функций самого TypeScript аннотации any встречаются. Очень полезный JSON.parse, один из таких методов. Мы можем каждый раз писать as unknown, а можем доопределить библиотечный интерфейс.",
        "link": "https://habr.com/ru/post/653779/"
    },
    {
        "title": "Yet another JSON-парсер",
        "body": "Здравствуйте, дорогие читатели. В данной статье описана реализация ещё одного, очередного, JSON-парсера, который способен извлекать целые JSON-объекты с содержимым из текста. Данный парсер использует стэки явно без рекурсии, для отслеживания контекста вложенности. Он основан на модели автоматов с магазинной памятью (МП-Автоматы). Данный парсер будет простым, без модели восстановления ошибок. Он рассматривает в качестве корневого элемента - JSON-объект. В случае массива, (или любого другого значения) массив можно обернуть в объект, и подать на вход к парсеру. В случае двух объектов, в файле, необходимо распарсить их отдельно. В конце статьи будет написано, как заставить парсер проверять вообще любое значение из JSON-текста.",
        "link": "https://habr.com/ru/post/659287/"
    },
    {
        "title": "Забавы с маргинальными фреймворками: Пишем приложение для отладки TCP соединений с Malina.js",
        "body": "Одна из моих работ связана с отлаживанием протоколов общения  теплосчётчиков для удалённого снятия показаний. Чаще всего теплосчётчик  даже не мой, а находится у клиента на объекте, поэтому я подключаю его  через GPRS-терминал к какой-либо своей сетевой машине, где поднят TCP  сервер откуда посылаю байтики и смотрю, что мне ответит теплосчётчик.  Посылать байты с консоли можно, но не очень удобно. Есть ряд приложений с  которыми этот процесс упрощается, но я решил сделать себе в помощь  специальный TCP сервер в виде Node-приложения с Web-интерфейсом, созданном с помощью фреймворка Malina.js.Под  катом я расскажу в деталях о создании этого приложения. Рассказ будет  очень длинным, чашка кофе или бокал пенного лишними не будут.",
        "link": "https://habr.com/ru/post/663568/"
    },
    {
        "title": "Пользовательские шорткаты в Windows с помощью Autohotkey",
        "body": "По следам недавних и не столь недавних публикаций о шорткатах в Windows (1, 2) и Linux решил написать о том, как при помощи программы Autohotkey (Windows-only, инсталлятор, портабельная (zip) версия) можно задавать свои собственные клавиатурные сокращения для тех команд, для которых в системе по умолчанию никаких шорткатов не предусмотрено. Во многом свою роль здесь сыграло желание иметь в Винде те же шорткаты, что и на Маке, на котором я одно время много работал.\n\n",
        "link": "https://habr.com/ru/post/24652/"
    },
    {
        "title": "Работаем с LINQ to XML",
        "body": "В первой статье в блоге .NET «Работаем с XML» в комментариях народ потребовал статьи LINQ to XML. Что же, попробуем раскрыть принципы работы этой новой технологии от Microsoft.\n\nСоздадим базу для ведения каталога аудиозаписей. ",
        "link": "https://habr.com/ru/post/24673/"
    },
    {
        "title": "Java. Простой SAX парсер",
        "body": "Во многих задачах возникает необходимость использования разного рода xml файлов в различных целях. Я не буду пытаться объять необъятное, а расскажу по своему опыту для чего мне все это понадобилось.\n\n",
        "link": "https://habr.com/ru/post/62757/"
    },
    {
        "title": "Пример web-проекта на VS2010",
        "body": "Выход VS 2010 для меня, в первую очередь, это возможность работать с .Net 4, Entity Framework 4, ASP.NET MVC 2.\nВсе полученные теоретические знания, на мой взгляд должны быть выражены в практическом опыте. Поэтому как только представилась возможность, я реализовал проект с использованием VS 2010. И теперь готов поделиться своими впечатлениями от новых возможностей.\nСтатья рассчитана на искушенных разработчиков )\n\n",
        "link": "https://habr.com/ru/post/93331/"
    },
    {
        "title": "Последовательный вызов асинхронных функций",
        "body": "Как известно, язык JavaScript преследует парадигму событийно-ориентированного программирования. Это, безусловно, хорошо, но что делать, если за одной асинхронной функцией должна вызываться другая асинхронная функция, а затем еще одна, и еще… Иногда такой код очень запутывает, и не только человека привыкшего к синхронному и поочередному вызову функций. Это касается сложных анимаций, таймаутов, аякса, когда за одним должно следовать другое, и так дальше.\n\nПоэтому, я разработал свой костыль, который позволяет более наглядно вызывать асинхронные функции, запускающие callback после выполнения. Вполне вероятно, что решение уже давно существует, но я, к сожалению, такого решения не нашел.\n\nUPD\n\nНиже моё решение, являющееся аналогом этой функции модуля async и кучи других подобных решений, представленных в комментариях. Спасибо всем комментирующим и sedictor в частности.\n/UPD\n\nРассмотрим пример (который взят из головы и в нем возможны ошибки) гипотетического парсера сайта, который после парсинга заносит данные в БД, и, после занесения, вызывает некоторый код.\n\nvar html = '';\nrequest.on('response', function (response) {\n\n    response.on('data', function (chunk) {\n        html = html + chunk;\n    });\n\n    response.on('end', function() {\n        //какой-то парсер\n        parse(html, function(data){  \n                //какая-нибудь функция, добавляющая данные в базу\n\t\taddToDatabase(data, function() {  \n\t\t\tdoSomething();\n\t\t})\n\t});\n\n    });\n});\n\nМного вложенных колбеков — не есть гуд, пробуем по-другому.\n",
        "link": "https://habr.com/ru/post/134823/"
    },
    {
        "title": "Фильтры данных на ASP.NET MVC и Entity Framework",
        "body": "Очень часто в различных веб-приложениях мы работаем с данными, выбранными из таблиц БД. И нередко необходимо предоставлять пользователю возможность фильтровать эти данные. Можно, конечно, для каждого случая собирать данные с формы в ручную и в ручную создавать соответствующий запрос под них. Но что если у нас 20 разных страниц, представляющих те, или иные данные? Обрабатывать в ручную все долго и не удобно, а поддерживать еще хуже. Моя версия решения данной проблемы на ASP.NET MVC + Entity Framework под катом.\n",
        "link": "https://habr.com/ru/post/141440/"
    },
    {
        "title": "Защита от SQL-инъекций в PHP и MySQL",
        "body": "К своему удивлению, я не нашёл на Хабре исчерпывающей статьи на тему защиты от инъекций. Поэтому решил написать свою.\n\nНесколько пространный дисклеймер, не имеющий прямого отношения к вопросуДавайте признаем факт: количество статей (и комментариев) на тему защиты от SQL-инъекций, появившихся на Хабре в последнее время, говорит нам о том, что поляна далеко не так хорошо истоптана, как полагают некоторые. Причём повторение одних и тех же ошибок наводит на мысль, что некоторые заблуждения слишком устойчивы, и требуется не просто перечисление стандартных техник, а подробное объяснение — как они работают и в каких случаях должны применяться (а в каких — нет).\n\nСтатья получилась довольно длинной — в ней собраны результаты исследований за несколько лет — но самую важную информацию я постараюсь компактно изложить в самом начале, а более подробные рассуждения и иллюстрации, а так же различные курьёзы и любопытные факты привести в конце. Также я постараюсь окончательно развеять множественные заблуждения и суеверия, связанные с темой защиты от инъекций.\n\nЯ не буду пытаться изображать полиглота и писать рекомендации для всех БД и языков разом. Достаточное количество опыта у меня есть только в веб-разработке, на связке PHP/MySQL. Поэтому все практические примеры и рекомендации будут даваться для этих технологий. Тем не менее, изложенные ниже теоретические принципы применимы, разумеется, для любых других языков и СУБД.\n\nСразу отвечу на стандартное замечание про ORM, Active record и прочие query builders: во-первых, все эти прекрасные инструменты рождаются не по мановению волшебной палочки из пены морской, а пишутся программистами, используя всё тот же грешный SQL. Во-вторых, будем реалистами: перечисленные технологии — хорошо, но на практике сырой SQL постоянно встречается нам в работе — будь то legacy code или развесистый JOIN, который транслировать в ORM — себе дороже. Так что не будем прятать голову в песок и делать вид, что проблемы нет.\n\nХоть я и постарался подробно осветить все нюансы, но, вполне возможно, некоторые из моих выводов могут показаться неочевидными. Я вполне допускаю, что мой контекст и контексты читателей могут различаться. И вещи, которые кажутся мне сами собой разумеющимися, не являются таковыми для некоторых читателей. В этом случае буду рад вопросам и уточнениям, которые помогут мне исправить статью, сделав её более понятной и информативной.\n\nЕщё только начав интересоваться темой защиты от инъекций, я всегда хотел сформулировать набор правил, который был бы одновременно исчерпывающим и компактным. Со временем мне это удалось:\n\nПравила, соблюдение которых гарантирует нас от инъекций\n\nданные подставляем в запрос только через плейсхолдеры\nидентификаторы и ключевые слова подставляем только из белого списка, прописанного в нашем коде. \n\nВсего два пункта.\nРазумеется, практическая реализация этих правил нуждается в более подробном освещении. \nНо у этого списка есть большое достоинство — он точный и исчерпывающий. В отличие от укоренившихся в массовом сознании правил «прогонять пользовательский ввод через mysql_real_escape_string» или «всегда использовать подготовленные выражения», мой набор правил не является катастрофическим заблуждением (как первое) или неполным (как второе).\n\nНо вперёд, читатель — перейдём уже к подробному разбору.\n",
        "link": "https://habr.com/ru/post/148701/"
    },
    {
        "title": "Конвертация строки в число",
        "body": "Помогал на днях одной своей знакомой разобраться в программировании. По ходу дела написали учебную программу, которая умеет конвертировать строку (string) в число (int). И как-то само собой захотелось сравнить скорость работы собственной нетленки, со скоростью работы стандартных инструментов (Convert.ToInt32 и Int32.Parse). Результат такого сравнения, на первый взгляд, получился несколько необычным.\n",
        "link": "https://habr.com/ru/post/150339/"
    },
    {
        "title": "Drupal: пишем свой парсер для Feeds",
        "body": "Модуль Feeds является очень популярным среди Drupal-разработчиков. Но возникает вопрос, что делать если необходимо несколько расширить его функциональность. В этом нам поможет система плагинов модуля Feeds. \nСуществует 3 вида плагинов от которых необходимо наследовать новые:\n\nFeedsFetcher — плагин сборщика. Cтандартные: HTTP и File Upload. С помощью этого типа плагинов можно добавить новый источник данных.\nFeedsProcessor — плагин обработки сущностей. Cтандартные: Node processor, Taxonomy term processor, User processor. С помощью нового плагина можно добавить новый обработчик, который будет создавать особенные сущности, не вписывающиеся в стандартный набор.\nFeedsParser — плагин парсера. Стандартные парсеры в Feeds это XML, CSV и многие другие.\n\nВ этой статье я хотел бы остановиться именно на написании модуля парсера, так как довольно часто приходится иметь дело с импортом файлов со специфической структурой.\n",
        "link": "https://habr.com/ru/post/164707/"
    },
    {
        "title": "PHP класс для удобной и безопасной работы с MySQL",
        "body": "После написания статьи про защиту от инъекций я взялся за написание класса, реализующего изложенные в ней идеи.\nА точнее, поскольку ключевой функционал уже использовался в рамках рабочего фремворка, я занялся выделением его в самостоятельный класс. Пользуясь случаем, хочу поблагодарить участников PHPClub-а за помощь в исправлении нескольких критических ошибок и полезные замечания. Ниже я постараюсь описать основные особенности, но сначала небольшой дисклеймерЕсть несколько способов работы с SQL — можно использовать квери-билдер, можно ORM, можно работать с чистым SQL. Я избрал последний вариант, потому что мне он ближе. Я совсем не считаю первые два плохими. Просто лично мне всегда было тесно в их рамках. Но я ни в коем случае не утверждаю, что мой вариант лучше. Это просто ещё один вариант. Который можно использовать, в том числе, и при написании ORM-а. В любом случае, я считаю, что наличие безопасного способа работать с чистым SQL не может принести какой-либо вред. Но при этом, возможно, поможет последним оставшимся приверженцам использования mysql_* в коде приложения, отказаться, наконец, от этой порочной практики.\nВ двух словах, класс строится вокруг набора функций-хелперов, позволяющих выполнять большинство операций с БД в одну строку, обеспечивая при этом (в отличие от стандартных API) полную защиту от SQL инъекций, реализованную с помощью расширенного набора плейсхолдеров, защищающих любые типы данных, которые могут попадать запрос. \nВ основу класса положены три базовых принципа:\n\n100% защита от SQL инъекций\nПри этом защита очень удобная в применении, делающая код короче, а не длиннее\nУниверсальность, портабельность и простота освоения\n\nОстановлюсь чуть подробнее на каждом из пунктов. \n",
        "link": "https://habr.com/ru/post/165069/"
    },
    {
        "title": "Почему SNMP это не очень просто?",
        "body": "Давным давно, на Хабре была опубликована статья, рассказывающая о том, как использовать популярную библиотеку, для работы с SNMP из Java-приложения. Поддерживая, в целом, начинание автора, я хочу остановиться на тех сложностях, которые могут возникнуть в реальном проекте, использующем SNMP.\n",
        "link": "https://habr.com/ru/post/196308/"
    },
    {
        "title": "История одного Google Chrome расширения",
        "body": "В один прекрасный день, за пару часов до конца работы, мне приходит задача: «Нужно написать приложение для браузера, которое должно по клику пользователя отправлять данные со страницы на сайт клиента. Что за приложение и какой браузер — полностью на ваш выбор...».\n\nНемного поразмыслив я пришел к варианту google chrome extension:\n\n\nCrome использует Blink движок (до апреля 2013 года использовался WebKit), Blink является форком WebKit (а это Safari), так же не забываем новую Opera'у (хотя я все еще использую старую с bookmarks'ами). Таким образом, написав расширения для chrome, мы с минимальными переделками (а то и без них) сможем его портировать на еще 2 браузера \nНет опыта работы с API Google Chrome\nGoogle все-таки компания добра :)\n\n\nКогда мысли немного улеглись, первое что я сделал — это ввел в поиске харба \"расширение Google Chrome\". Увидев обширный вариант статей по данной теме, я со спокойной душой ушел домой полностью уверенный в том, что завтра с утра прочитав их, к концу рабочего дня дело будет 'в шляпе' (как же я тогда ошибался). Прочитав парочку их них я имел общее представление о том как это работает, но этого оказалось мало для воплащения моих идей. Что ж, приступим…\n",
        "link": "https://habr.com/ru/post/198778/"
    },
    {
        "title": "Простой интерпретатор с нуля на Python #2",
        "body": "\n\nВ предыдущей статье мы рассматривали сам язык IMP и основную структуру интерпретатора. Также, мы тщательно рассмотрели лексер. В этой статье мы будем писать небольшой парсер для нашего языка. Он будет извлекать AST (abstract syntax tree) из списка токенов, сгенерированных лексером. Библиотека комбинатора будет независимая, то есть с помощью нее можно будет написать парсер для любого языка.\n\nСодержаниеПростой интерпретатор с нуля на Python #1\nПростой интерпретатор с нуля на Python #2\nПростой интерпретатор с нуля на Python #3\nПростой интерпретатор с нуля на Python #4\n\nЧто такое комбинаторы парсеров?\nЕсть очень много способов написать парсер. Самым простым и быстрым способом сделать это являются комбинаторы.\n\nВы можете считать парсер функцией, которая принимает поток токенов. Если успешно, то парсер будет «съедать» немного токенов из потока. Функция вернет часть финального AST вместе с остальными токенами. Комбинатор — это функция, которая производит парсер, как его результат, обычно после приема одного или нескольких анализаторов (парсеров) в качестве входных данных, отсюда и название — «комбинатор». Вы можете использовать комбинаторы для создания законченного парсера для языка, как IMP, путем создания множества маленьких парсеров для каждой части языка.\n",
        "link": "https://habr.com/ru/post/206454/"
    },
    {
        "title": "UNIX_TIMESTAMP, ROUND и другие DQL запросы через queryBuilder в Symfony 2",
        "body": "Как известно у Symfony 2 в Doctrine 2 из «коробки» нет поддержки некоторых стандартных функций Mysql, таких как UNIX_TIMESTAMP или ROUND и еще несколько других. В первую очередь статья для того чтобы понять как дополнять DQL своими функциями. Но перед написанием как следует «похабрить» и по «гитхабить», а вдруг уже кто-то написал, советую не городить велосипеды и воспользоваться уже готовыми наработками, например GitHub MysqlDoctrineFunctions.\n\nСтатья больше подходит для новичков.\n",
        "link": "https://habr.com/ru/post/209870/"
    },
    {
        "title": "Новое в Java 8",
        "body": "Java еще не умерла — и люди начинают это понимать.\nДобро пожаловать в ведение по Java 8. Этот материал шаг за шагом познакомит вас со всеми новыми фичами языка. Вы научитесь использовать методы интерфейсов по умолчанию (default interface methods), лямбда-выражения (lambda expressions), ссылки на методы (method references) и повторяемые аннотации (repeatable annotations). Все это будет сопровождаться короткими и простыми примерами кода. В конце статьи вы познакомитесь с наиболее свежими изменениями в API, касающихся потоков, функциональных интерфейсов, расширений для ассоциативных массивов, а также с изменениями в API работы с датами.\n",
        "link": "https://habr.com/ru/post/216431/"
    },
    {
        "title": "Рациональная автоматизация кампании в Google AdWords",
        "body": "Предыстория\nВсе началось со слов «А сделай-ка xml выгрузку для AdWords», и тут понеслось. Как ни странно, но именно эта задача была выполнена довольно быстро, но дальше было интереснее. Как оказалось, в AdWords появилась возможность писать скрипты (javascript) по автоматизации процесса ведения кампании и было бы все хорошо, если бы не лимиты по времени исполнения и xml. Да-да, именно xml. Я не знаю, почему всем так запал в душу этот формат, но мне он никогда не нравился. С 95% задачи я справился и, откровенно говоря, удовольствия я от этого не получил да и оставалось еще 5% задачи. Именно эти 5% я бросил уже не на xml, a на json и вот тут стало весело.\n\nБольше конкретики\nДавайте конкретизируем о чем вообще идет речь. Есть интернет магазин с ~25 000 наименований. Маркетологу нужна выгрузка, чтоб загнать это все в кампанию: создать группы обьявлений, сами обьявления, ключи и т.д. Как выяснилось дальше, то не важно какой формат входящих данных (xml/json), по этому я выбрал тот, что мне больше по душе — json.\n",
        "link": "https://habr.com/ru/post/229177/"
    },
    {
        "title": "Как я писал кросплатформенный 3d игровой движок",
        "body": "Приветствую Хабр! Многие из нас наверняка задумывались «а не написать ли мне игру самому». Сейчас я веду проект «Open tomb» — попытка создать переносимый движок для игры в первые 5 частей «Tomb raider», который выложен на sourceforge.com, однако, судя по своему опыту, многим будет интересна история с некоторыми деталями о том, как движок писался с нуля и с практически отсутствующими знаниями в этой области. Даже сейчас многих знаний не хватает, а иногда просто не хватает мотивации что-то сделать лучше, или правильнее, однако лучше перейти к тому, как все же проект оживал шаг за шагом. \n",
        "link": "https://habr.com/ru/post/239751/"
    },
    {
        "title": "JSON, который можно комментировать",
        "body": "Не все JSON нельзя комментировать (например, Хром[иум] вполне переносит комментарии в manifest.json), но в стандарте не предусмотрены комментарии к нему. Поэтому ряд функций в NodeJS не обрабатывают комментарии в формате JS и считают их ошибкой. Точно так же, AJAX с форматом JSON принимает их за ошибку. Поэтому для конфигурационных файлов в формате JSON имеется масса неудобств при попытках их использовать как человеко-читаемые файлы. Может быть, это иногда хорошо. Если хотим прокомментировать, то будем вынуждены оформить комментарий под или над строкой как «ключ-значение».\n...{...\n    \"some-key_comment\":\"my comment for key and value\",\n    \"some-key\":\"some-value\",\n...}...\nНо если комментарии не пишем, следуя суровости протоколов, ошибки возникают уже из-за другого фактора — забывания смысла параметров настроек при редактировании человеком.\n...{...\n    \"some-key\":\"some-value\", //какой-какой key?? Ай, комментарии - нельзя!\n...}...\n\nПридумаем JSON-подобный формат с комментариями в стиле JS, чтобы их можно было выполнять как JS, а, очистив от комментариев — читать как JSON. (\"TL:DR: покажите мне код.\")\n",
        "link": "https://habr.com/ru/post/247473/"
    },
    {
        "title": "Разбор естественного языка: под капотом",
        "body": "\n\nAPI синтаксического анализатора\nПродолжаю свой предыдущий пост. Время сфокусироваться на деталях внутреннего устройства синтаксического анализатора. В качестве языка реализации я выбрал Go, поскольку хотел малой ценой получить параллельный (в смысле, использующий все доступные ядра CPU) производительный инструмент, без погружения в низкоуровневую пучину C++.\n\nПолученный код предоставляет следующий API:\ntype Attribute struct {\n    Name   string\n    Value  string\n}\n\ntype ParseMatch struct {\n    Text            string\n    Nonterminal     string\n    Rule            string\n    Attributes      []Attribute\n    Submatches      []ParseMatch\n    Hypotheses      []string\n    HypothesisCount uint\n}\n\nfunc Parse(text, nonterminal string, hypotheses_limit uint) []ParseMatch\n\nMatch ссылается на дочерние объекты того же типа, соотвествующие нетерминалам или лексическим терминалам подошедшего правила. В общем случае, из-за неоднозначности, присущей естественным языкам, тексту соответствует несколько разборов (например, из-за наличия омонимов). Поэтому функция Parse возвращает множество объектов Match. Вышеупомянутая неоднозначность синтаксического разбора должна устраняться на следующем (семантическом) уровне анализа текста.\n\nИтак, функция Parse берёт text — текст для разбора, nonterminal — название нетерминала (например, «sentence»), а также максимальное число выдвигаемых гипотез hypotheses_limit (об этом чуть ниже). Параметр nonterminal может быть пустым. В этом случае тексту будет сопоставляться лексический терминал, найденный в морфологической базе.\n\nВ терминах данного анализатора гипотеза — это предположение того, что нарушенное ограничение значения атрибута вызвано случайной причиной. Если анализатор встречает несоответствие значения атрибута ограничению, заданному рассматриваемым в данный момент правилом, а число выдвинутых гипотез не достигло hypotheses_limit, то данное несоответствие игнорируется. В противном случае рассматриваемое правило отбрасывается. Данный механизм удобен для отладки правил, но должен избегаться в реальной работе, поскольку чудовищно замедляет процесс разбора.\n",
        "link": "https://habr.com/ru/post/255711/"
    },
    {
        "title": "Создаём REST-сервис на Rust. Часть 3: обновляем базу из консоли",
        "body": "В предыдущей части мы разобрали конфигурационный файл базы данных, чтобы считать из него параметры соединения.\n\nТеперь давайте реализуем непосредственно операции обновления БД: создание, обновление, удаление наших записей и соответствующий им интерфейс командной строки.\n",
        "link": "https://habr.com/ru/post/267779/"
    },
    {
        "title": "AutoCAD: Связь с внешними данными",
        "body": "Часто пользователи хотят связать объекты чертежа с внешними данными – Таблицей Excel, базой данных или просто с текстовым или xml файлом. Конечно, в AutoCAD существует множество способов взаимодействия с внешними данными: _DataLink, dbConnect, attin, _script. Но все эти инструменты требуют «много кликов» и не обеспечивают нужного взаимодействия. Пользователю хочется, что бы объекты чертежа автоматически приводились в соответствие с внешними данными, с минимальным его участием. Образцовым примером подобного взаимодействия является FDO в AutoCAD Map 3D – когда после подключения к источнику мы сразу получаем его содержание в виде графики (и при желании даже с подписями) и для синхронизации с источником, достаточно выполнить обновление слоя (одна команда). Но это специальный (а значит ограниченный) ГИС инструмент, который подойдет не всем. И тогда остаётся лишь применить программирование, благо существует огромное количество способов это сделать – Lisp, C++, .Net, Delphi, Python и т. д.\n",
        "link": "https://habr.com/ru/post/271109/"
    },
    {
        "title": "Дайджест интересных материалов для мобильного разработчика #139 (1-7 февраля)",
        "body": "В новой еженедельной подборке – как писать игру 3 года, как продать приложение, которое не приносит прибыли, инструменты A/B тестирования, новый Android Wear и, конечно, снова о Parse.\n\n",
        "link": "https://habr.com/ru/post/276737/"
    },
    {
        "title": "А ваш AngularJS умеет работать на 3.5Mb ОЗУ?",
        "body": "\nВ начале весны ABBYY LS совместно с Xerox запустили сервис для перевода документов Xerox Easy Translator Service. Изюминкой этого сервиса является приложение, запускаемое на МФУ Xerox и позволяющее отсканировать необходимое количество документов, дождаться перевода на один из выбранных 38 языков, произвести печать перевода — и все это не отходя от МФУ.\n\nПриложение запускается на определенной серии МФУ Xerox на основе технологии Xerox ConnectKey с сенсорным экраном 800x480 точек. Аппаратная начинка МФУ зависит от конкретной модели, например, наша тестовая малютка Xerox WorkCentre 3655 имеет на борту 1Ghz Dual Core процессор и 2Gb оперативной памяти. Как ни удивительно, но МФУ имеет встроенный webkit-браузер, а наше приложение — это обычное html-приложение, разработанное на AngularJS 1.3.15.\n\nО самом проекте мы писали в блоге раньше, а эта статья посвящена одному из увлекательных этапов проекта, а именно оптимизации AngularJS под работу на МФУ Xerox. Как оказалось на деле, платформа МФУ практически не накладывает никаких серьезных ограничений на разработку приложений, и они работают практически так же, как и на десктопных webkit-браузерах, за исключением одного НО — ",
        "link": "https://habr.com/ru/company/abbyy/blog/302960/"
    },
    {
        "title": "Пишем микросервис на KoaJS 2 в стиле ES2017. Часть I: Такая разная ассинхронность",
        "body": "\n\nУ Вас никогда не возникало желания переписать все с чистого листа, «забить» на совместимость и сделать все «по уму»? Скорее всего KoaJS создавался именно так. Этот фреймворк уже несколько лет разрабатывает команда Express. Экспресовцы про эти 2 фреймворка пишут так: Philosophically, Koa aims to «fix and replace node», whereas Express «augments node» [С филосовской точки зрения Koa стремится «пофиксить и заменить ноду» в то время как Express «расширяет ноду»]. \n\nKoa не обременен поддержкой legacy-кода, с первой строчки вы погружаетесь в мир современного ES6 (ES2015), а в версии 2 уже есть конструкции из будущего стандарта ES2017. В моей компании этот фреймворк в продакшене уже 2 года, один из проектов (AUTO.RIA) работает на нагрузке полмиллиона посетителей в день. Несмотря на свой уклон в сторону современных/экспериментальных стандартов фреймворк работает стабильнее Express и многих других фреймворков с CallBack-style подходом. Это обусловлено не самим фреймворком, а современными конструкциями JS, которые в нем применяются. \n\nВ этой статье я хочу поделиться своим опытом разработки на koa. В первой части будет описан сам фреймворк и немного теории по организации кода на нем, во второй мы создадим небольшой рест-сервис на koa2 и обойдем все грабли, на которые я уже наступил.\n",
        "link": "https://habr.com/ru/post/306816/"
    },
    {
        "title": "Функции высших порядков и монады для PHP`шников",
        "body": "Среди PHP программ преобладает процедурный или в последних версиях частично объектно-ориентированный стиль программирования. Но можно писать и иначе, в связи с чем хочется рассказать о функциональном стиле, благо кое-какие инструменты для этого имеются и в PHP.\nПоэтому мы рассмотрим реализацию парсера JSON в виде простейших функций и функций их комбинирующих в более сложные, постепенно дойдя до полноценного парсера JSON формата. Вот пример кода, который мы получим:\n$jNumber = _do(function() {\n    $number  = yield literal('-')->orElse( literal('+') )->orElse( just('') );\n    $number .= yield takeOf('[0-9]')->onlyIf( notEmpty() );\n    if ( yield literal('.')->orElse( just(false) ) ) {\n        $number .= '.'. yield takeOf('[0-9]');\n    }\n    return +$number;\n});\nКроме собственно функционального подхода можно обратить внимание на использование классов для создания DSL-подобного синтаксиса и на использование генераторов для упрощения синтаксиса комбинаторов.\nUPDATE само-собой парсинг JSON уже давно решенная задача и конечно готовая и протестированная функция на C будет работать лучше. Статья использует эту задачу как пример для объяснения функционального подхода. Так же не пропагандируется использование именно такого кода в продакшене, каждый может почерпнуть себе какие-то идеи, которые могут упростить код и жизнь.\nПолный код находится на github.",
        "link": "https://habr.com/ru/post/309962/"
    },
    {
        "title": "Как перестать бояться и полюбить синтаксический анализ?",
        "body": "Как часто, программируя очередную бизнес-фичу, вы ловили себя на мысли: есть же на Земле люди, которые пишут базы данных, распознают лица на фотографиях, делают фреймворки и реализуют интересные алгоритмы. Почему в моей работе всё сводится к перекладыванию из одной таблицы БД в другую, вызову http-сервисов, верстке html-формы и прочей «бизнес-лапше»? Может быть я занимаюсь чем-то не тем или работаю не в той компании?\n\n\nХорошая новость в том, что интересные задачи окружают нас повсюду. Сильное желание и смелость творят чудеса на пути к цели — задача любого масштаба станет вам под силу, стоит просто начать её делать.\n\nНедавно мы написали синтаксический анализатор языка запросов 1С и его транслятор в обычный SQL. Это позволило нам выполнять запросы к 1С без участия 1С :) Минимальная рабочая версия на regexp-ах получилась недели за две. Ещё месяц ушёл на полноценный парсер через грамматики, разгребание нюансов структуры БД разных 1С-объектов и реализацию специфических операторов и функций. В результате решение поддерживает практически все конструкции языка, исходный код выложен на GitHub.\n\nПод катом мы расскажем, зачем нам это понадобилось, как удалось, а так же затронем несколько интересных технических подробностей.\n",
        "link": "https://habr.com/ru/company/knopka/blog/314030/"
    },
    {
        "title": "Пишем свои монады на Scala на примере CSV-парсера",
        "body": "За последнее время мы очень многое узнали о монадах. Мы уже разобрались что это такое и даже знаем как их можно нарисовать, видели доклады, объясняющие их предназначение. Вот и я решил заскочить в уходящий монадный поезд и написать по этой теме, пока это окончательно не стало мейнстримом. Но я зайду с немного другой стороны: здесь не будет выкладок из теории категорий, не будет вставок на самом-лучшем-языке, и даже не будет scalaz/shapeless и библиотеки parser-combinators. Как известно, лучший способ разобраться как что-то устроено — сделать это самому. Сегодня мы с вами будем писать свою монаду.\n\nЗадача\nВозьмем для примера банальную задачу: парсинг CSV-файла. Допустим нам требуется распарсить строки файла в case classes, чтобы потом отправить их в базу, сериализовать в json/protobuf и так далее. Забудем про escaping и кавычки, для еще большей простоты, считаем что символ разделителя в полях встречаться не может. Думаю, если кто-то решит затащить это решение в свой проект, докрутить эту фичу будет не трудно.\n",
        "link": "https://habr.com/ru/post/326002/"
    },
    {
        "title": "Notepad++: проверка кода пять лет спустя",
        "body": "\nВ этом году статическому анализатору PVS-Studio исполнилось 10 лет. Правда, стоит уточнить, что 10 лет назад он назывался Viva64. И есть ещё одна интересная дата: прошло 5 лет с момента предыдущей проверки кода проекта Notepad++. С тех пор PVS-Studio был очень сильно доработан: добавлено около 190 новых диагностик, усовершенствованы старые. Впрочем, ожидать огромного количества ошибок в Notepad++ не стоит. Это небольшой проект, состоящий всего из 123 файлов с исходным кодом. Тем не менее, в коде найдены ошибки, которые будет полезно исправить.\n",
        "link": "https://habr.com/ru/company/pvs-studio/blog/330394/"
    },
    {
        "title": "Пентест-лаборатория «Pentestit Test lab v.11» — полное прохождение",
        "body": "\n\n30-го июня вновь запустилась пентест лаборатория компании Pentestit. Уже много лет эти лаборатории дают возможность проверить себя в роли пентестера в виртуальной компании со своими бизнес-процессами, серверами, сотрудниками и проблемами, узнать и опробовать современные уязвимости и отточить свои навыки в аудитах приложений и пентесте, максимально приближенном к реальному.\n\nЭта лаборатория уже 11-я по счету. Описания десятой, девятой, восьмой, седьмой и шестой лабораторий тоже доступны, и могут пригодиться в подготовке к участию, если вы этого еще не сделали.\n\nКак и в прошлый раз, спустя 11 суток лаборатория была пройдена первыми участниками, собравшими 12 токенов, которые подтверждают полное решение очередной задачи, будь то получение доступа в БД, проникновение и повышение привилегий на Linux-сервере или успешное выполнение MiTM-атаки на ноутбук директора виртуальной компании Test.Lab.\n\nЭта статья описывает все этапы прохождения пентест-лаборатории Test.Lab 11 для всех, кому интересно погрузиться в область пентеста или узнать, как решалась конкретная задача.",
        "link": "https://habr.com/ru/company/pentestit/blog/332902/"
    },
    {
        "title": "Развертывание кода ES2015+ в продакшн сегодня",
        "body": "Большинство веб-разработчиков, с которыми я общаюсь сейчас, любят писать JavaScript со всеми новейшими функциями языка — async/await, классами, стрелочными функциями и т.д. Однако, несмотря на то, что все современные браузеры могут исполнять код ES2015+ и изначально поддерживают упомянутый мной функционал, большинство разработчиков по-прежнему транспилируют свой код на ES5 и связывают его с полифиллами, чтобы удовлетворить небольшой процент пользователей, все еще работающих в старых браузерах.\n\nЭто отвратительно. В идеальном мире мы не будем развертывать ненужный код.\n",
        "link": "https://habr.com/ru/post/338612/"
    },
    {
        "title": "Танчики в консоли, статья вторая: «Настало время всё переделать!»",
        "body": "И всё же игра!\nВсем снова привет! Рада что вы читаете это, ведь наша история о споре подходит к финальной стадии.\n\nВ прошлой статье я сделала наброски кода и спустя несколько дней (благодаря советам более опытных программистов) готова вам показать полностью переписанный с нуля код с объяснениями. \n\nСкачать готовый код можно в конце статьи из моего рипозитория (если не можете дождаться).",
        "link": "https://habr.com/ru/post/344686/"
    },
    {
        "title": "Линейная регрессия с помощью Go",
        "body": "\nДолгое время меня интересовала тема машинного обучения. Меня удивляло, как машины могут обучаться и прогнозировать безо всякого программирования — поразительно! Я всегда был очарован этим, однако никогда не изучал тему подробно. Время — ресурс скудный, и каждый раз, когда я пытался почитать о машинном обучении, меня заваливало информацией. Освоение всего этого казалось трудным и требовало много времени. Также я убедил себя, что у меня нет необходимых математических знаний даже для того, чтобы начать вникать в машинное обучение.\nНо в конце концов я решил подойти к этому иначе. Мало-помалу я буду пытаться воссоздавать в коде разные концепции, начиная с основ и постепенно переходя к более сложным, стараясь охватить как можно больше базовых вещей. В качестве языка я выбрал Go, это один из моих любимых языков, к тому же я не знаком с традиционными для машинного обучения языками вроде R или Python.",
        "link": "https://habr.com/ru/company/vk/blog/345484/"
    },
    {
        "title": "Собственные данные в системном дампе падения Windows",
        "body": "По роду своей деятельности (Windows Kernel) мне регулярно приходится разбирать дампы BSOD'ов. Не единичны случаи, когда у конечного пользователя успешно пишутся только Mini-дампы, в которых сохраняется только значение регистров процессора и стек падения. А другого средства отладки клиентской машины просто нет. Но что делать, если в стеке нет нашего драйвера, а заказчик настаивает, что падения начались после установки продукта и закончились после отключения драйвера этого продукта? В моем случае хорошим решением оказалось ведение небольшого журнала последних событий в циклическом буфере. Осталось только сохранить этот циклический буфер в дампе.\nПод катом я расскажу, как из своего драйвера добавить в дамп данные. А затем извлечь их, используя pykd.\n",
        "link": "https://habr.com/ru/post/350406/"
    },
    {
        "title": "От простых скриптов к клиент-серверному приложению на WCF своими руками: почему мне нравится работа в CM",
        "body": "Работа в команде Configuration Management связана с обеспечением функциональности билд-процессов — сборки продуктов компании, предварительной проверки кода, статистического анализа, ведения документации и многого другого. Помимо этого, мы постоянно работаем над оптимизацией различных процессов, и, что замечательно, мы практически свободны в выборе инструментов для этой интересной работы. Далее я подробно расскажу о том, как, обладая лишь разного уровня знаниями в C# и C++, я сделал функциональный WCF-сервис для работы с очередями фиксов. И почему решил, что это очень важно.\n\n\n",
        "link": "https://habr.com/ru/company/veeam/blog/417701/"
    },
    {
        "title": "Как сделать поиск пользователей по Github используя VanillaJS",
        "body": "Здравствуйте. Меня зовут Александр и я Vanilla ES5.1 разработчик в 2018 году.\nДанная статья является ответом на статью-ответ «Как сделать поиск пользователей по GitHub без React + RxJS 6 + Recompose», которая показала нам, как можно использовать SvelteJS.\nПредлагаю посмотреть на один из вариантов, как это можно реализовать не используя никаких зависимостей, кроме браузера. Тем более, что сам GitHub заявил, что они разрабатывают фронтенд без фреймворков.\nДелать будем всё тот же инпут, отображающий плашку GitHub-пользователя:\n",
        "link": "https://habr.com/ru/post/419893/"
    },
    {
        "title": "Функции высших порядков в JS: курс молодого бойца",
        "body": "Данная статья рассчитана на человека, делающего свои первые робкие шаги на тернистой тропе изучения JavaScript. Несмотря на то, что на дворе 2018 год, я использую синтаксис ES5, дабы статья была понятной юным падаванам, проходящим курс «JavaScript, уровень 1» на HTML Academy.\n\nОдной из особенностей, отличающих JS от многих других языков программирования, является то, что в этом языке функция — «объект первого класса». Или, говоря по-русски, функция — это значение. Такое же, как число, строка или объект. Мы можем записать функцию в переменную, можем положить её в массив или в свойство объекта. Мы даже можем сложить две функции. На самом деле, ничего осмысленного из этого не получится, но как факт — мы можем!\n\nfunction hello(){};\nfunction world(){};\nconsole.log(hello + world);\n// кто знает, что получится, тому печеньку\n// кто не знает, пусть попробует в консоли\n\nСамое интересное, что мы можем создавать функции, оперирующие другими функциями — принимающие их в качестве аргументов или возвращающие их как значение. Такие функции называются функциями высшего порядка. И сегодня мы с вами, девочки и мальчики, поговорим о том, как бы эту возможность приспособить на нужды народного хозяйства. Попутно вы узнаете ещё про некоторые полезные особенности функций в JS.",
        "link": "https://habr.com/ru/post/421537/"
    },
    {
        "title": "Цена JavaScript в 2019 году",
        "body": "За последние несколько лет в том, что называют «ценой JavaScript», наблюдаются серьёзные положительные изменения благодаря повышению скорости парсинга и компиляции скриптов браузерами. Сейчас, в 2019 году, главными составляющими нагрузки на системы, создаваемой JavaScript, являются время загрузки скриптов и время их выполнения.\n\n\n\nВзаимодействие пользователя с сайтом может быть временно нарушено в том случае, если браузер занят выполнением JavaScript-кода. В результате можно сказать, что сильное позитивное воздействие на производительность сайтов может оказать оптимизация узких мест, связанных с загрузкой и выполнением скриптов.",
        "link": "https://habr.com/ru/company/ruvds/blog/459296/"
    },
    {
        "title": "Вкалывают роботы — счастлив человек",
        "body": "Позабыты хлопоты,\nОстановлен бег,\nВкалывают роботы,\nСчастлив человек!\nИз фильма \"Детство Терминатора\" \"Приключения Электроника\"\nПривет, сегодня мы снова поговорим о производительности. О производительности труда разработчиков.\nЯ расскажу о том, как средствами \"Идеи\" прокачать этот навык. Надеюсь, мои советы пригодятся вам, замечания и улучшения приветствуются. Поехали!",
        "link": "https://habr.com/ru/post/465433/"
    },
    {
        "title": "Монада «Maybe» через async/await в C# (без Task-oв!)",
        "body": "\nОбобщенные асинхронные типы возвращаемых значений — это новая возможность появившаяся в C# 7, которая позволяет использовать не только Task в качестве возвращаемого типа асинхронных (async/await) методов, но также и любые другие типы (классы или структуры), удовлетворяющие определенным требованиям.\nВ то же время async/await — это способ последовательно вызвать некий набор функций внутри некоторого контекста, что является сущностью шаблона проектирования Монада. Возникает вопрос, можем ли мы использовать async/await для написания кода, который будет вести себя так же, как если бы мы использовали монады? Оказывается, что да (с некоторыми оговорками). Например, приведенный ниже код компилируется и работает:\nasync Task Main()\n{\n  foreach (var s in new[] { \"1,2\", \"3,7,1\", null, \"1\" })\n  {\n      var res = await Sum(s).GetMaybeResult();\n      Console.WriteLine(res.IsNothing ? \"Nothing\" : res.GetValue().ToString());\n  }\n  // 3, 11, Nothing, Nothing\n}\n\nasync Maybe<int> Sum(string input)\n{\n    var args = await Split(input);//Нет проверки результата\n    var result = 0;\n    foreach (var arg in args)\n        result += await Parse(arg);//Нет проверки результата\n    return result;\n}\n\nMaybe<string[]> Split(string str)\n{\n  var parts = str?.Split(',').Where(s=>!string.IsNullOrWhiteSpace(s)).ToArray();\n  return parts == null || parts.Length < 2 ? Maybe<string[]>.Nothing() : parts;\n}\n\nMaybe<int> Parse(string str)\n    => int.TryParse(str, out var result) ? result : Maybe<int>.Nothing();\nДалее я объясняю, как работает этот код ...",
        "link": "https://habr.com/ru/post/468017/"
    },
    {
        "title": "Распознаём дату и время в естественной речи",
        "body": "\nЗадача\nПривет, Хабр! Увлёкся я навыками для Алисы и стал думать, какую пользу они бы могли принести. На площадке много разных прикольных игр (в том числе мои), но вот захотелось сделать рабочий инструмент, который действительно нужен в голосовом исполнении, а не просто копирует существующего чат-бота с кнопками. \nГолос актуален тогда, когда либо руки заняты, либо нужно выполнять много последовательных операций, особенно на экране телефона. Так возникла идея навыка, который по одной команде выделяет из текста указание на дату и время и добавляет событие с этим текстом в Google Calendar. Например, если пользователь скажет Послезавтра в 11 вечера будет красивый закат, то в календарь на послезавтра в 23:00 уходит строка Будет красивый закат.\nПод катом описание алгоритма работы библиотеки Hors: распознавателя даты и времени в естественной русской речи. Хорс — это славянский бог солнца.\nGithub | NuGet",
        "link": "https://habr.com/ru/post/471204/"
    },
    {
        "title": "Удалённое включение скриптов Mikrotik из Telegram v 2.0",
        "body": "Всех с прошедшим праздником. Данная тема является более лучшей версией того, что я писал в далеком 2016 тут.\n\nВ целом принцип работы не изменился, с той лишь разницей, что теперь он отрабатывает мгновенно без задержек.\n\nЗакидываем скрипт в Mikrotik, меняем BotID и ChatID на свои и создаем на него schedule. Ставим параметр «Start Time» на startup (Запуск скрипта при старте.)\n«Interval»: 00:00:00\nВ остальном все как и было. ",
        "link": "https://habr.com/ru/post/482802/"
    },
    {
        "title": "Применение принципов функционального программирования при проектировании ERP",
        "body": "Привет, Хабр!\n\nВ этой статье мы попробуем взглянуть на архитектуру учетных систем (ERP, CRM, WMS, MES, B2B, ...) с позиций функционального программирования. Существующие системы сложны. Они базируются на реляционной схеме данных, и имеют огромный мутабельный стейт в виде сотен связаных таблиц. При этом единственным «источником правды» в таких системах является хронологически-упорядоченный журнал первичных документов (отпечатков событий реального мира), которые, очевидно, должны быть иммутабельными (и это правило соблюдается в аудируемых системах, где корректировки «задним числом» запрещены). Журнал документов составляет от силы 20% объема БД, а все остальное — промежуточные абстракции и агрегаты, с которыми удобно работать на языке SQL, но которые требуют постоянной синхронизации с документами, и между собой. \n\nЕсли вернуться к истокам (устранить избыточность данных и отказаться от хранения агрегатов), а все бизнес-алгоритмы реализовать в виде функций, применяемых непосредственно к потоку первичных документов — мы получим функциональную СУБД, и построенную на ней функциональную ERP. Проблема производительности решается благодаря мемоизации, а объем функционального кода будет вполне соизмерим с объемом декларативного SQL, и не сложнее для понимания. В данной статье мы продемонстрируем подход, разработав простейшую файловую СУБД на языке TypeScript и рантайме Deno (аналог Node.js), а также протестируем производительность сверток на примере типичных бизнес-задач. \n\nПочему это актуально\n1) Мутабельный стейт + избыточность данных — это плохо, особенно когда необходимо обеспечивать его постоянную синхронизацию с потоком документов. Это источник потенциальных расхождений учетных данных (баланс не сходится) и трудно обнаруживаемых побочных эффектов.",
        "link": "https://habr.com/ru/post/482938/"
    },
    {
        "title": "Автоматизация HotFix в Maven проектах с использованием TeamCity",
        "body": "Я из компании Luxoft.\nВ этом посте будет описана настройка автоматизации HotFix в Maven проектах с использованием Teamcity.\nЧтобы сделать HotFix обычно делается много ручных действий:\n\nСоздать бранч для релиза, на который вы хотите выкатывать HotFix\nИсправить ошибку в релизе\nИзмененить bugfix версию в релизном бранче\nВыкатить тег bugfix версии\n\nПункты 1,3,4 можно автоматизировать.",
        "link": "https://habr.com/ru/post/483242/"
    },
    {
        "title": "Гендерные праздники в IT. Как отметить",
        "body": "В самый разгар гендерных праздников хочется помочь тем, кто делает мероприятия в офисе. Отношение к 23 февраля и 8 марта с каждым годом все неоднозначнее. Но мы пока не готовы отказаться от еще одного повода повеселиться всем вместе. \n\nЗнаем, что часто HR делегируют работу по выбору развлечений и подарков на тех, кто совсем не готов к этому. Поэтому, если вы разработчик\\архитектор\\тестировщик\\ (нужное подчеркнуть) … или отчаявшийся HR без идей поздравления – этот материал для вас. \n\nВ статье кейсы, которые зашли нашим сотрудникам. Возможно, и вам удастся стать королем вечеринки, если дочитаете до конца.\n\n",
        "link": "https://habr.com/ru/company/directum/blog/490722/"
    },
    {
        "title": "Реализуем преобразования кода на Python",
        "body": "Привет, Хабр.\n\nСегодня мы предлагаем вам перевод статьи, затрагивающей не самую обсуждаемую тему: компиляцию кода в Python, а именно: работу с абстрактным синтаксическим деревом (AST) и байт-кодом. Притом, что Python является интерпретируемым языком, такие возможности в нем чрезвычайно важны с точки зрения оптимизации. О них мы сегодня и поговорим.",
        "link": "https://habr.com/ru/company/piter/blog/493424/"
    },
    {
        "title": "Генерация вспомогательных файлов: реэкспорт, экспортный объект, валидаторы из моделей — можно ли подружить с Webpack?",
        "body": "При разработке SPA довольно много времени уходит на работу с импортом и экспортом различных файлов, а также на создание валидационных схем. Эти задачи достаточно просто автоматизируются, но, как это обычно бывает, \"есть нюансы\" — попробуем разобраться.\nЗа основу проекта возьму код из этой статьи, так как оформляю несколько текстов в виде более-менее связанного цикла.",
        "link": "https://habr.com/ru/post/507294/"
    },
    {
        "title": "Термостат на ThingJS (beta)",
        "body": "\nПочти год назад я представил свой pet-проект — IoT платформу ThingJS. Честно сказать, я не достиг всех целей, которые ставил перед собой публикуя ту статью. Но работа окупилась. Удалось получить нечто иное — полезную критику.\nЯ учел прошлый опыт. Теория без практики заходит плохо. В этот раз презентация будет построена на базе прикладного решения. Каждый сможет “потрогать” его и использовать в быту.",
        "link": "https://habr.com/ru/post/521174/"
    },
    {
        "title": "html2json",
        "body": "Как обычно мы храним в базе данных что-то, что нужно показать пользователю и обладает некоторыми свойствами разметки? Кто хотя бы раз делал свой блог, хабр или похожее сразу скажет — html. А что, если я скажу, что можно сделать иначе? JSON.\nЯ бы хотел рассмотреть преимущества и недостатки подобного хранения, ну или попытаться, по крайней мере.\n",
        "link": "https://habr.com/ru/post/527588/"
    },
    {
        "title": "Telegram-бот как фитнес-менеджер во время пандемии",
        "body": "\n\nС приходом коронавируса мир сошел с ума и появилась куча ограничений, которые полностью поменяли нашу жизнь. Меня зовут Эмиль Фролов, я руковожу разработкой команды внутренних сервисов в ДомКлике и сегодня я поделюсь с читателями историей про создание бота, который помог нам справиться с некоторыми тяготами ковид-ограничений. \n\nНаша компания — одна из тех, которые стараются сделать жизнь своих сотрудников максимально комфортной. В офисе есть практически всё: столовые, кофейни, куча мест для отдыха и спортзал со свободным посещением. Вот о нем мы сегодня и поговорим. В период пандемии одним из ограничений было определенное количество людей, единовременно присутствующих в спортзале. Было создано приложение, в котором можно записаться на определенное время, если есть места. \n\nСначала всё было хорошо и мест всем хватало, но по мере выхода людей в офис мест больше не становилось, и запись в зал превратилась в попытки поймать момент, когда освободится местечко. Как говорится, лень — двигатель прогресса: почти сразу как, начались трудности с запись, пришла в голову идея создать бота, который будет это делать за меня.",
        "link": "https://habr.com/ru/company/domclick/blog/529440/"
    },
    {
        "title": "Букварь по F# для любопытствующих C#-разработчиков",
        "body": "Предисловие\nМой переход на F# в качестве излюбленного языка был слегка усеян препятствиями. Примерно через десять лет почти постоянного использования C# у меня пробудилось любопытство, когда я услышал об этом другом #-языке. Моя первая реакция была той, которую с тех пор видел у других C#-разработчиков — отрицание, — C# является хорошим языком, и мне с ним комфортно, так зачем тратить силы на изучение другого? Но любопытство осталось — и, по крайней мере, несколько раз выделил вечер, чтобы прочитать базовый вводный пост и попытаться написать каких-нибудь ката на F#. Это не прижилось, потому что я просто чувствовал себя потерянным и не мог воплотить свой опыт использования C# в ощущение даже отдаленного комфорта с F#. Достаточно легко опустить фигурные скобки, немного замяться, чтобы не забыть let вместо var — но как сделать то, что я хотел?\nТогда я этого не осознавал, но, на мой взгляд, наблюдал потенциальный недостаток в том, как F#-разработчики говорят, описывают и представляют свой язык внешнему миру. Существует обширная база материалов обо всех возможностях и функциональности F#: Algebraic Data Types, Exhaustive Matching, Type Inference и т.д. Есть много статей, посвященных тому, как решать широкий спектр задач с помощью F#. Но, как мне кажется, не хватает чего-то вроде следующего: некоторых указаний о том, как взять то, что вам уже удобно в C#, и перевести их на F#. Так что мне интересно, можем ли мы как-то закрыть этот недостаток.",
        "link": "https://habr.com/ru/post/541216/"
    },
    {
        "title": "История разработки SDK для приема платежей в мобильном приложении на Flutter",
        "body": "Привет, Хабр!На связи разработчики из Mad Brains. Мы специализируемся на разработке сервисов для мобильных устройств. Имеем опыт в реализации интеграционных решений, собственные продукты в сфере мобильной электронной коммерции, а также входим в 20-ку лучших мобильных разработчиков России и СНГ. Среди наших клиентов Магнит, DNS, Яндекс, Home Credit Bank, QIWI, Pfizer, OneTwoTrip! и другие крупные бренды.Сегодня мы хотим рассказать, как разработали SDK с открытым исходным кодом для оплаты в мобильном приложении на Flutter на основе Tinkoff Acquiring SDK для нативных приложений. Разрабатывая новое приложение на Flutter, перед нами встала задача —  реализовать возможность оплаты услуг банковской картой через российский банк. Готовых открытых решений на рынке не оказалось, однако к тому времени мы достаточно хорошо освоили SDK, поэтому приняли решение написать собственное. За основу мы взяли нативную библиотеку Тинькофф Банка и реализовали решение на языке Dart. Настало время рассмотреть все предметно. ",
        "link": "https://habr.com/ru/company/tinkoff/blog/544080/"
    },
    {
        "title": "Самодельный стратостат",
        "body": "\nДопустим, вы интересуетесь космосом, но космос для вас недоступен. Выше 10км не подняться, а посмотреть \"что там?\" очень хочется. По классификации NASA — нижняя граница космоса начинается на 100км от поверхности Земли. Эта статья будет не совсем про космос, но про возможность создания своего стратосферного зонда с нуля. Я много видел примеров успешного запуска и несколько статей на Хабре, но почти все они — это отчеты. Я же хочу оставить статью, которая сможет претендовать на \"complete guide\" для юных покорителей. Запаситесь терпением и безлимитным интернетом — будет много текста, картинок и даже пару видео. Это был долгий путь для нас, но я намерен сделать его не таким изнурительным для всех желающих. Поехали?",
        "link": "https://habr.com/ru/post/555070/"
    },
    {
        "title": "Property-based тестирование с QuickCheck",
        "body": "Автор статьи: klntsky \n\nЧто такое Property-Based Testing?\nProperty-based testing (PBT) — подход к тестированию ПО, подразумевающий автоматическую проверку свойств функций (предикатов), специфицируемых программистом-тестировщиком. Для проверки, т.е. поиска контрпримеров, используются автоматически сгенерированные входные данные. PBT позвляет разработчикам значительно увеличить тестовое покрытие и эффективно расходовать своё время, не придумывая входные данные для тестов самостоятельно. В общем случае данные, генерируемые во время property-based тестирования, ничем не ограничены, поэтому проверка может быть произведена на тех значениях, про которые разработчик мог забыть или для которых не счёл нужным написать юнит-тесты (действительно, не перебирать же все значения входных параметров вручную). \nPBT-подход был популяризован библиотекой QuickCheck, написанной на Haskell, и в этой статье будет показано, как пользоваться этим инструментом эффективно.",
        "link": "https://habr.com/ru/company/typeable/blog/570922/"
    },
    {
        "title": "Зачем С++ в Такси? Доклад Яндекса",
        "body": "Бэкенд первой версии Яндекс.Такси, которая вышла в 2011 году, был написан на Python. Мы довольно долго не меняли основной язык, но постепенно пришли к идее о необходимости С++ в стеке технологий. Перед вами доклад о том, что мы переписали в первую очередь и почему, а также о трюках С++, которые помогают нам справляться с ростом.\n\n— Добрый день. Меня зовут Александр Голубев, и сегодня я вам расскажу, зачем C++ появился в Такси.",
        "link": "https://habr.com/ru/company/yandex/blog/571408/"
    },
    {
        "title": "Почему не все тестовые задания одинаково полезны: разбор одного фееричного провала",
        "body": "\nВсем привет, это PsyHaSTe и сегодня я хотел бы рассказать о том, куда меня занесла нелегкая в процессе оптимизации и рефакторинга кода решения тестового задания из статьи товарища novar (кто пропустил — рекомендую ознакомиться). Какие проблемы были у этого решения? Почему все-таки человеку отказали в работе? Что можно с этим сделать? Ответы на эти и многие другие вопросы оказались слишком длинными для комментария и вылились в статью с подробным разбором, примерами и альтернативной реализацией задания.\nЕсли вам интересно кто в здравом уме мог для выполнения поставленной задачи написать код сочетающий монады с goto, а также одновременно сократил объем кода и увеличил его производительность, то добро пожаловать под кат. И, конечно же, самое вкусное, связанное с оптимизациями на базе работы JIT — в конце. Итоговую версию решения тестового можно посмотреть на гитхабе по ссылке.",
        "link": "https://habr.com/ru/post/572052/"
    },
    {
        "title": "Готовим Helm с GitLab, KinD и Chart-Testing",
        "body": "В этой статье мы рассмотрим, как более-менее прилично организовать процесс тестирования и публикации чартов, встреченные при этом подводные камни, а также рассмотрим пару великолепных инструментов, которые совершенно незаслуженно получили крайне мало внимания не только на Хабре, но и вообще в русскоязычном сегменте интернета.Очень кстати, в недавно вышедшем релизе Gitlab 14.1, появился долгожданный функционал хранения Helm-чартов во встроенном Package Registry. Отлично, заодно и разберемся, как его использовать.",
        "link": "https://habr.com/ru/post/574496/"
    },
    {
        "title": "Создаём одинаковое приложение 5 раз",
        "body": "\nНа написание этой статьи меня вдохновил YouTube-канал Fireship, записывающий отличные видео о веб-разработке, крайне рекомендую их посмотреть, если вам интересна эта тема.\n\nВот видео с канала, в котором в 10 фреймворках создают todo-приложение:\n\n\nЯ решил, что не хочу тратить на это кучу времени, и в основном использовал статью как оправдание для изучения нескольких новых фреймворков, поэтому пять раз собрал одно и то же приложение. Я планирую создать простое приложение для добавления заметок, в котором пользователи могут писать текст и сохранять его как отдельные заметки. Некоторые из этих фреймворков я уже использовал для создания подобных приложений, а в других не делал ничего похожего, или даже не использовал их вообще, поэтому это будет чуть сложнее.",
        "link": "https://habr.com/ru/company/itsoft/blog/575416/"
    },
    {
        "title": "Обеспечиваем безопасность стеков Docker Compose с помощью CrowdSec",
        "body": "В этой статье рассказывается, как объединить CrowdSec и Docker Compose для защиты приложений, заключенных в контейнеры. Это позволит нам:• автоматически закрывать скомпрометированным IP-адресам доступ к нашим контейнерным сервисам;• вручную добавлять/удалять и проверять решения о запрете;• отслеживать поведение CrowdSec (с помощью cli и дашбордов).",
        "link": "https://habr.com/ru/company/crowdsec/blog/581876/"
    },
    {
        "title": "How the Carla car simulator helped us level up the static analysis of Unreal Engine 4 projects",
        "body": "One of the mechanisms of static analysis is method annotations of popular libraries. Annotations provide more information about functions during errors detecting. CARLA is an impressive open-source project in C++ that helped us implement this mechanism to our analyzer. Subsequently, the simulator became a test-target for the improved PVS-Studio static analyzer.\n",
        "link": "https://habr.com/ru/company/pvs-studio/blog/590295/"
    },
    {
        "title": "Атака не клонов, или Генерация и анализ тестовых данных для нагрузки. Часть 3",
        "body": "Итак, мы разобрались с генерацией данных и мне осталось рассказать об инструменте для получения  детальной статистики по базе данных, которую 85% разработчиков считает самым узким местом в системе. И о том, как с помощью анализа статистики ускорить эту самую систему, но не попасть в ловушку.",
        "link": "https://habr.com/ru/company/oleg-bunin/blog/590691/"
    },
    {
        "title": "Создание многопоточного сервера на C#",
        "body": "Данная статья предназначена для таких же новичков как и я. Вся информация в этой статье основывается на моем опыте создания одного единственного веб-сервера, который был создан в рамкам учебного проекта на 3 курсе по специальности 09.02.07 СПО.",
        "link": "https://habr.com/ru/post/596527/"
    },
    {
        "title": "Функции в скриптах Роутер ОС Микротик. Интересные решения и недокументированные возможности",
        "body": "Роутер ОС Микротик, как известно, имеет мощнейший LUA-подобный встроенный скриптовый язык, позволяющий осуществлять исполнение сценариев, в том числе при наступлении каких-либо событий в сети или по расписанию. Скрипты могут состоять из одной строки кода или иметь внушительные размеры, при передаче управления друг другу формируя сложные программы. Встроенный скриптовый язык существенно расширяет возможности системы, практически не ограничивая полет фантазии программиста. Существующее официальное руководство по скриптам написано кратко и, разумеется, не может охватить все особенности программирования для Роутер ОС.\n \nВ этой статье, не претендующей на полное руководство к разделу, мы рассмотрим одну из интересных и важных рубрик «скриптинга», а именно — функции. \n\nПеред прочтением статьи, пользователям, начинающим изучать скрипты, рекомендую ознакомиться с официальным руководством Микротик по скриптам по ссылке выше, либо с его переводом (например, здесь). Следует знать типы переменных в скриптах Микротик, иметь понятие об областях видимости, окружении переменных и т.д… Также будет весьма полезна статья habr.com/ru/post/270719, в которой автор подробно разбирает типы переменных LUA Микротик и варианты их объявления и использования.",
        "link": "https://habr.com/ru/post/646663/"
    },
    {
        "title": "Чат-бот под несколько месенджеров",
        "body": "Привет, я Паша, руковожу эксплуатацией инфраструктуры крупного хайлоад-проекта. Хочу поделиться опытом разработки бота на Golang для различных мессенджеров.Всё началось с того, что у нас был бот на python-telegram-bot, делал он простые вещи, умел послать случайную весёлую гифку из Интернета, кошечку, собачку, затем мы крикрутили к нему наш таск-трекер и бот стал создавать тикеты прямо из чата.Спустя время, руководство приняло решение о разработке собственного мессенджера для общения сотрудников компании и встал вопрос о поддержке нашего бота в новом мессенджере. У нас уже была разработана отдельная модельная часть, которую оставалось лишь прикрутить к новому источнику сообщений, но в этот момент мы уже одной ногой торчали в Golang и мы решили, что у нас есть отличный шанс максимально развить свои навыки разработки, мы видели в Golang большие перспективы для развития нашей инфраструктуры.",
        "link": "https://habr.com/ru/post/649413/"
    },
    {
        "title": "Creating a Weather Predictions App Using Flutter",
        "body": "This article describes how to develop a real-time weather prediction app in Flutter using the Tomorrow.io Weather API. The app consists of a single screen that displays the current weather and a 4-day daily forecast for a specific location. We’re creating this prediction app on Flutter because it is an open-source UI development kit, which means it can be integrated beautifully into desktop and mobile apps across various platforms, making it scalable. ",
        "link": "https://habr.com/ru/post/656033/"
    },
    {
        "title": "Выбор кадастрового инженера с помощью Data Science",
        "body": "Закончивался 1 квартал 2020 года, ажиотаж вокруг пандемии ковид в РФ был на своем пике. Симптоматика первых переболевших показывала, что даже в случае относительно легко перенесенной болезни вопрос реабилитации и восстановления работоспособности (в том числе и психологическо-когнитивной) - встает на первое место. И мы наконец-то решили \"Хватит сидеть, пора делать свое дело. Если не сейчас, то когда?!\". В условиях повсеместной удаленки нашли иностранного профильного партнера-инвестора и разработали адаптированный к РФ концепт клиники/пансионата по реабилитации пациентов после перенесенного COVID-19.Ключевым риском для инвесторов была возможная скорость реализации проекта (после пандемии предполагалась реконцепция клиники в многопрофильный реабилитационный центр - а это существенно большие инвестиции и сроки окупаемости) - поэтому было важно стартовать как можно быстрее. Команда проекта была преисполнена энтузиазма, готова соинвестировать и мы договорились с инвесторами, что основной транш инвестиций пойдет не на стройку, а на расширение и оборудование приобретенных командой площадей.Мы достаточно быстро нашли несколько подходящих объектов в Московской области, но самым интересным показался объект, реализуемый Агентством по Страхованию Вкладов в рамках банкротство одного из банков РФ. Взвесив все \"за\" и \"против\", мы приняли решение об участии в публичных торгах и выкупили объект. Окрыленные победой на торгах, мы быстро заключили ДКП, произвели оплату и подали документы в Росреестр на регистрацию сделки. Не ожидая никаких подвохов с регистрацией (все-таки продавец - АСВ, торги - публичные, имущество - банковское) мы сразу же начали переговоры с подрядчиками по реновации и строительству. Как же мы ошибались...",
        "link": "https://habr.com/ru/post/670760/"
    },
    {
        "title": "Simulating Return Type Inference in C#",
        "body": "Мне по-настоящему нравится больше чего-либо в разработке ПО делать фреймворки, позволяющие другим разработчикам создавать что-то крутое. Иногда, в погоне за идеальным кодом, мне на ум приходят странные идеи, при реализации которых C# может дойти до предела своих возможностей.Не так давно произошёл подобный случай, когда мы вместе с коллегой искали способ избежать передачи большого количества типовых параметров в тех местах, где компилятор должен был по идее их вывести. Однако, C# так устроен, что способен выводить типы в обобщённых вызовах только из передаваемых параметров метода.В этой статье покажу небольшой трюк, который позволит симулировать вывод типов для возвращаемых значений, и немного примеров, где это может быть полезно.",
        "link": "https://habr.com/ru/post/673448/"
    },
    {
        "title": "Язык описания квестов или как сделать квестовую систему на Unity",
        "body": "Привет, habr! Это моя первая статья, поэтому будет хорошим тоном представиться. Я независимый разработчик мобильных игр. Два года работаю на Unity и прогаю на C#. Выпустил одну инди-игрушку, которая хоть и не выстрелила, и не принесла денег, получила неплохие отзывы.Эта статья про один из возможных способов создания расширяемой системы квестов, которая может пригодится во множестве игр.",
        "link": "https://habr.com/ru/post/676010/"
    },
    {
        "title": "Парсинг дат в JS — добавляем русский язык в библиотеку Chrono",
        "body": "Crono это парсер дат на естественном языке. Кроме формальных ISO 8601 или dd.MM.yyyy, распознает варианты а-ля «в среду утром‎», «с 10 до 11 вечера», «2 часа 5 минут назад» и т.п. Поддерживает 8 языков, в том числе, теперь, и русский.",
        "link": "https://habr.com/ru/post/676026/"
    },
    {
        "title": "Создаём парсер для ini-файлов на Haskell",
        "body": "В данной статье я расскажу как написать свой парсер ini-файлов на Haskell. За основу возьму контекстно-свободную грамматику, построенную в моей предыдущей статье. Для построения парсера будет использоваться библиотека Parsec, которая позволяет строить свои собственные парсеры комбинируя готовые примитивные парсеры при помощи парсерных комбинаторов.\n\nВажно: в данной статье предполагается, что читатель знаком с основами Haskell. Если это не так, то я советую сначала прочитать пару статей для новичков (их можно найти в том числе и на Хабре). \n",
        "link": "https://habr.com/ru/post/50337/"
    },
    {
        "title": "Создаём парсер для ini-файлов на C++",
        "body": "В данной статье я расскажу как написать свой парсер ini-файлов на C++. За основу возьмём контекстно-свободную грамматику, построенную в моей предыдущей статье. Для построения парсера будет использоваться библиотека Boost Spirit, которая позволяет строить свои собственные парсеры комбинируя готовые примитивные парсеры при помощи парсерных комбинаторов.\n\nВажно: в данной статье предполагается, что читатель знаком с основами C++ (в том числе будет активно использоваться STL). Если вы не очень в себе уверены, то я советую сначала прочитать пару статей для новичков по С++ и по STL.",
        "link": "https://habr.com/ru/post/50976/"
    },
    {
        "title": "Сравнение производительности браузеров при обработке JSON-строк",
        "body": "Мы парсим JSON-строку в JSON-объект, когда обрабатываем AJAX-ответы сервера. Обычно, для парсинга JSON-строки мы используем eval или new Function, однако IE8 и Firefox3.1 имеют встроенную поддержку JSON (встроенный парсинг работает значительно быстрее). Как определить на практике выбор между этими тремя методами? И как узнать чья производительность быстрее среди такого большого количества браузеров?\n",
        "link": "https://habr.com/ru/post/55553/"
    },
    {
        "title": "eXpress Persistent Objects и тестирование",
        "body": "Всем доброго времени суток!\nХотел бы рассказать о тех возможностях тестирования, которые появляются при использовании ORM от DevExpress™ — eXpress Persistent Objects™ (XPO) для разработчиков на .NET.\n\nВо первых — абстрагирование от конкретной СУБД.\nВо вторых — отсутствие необходимости вообще в какой-нибудь СУБД на начальном этапе разработки и при тестировании.\n",
        "link": "https://habr.com/ru/post/74009/"
    },
    {
        "title": "ICQ бот на Python",
        "body": "Привет %habrauser%! Это мой первый хабротопик. В котором я расскажу как можно сделать ICQ бот на pythone. Бот у нас будет сидеть в сети и отправлять, по запросу пользователя, список последних статей хабра.\nДля реализации бота мы будем использовать библиотеку Twisted. Конечно же есть уже специализированные библиотеки для работы с ICQ на python. Такие как py-icq или nanoicq. Но так как с Twisted я был уже знаком, то выбор пал именно на него.\n",
        "link": "https://habr.com/ru/post/111263/"
    },
    {
        "title": "Опыт первого приложения для Windows Phone 7 Series с использованием Silverlight",
        "body": "Приветствую вас, Хабрасообщество.\nВ данном топике я расскажу как написать свое первое приложение на Windows Phone 7 на примере своего приложения.\n",
        "link": "https://habr.com/ru/post/111354/"
    },
    {
        "title": "ЖЖ в БД (скрипт на Groovy)",
        "body": "В продолжении темы маленьких скриптов на groovy — еще один.\nПредыдущие: Большие письма в Gmail, Упражнение на сложение (LATEX)\n\nНовый скрипт показывает основы работы с XML и базой данных в Groovy. В качестве задачи выберем сохранение нашей уютной ЖЖшки из XML в базу данных.\nЗачем это делать? — SQL нам расскажет всё о нашем (или чужом) ЖЖ — темы, комменты, таги — насколько фантазии хватит собирать статистику\n\nСначало нам надо скачать ЖЖ в XML.\nЭто сделает чужая утилита — ljdump\nПридется установить Питон, открыть IDLE (Python GUI), загрузить туда утилиту и запустить. Всё спросит она сама.\n\nПосле её пробега у вас будет директория с файлами LXXX — посты и CXXX — комменты.\n\nА на эти XMLи мы и запустим мой скрипт.\nВ этом виде он использует pure Java, embedded базу данных Hypersonic (HSQLDB), но можно подключиться к любой, конечно же. Только убедитесь, что JDBC driver у вас в classpath.\n\nПарсинг и работа с БД такого типа годятся только для скриптов и небольших программ. В энтерпрайзе никто не будет загружать весь XML в память (а будут использовать SAX), и никто не будет напрямую слать SQL (а будет Connection Pool, prepared statement, batch, Hibernate какой нибудь).\n\n",
        "link": "https://habr.com/ru/post/113941/"
    },
    {
        "title": "Пишем клиент для Хабра под Android",
        "body": "Забегая вперед, вот что получилось:\n\n\n",
        "link": "https://habr.com/ru/post/117885/"
    },
    {
        "title": "10 «однострочников», которые произведут впечатление на ваших друзей",
        "body": "За последнюю неделю появилось несколько топиков с названием «10 однострочников на <MY_LANGUAGE>, которые произведут впечатление на ваших друзей», которые содержат однострочное решение нескольких простых задач, демонстрирующее достоинства и «крутость» любимого языка программирования автора. Я решил перевести их и для сравнения собрать в одном топике. Вся волна началась (вроде как) со Scala. \nИтак, поехали!",
        "link": "https://habr.com/ru/post/120665/"
    },
    {
        "title": "Экспорт графика в Microsoft Excel",
        "body": "Доброго времени суток, уважаемые Хабровчане.\n\nЯ — начинающий разработчик SharePoint, и сегодня хотелось бы рассказать о решении одной интересной задачи. Нужно было сделать веб-часть для SharePoint, которая должна обрабатывать таблицу с данными, выводить график на экран, а так же уметь экспортировать таблицу и график в Microsoft Excel. Под катом мой способ решения, отрывки кода веб-части и ссылка на проект.\n",
        "link": "https://habr.com/ru/post/124079/"
    },
    {
        "title": "Некоторые возможности использования Intent'ов",
        "body": "\nВведение\nОбъекты типа Intent могут быть использованы для общения между отдельными частями Android приложения, либо между различными приложениями системы. Мощь механизма интентов заключается в том, что с его помощью можно обращаться к любому установленному в системе приложению. Это позволяет повторно использовать некоторые компоненты и значительно сократить время на разработку.\n\nВ этой статье я покажу некоторые возможности использования класса Intent для обращения к системным приложениям.\n",
        "link": "https://habr.com/ru/post/131041/"
    },
    {
        "title": "Универсальный NMEA 0183 Parser/Formatter на C# (+ порт на JAVA)",
        "body": "Префикс\nКак бы банально это не звучало, но поискав готовое решение, которое могло бы (по моему разумению) полностью поддерживать работу с NMEA  — сообщениями, я его не обнаружил. \n\nПроштудировав официальный документ, я всецело пропитался идеей непременно это реализовать и недолго думая сам взял себя на понт. \n\nФабула\nДа простят меня люди сведущие, но для прочей ясности я все же кратко опишу физику явления.\nИтак, сообщение стандарта NMEA, в самом стандарте называются «sentence», тот, кто эти «предложения» «говорит» — «Talker». Так например, GPS-применик в рамках NMEA имеет идентификатор «GP», а наш ответ чемберлену — «GL». \n\nСуществующие решения работали либо только с этими двумя типами устройств, а в лучшем случае понимали различные специфические для конкретных производителей (Germin, UBLox, и пр.) приемников команды. \nДа и кто знает, вдруг срочно нужно будет интерпритировать данные поступающие с атомных часов (Talker: ZA), или спозиционироваться по системе Loran-C (Talker: LC), ну а возможность поболтать с автопилотом (Talker: AG) вообще нельзя исключать!\n\n",
        "link": "https://habr.com/ru/post/132493/"
    },
    {
        "title": "Пишем Anime Wallpaper Downloader на MacRuby",
        "body": "Просматривая theotaku.com в поисках интересных обоев для рабочего стола я поймал себя на мысли о том, что неплохо бы написать софт который по тэгам сам автоматически скачивал бы обои вместо меня. Исходя из того что я пользуюcь Мac OS X как основной операционной системой, софт тоже должен быть для этой платформы и желательно иметь Cocoa интерфейс. Писать всё это на Java почему-то не захотелось. Альтернатив конечно было много, но почему-то захотелось попробовать чего-то другого и заодно научится чем-то новому. Сразу же вспомнил о MacRuby и его тесной интеграции с Cocoa. Вооружившись этой идеей, я сразу же полез на http://www.macruby.org/ и скачал последнюю стабильную версию 0.10. После установки я запустил любимый XCode и создал новый проект с названием AnimeWallpaperDownloader\n",
        "link": "https://habr.com/ru/post/133739/"
    },
    {
        "title": "Маленькие чудеса C#/.NET – структура DateTimeOffset",
        "body": "Рассмотрим некоторые части .Net Framework'a, выглядящие тривиальными, но вполне способными сделать ваш код более простым как в написании, так и в сопровождении. \n\n\nПишущие на .NET (а если вы этого не делаете, то зря читаете этот пост) наверняка время от времени используют для своих нужд структуру DateTime. Эта структура удобна для хранения дат, времени или даты/времени, относящихся к локальной временной зоне (или же к UTC).\n\n\nОднако, бывают случаи, когда вам необходимо сохранить время в виде смещения, а не конвертировать его в локальное время. И вот здесь вам на помощь придёт структура, впервые появившаяся в .NET 3.5 — DateTimeOffset.",
        "link": "https://habr.com/ru/post/139803/"
    },
    {
        "title": "Node.js на узле Фидонета: читаем джаваскриптом заголовки эхопочты, хранимой в формате JAM",
        "body": "Сегодня у меня две причины пробежаться по клавишам.\n\nВо-первых, после того, как на прошлой неделе я перевёл документацию по jParser (после ознакомления с RReverserовским примером применения jParser при анализе BMP-файлов), мне представляется уместным перейти к напрашивающемуся последующему шагу: развить тему, поделиться с читателями моим собственным примером применения jParser для анализа несколько более сложной структуры данных. (Отчасти это станет ответом на вопрос, который alekciy задал, интересуясь дальнейшими примерами практического использования jParser.)\n\nВо-вторых, ≈полгода назад (26 ноября 2011 года) ertaquo поинтересовался, зачем мне хочется использовать Node.js в Фидонете. Тогда я сообщил, что мне просто нравится название (помню те времена, когда термин «node» или «нóда», если употреблялся без уточнения, в российском околокомпьютерном мире по умолчанию означал узел Фидонета), но не мог привести никакого наглядного примера работающего кода, а сейчас приведу.\n\nИтак, пример будет двойным. Предлагаю вашему вниманию анализ заголовков писем фидонетовской эхопочты, хранимой в формате JAM. Этот формат популярен в Фидонете со времён далёких и незапамятных (в Википедии говорится, что появление JAM относится к 1993 году). Сразу скажу, что давно предпочитаю JAM другому популярному формату (Squish), потому что этот последний хранит в заголовке у письма идентификаторы не более чем девяти откликов на него, тогда как JAM вместо массива ограниченной длины использует более гибкую структуру данных (связный список), так что позволяет выстроить полное дерево ответов даже в самых оживлённых и разветвлённых обсуждениях.\n\n",
        "link": "https://habr.com/ru/post/144268/"
    },
    {
        "title": "История реверс-инжиниринга одного SMS трояна для Android",
        "body": "\nВсе началось с жалоб одного моего доброго друга, по совместительству владельца устройства на Android. Он жаловался, что оператор постоянно снимает с него деньги неизвестно за что. После звонков оператору выяснилось, что средства снимали за премиум SMS, которые мой друг якобы отправлял. Я сам неоднократно нарывался в Интернетах на подозрительные сайты, которые предлагают скачать apk с игрой/программой/Live Wallpaper, при установке которого выясняется, что это всего лишь программа, которая отправляет SMS на премиум номера. Но в этом случае если нажал кнопку, то «сам дурак», потому что правила в таких программках явно говорят, что последует отправка SMS на платные номера, да и ссылки они в итоге предоставляют на реальные программы. \n\nТак или иначе, ко мне закралось подозрение, что здесь ситуация тоже завязана на таком роде деятельности, и я взялся разобраться, куда же все-таки утекают денежки.\n",
        "link": "https://habr.com/ru/post/161459/"
    },
    {
        "title": "История одного mBaaS (cloud backend) сервиса на примере QuickBlox",
        "body": "Привет Хабровчане! Если вы уже нарядили елку и думаете, какую бы новую аппликуху сделать во время праздников, то вам может быть полезным узнать больше о mBaaS (mobile backend as a service).\n\nПост будет интересен тем, кто уже использует или планирует использовать готовые серверные платформы в разработке своих мобильных приложений. Про QuickBlox уже писали на Хабре в общем, про code samples и SDK, про авторизацию-аутентификацию и HURL. Также нас упоминали в \"Поверхностный обзор Javascript-enabled BaaS платформ\".\n\nЕсли вам интересно узнать о том, как и почему появляются такие платформы, а также о дальнейших планах развития, чтобы решить для себя, стоит ли доверять бекенд своих приложений таким платформам, то милости просим читать дальше. Здесь больше про историю и планы, но если вам интересен какой-то технический аспект, пожалуйста задавайте вопросы в комментах. \n\n",
        "link": "https://habr.com/ru/post/163699/"
    },
    {
        "title": "Машинка на контроллере с .NET Micro Framework, управляемая акселерометром Android-устройства",
        "body": "\nПростой проект с описанием изготовления 4WD машинки с управлением от Android-устройства через Bluetooth канал. Управление машинкой происходит при помощи акселерометра, путем наклона планшета/смартфона. Видео работы смотрите в конце статьи. Все исходные тексты прилагаются.\n\nИнструментарии разработки: Java/Eclipse для Android и .NET Micro Framework/Visual C# Express для микроконтроллера.\n\n",
        "link": "https://habr.com/ru/post/168723/"
    },
    {
        "title": "Интеграция приложения на QML с веб-ресурсами",
        "body": "Здравствуй, дорогой хабражитель! Я хочу рассказать, как интегрировать программу на новомодном языке QML с веб-ресурсами.\n\nСам по себе, QML — это декларативный JavaScript-подобный язык программирования, который входит в фреймворк Qt. Разработчики Qt настроены серьезно и продвигают его как основной инструмент создания интерфейсов. Более того, достаточно много вещей можно сделать не прибегая вообще к C++, в том числе и возможность работы с веб-серверами.\n\nВеб-технологии все сильнее проникают в нашу жизнь, мы часто пользуемся различными веб-ресурсами. Не всегда удобно для этого запускать браузер, иногда отдельное приложение-клиент гораздо удобнее, о чем красноречиво говорит, например, количество клиентов для различных социальных сетей, особенно на мобильных платформах.\n\nУчитывая, что в Qt 5.1, альфа версия которой вышла на прошлой неделе, включена начальная поддержка Android и iOS, эта тема может быть особенно интересна тем, кто присматривается к Qt или активно ее осваивает. В этой статье я расскажу, как можно организовать работу с веб-ресурсами из приложения на QML на примере API ВКонтакте.\n\nНа всякий случай отмечу, что я рассматриваю последнюю стабильную версию Qt 5.0.2. В более ранних версиях каких-то возможностей может не быть.\n",
        "link": "https://habr.com/ru/post/176665/"
    },
    {
        "title": "Дайджест новостей из мира мобильной разработки за последнюю неделю №11 (22 — 28 апреля 2013)",
        "body": "На этой неделе NASA запустила три спутника под управлением Nexus One на орбиту, на Android пришел Фидонет, Nokia и Apple отчитались о результатах прошедшего квартала. А также история работы с заказчиками из ОАЭ, перенос лучшего компьютерного преферанса, «Марьяжа», на Android и покупка Facebook мобильного бэкенда Parse.\n\n",
        "link": "https://habr.com/ru/company/apps4all/blog/178227/"
    },
    {
        "title": "Чистим HTML-код при вставке текста из MS Word в HTML5 WYSIWYG редактор (contenteditable)",
        "body": "Здравствуйте!\n\nПри написании своего WYSIWYG редактора возникла проблема копирования текста из Ворда. Собственно проблем три:\n\nВорд вставляет много мусорного html кода, который необходимо чистить\nДля представления списков Ворд почему-то использует параграфы вместо тегов UL и LI\nСобственно как определить, что вставленный текст является вставленным из Ворда.\n\nВ общем, для решения этих проблем, был написан jquery-плагин, полный исходный код которого доступен в конце статьи. Пример использования:\n\n$(‘#editor’). msword_html_filter();\nПлагин вешается на событие keyup и проверяет, является ли исходный код внутри редактора вставленным из Ворда, если да, то запускается функция очистки. В результирующем html прибивается все что только можно – неразрывные пробелы, атрибуты style и align, теги span, все Mso-классы, пустые параграфы. \n\nДетали реализации под катом.\n\nUPD Демо на CodePen\n\n",
        "link": "https://habr.com/ru/post/194848/"
    },
    {
        "title": "О том, как мы делали игру для Google Play",
        "body": "О том, как мы делали игру «Стикеры» для Google Play\n\n\nДавно у меня была мысль поделиться своими знаниями с сообществом. Сначала хотел написать что-нибудь по астрофизике или ОТО, но решил все же что корректнее будет писать о той предметной области, которой я занимаюсь профессионально. Итак, я постараюсь подробно изложить процесс создания и тонкости реализации игрового приложения под Android (начиная от проектирования, заканчивая публикацией и In App покупками).\n",
        "link": "https://habr.com/ru/post/198054/"
    },
    {
        "title": "Генерация PDF из WPF-приложения «для всех, даром, и пусть никто не уйдет обиженный»",
        "body": "Пару недель назад на проекте появилась задача генерации PDF. \nРазумеется, я, как разработчик WPF UI, сразу был против сурового подхода кодирования отрисовки всех примитивов PDF в коде C#. \nИ заказчик был непротив покупки некоего платного конвертера из HTML в PDF, например. \nВроде бы все просто — генерируем строку с HTML-разметкой, используя DotLiquid для шаблонизации, и конвертируем в PDF с помощью одного из множества платных конвертеров. \nЕдинственная засада — плохая совместимость HTML со страничной структурой PDF-документа. \nТолько я начал закапываться в поисках решения этой проблемы, как один коллега поделился ссылкой на статью с альтернативным решением. \nИз статьи я узнал, что есть возможность сгенерировать PDF из XPS-документа (этот формат поддерживается в WPF FlowDocument). \nК тому же, для генерации использовалась бесплатная библиотека PDFSharp.\n\nИсходники можете скачать с GitHub.\n\nUPD: уже не первый раз наблюдаю как статью плюсуют (первые минусы были сразу после публикации и вряд ли относятся к основному контенту), при этом сливая карму. Мне интересна мотивация, обратная связь. Отпишитесь, кто чем недоволен / доволен, если не затруднит.\n",
        "link": "https://habr.com/ru/post/201836/"
    },
    {
        "title": "Блэкджек на LiveScript",
        "body": "Вероятно, многим уже надоели заголовки типа «ХХХ в 30 строк», но я рискну написать ещё один пост. Дабы хоть как-то сгладить злость отдельных хабралюдей, я расскажу что в этом скрипте делает каждая строка.\n\n",
        "link": "https://habr.com/ru/post/202906/"
    },
    {
        "title": "Виртуализация данных в WPF",
        "body": "Доброго времени суток. \n\nМеня давно интересовал вопрос написания своего класса для оптимальной загрузки информации из базы данных, например когда количество записей более 10 млн. записей.\nОтложенная загрузка информации, использование нескольких источников данных и пр.\n\nНе нашел на хабре пост посвященный данной теме, поэтому представляю вам свой перевод статьи Пола МакКлина, которая стала отправной точкой в решении поставленных задач.\n",
        "link": "https://habr.com/ru/post/208792/"
    },
    {
        "title": "Создаем тег Markdown с помощью Polymer/Web Components",
        "body": " К сожалению довольно сложно найти хорошие материалы по web-components на русском языке, поэтому мы с filipovskii_off решили перевести эту небольшую статью от Rob Dodson. \n\nЭх… Markdown… Отличная штука! Я, честно говоря, не писал бы этот пост, если бы не Markdown. Много раз я пытался начать блог, но каждый раз находил процесс написания слишком ограниченным, как в GUI так и в HTML режиме WordPress. Markdown всё изменил для меня. По-моему, нам давно пора сделать его полноценной частью инструментария разработчика.\nСегодня я покажу вам, как создать тег Markdown с помощью Polymer, Web Components фреймворка от Google.\n\nGithub\nЕсли хотите следить за ходом создания тега, хватайте код с Github.",
        "link": "https://habr.com/ru/post/212015/"
    },
    {
        "title": "Cетевое взаимодействие посредством TCP в C# — свой велосипед",
        "body": "\n\nПриветствую!\n\nПродолжу серию постов посвященных программированию, на этот раз я хочу поговорить на тему сетевого взаимодействие посредством TCP соединения между .Net приложениями. Статья может быть полезна новичкам или тем кто еще не сталкивался с сетью по отношению к .Net. Полностью работоспособный пример прилагается: http://yadi.sk/d/1OxmAFuCN3kmc.\n\nПодробности под катом.\n",
        "link": "https://habr.com/ru/post/220285/"
    },
    {
        "title": "Обработка ошибок в Node.js",
        "body": "\n\nПост содержит перевод статьи «Error Handling in Node.js», которую подготовили сотрудники компании Joyent. Статья была опубликована 28 марта 2014 года на сайте компании. Dave Pacheco поясняет, что статья призвана устранить неурядицу среди разработчиков, касаемо лучших практик работы с ошибками в Node.js, а так же ответить на вопросы, которые часто возникают у начинающих разработчиков.\n",
        "link": "https://habr.com/ru/post/222761/"
    },
    {
        "title": "[ libGDX ] Пишем полноценную игру под Android. Часть 2",
        "body": "Здравствуйте! Не прошло и суток с момента публикации первой части статьи, а я не могу спать, так как есть незаконченное дело и нужно дописать статью. Приступим.\n",
        "link": "https://habr.com/ru/post/224223/"
    },
    {
        "title": "Сформирована предварительная программа WebCamp: Developers Day",
        "body": "\n\nC 21 по 24 июля в рамках Odessa Innovation Week пройдет V ежегодная конференция веб-разработчиков WebCamp 2014, которая будет включать в себя следующие направления: разработка, управление проектами, дизайн, интернет-маркетинг и мобильные технологии.\n\n24 июля день конференции будет посвящен веб-разработке. В трех параллельных потоках участники обсудят актуальные вопросы по таким направлениям, как: Front-End, Back-End и Frameworks/Architecture.\n\nНа потоке Front-End речь пойдет о вопросах современной верстки и разработки фронтенда. Поток Back-End будет посвящен актуальным темам разработки бекенда на различных языках программирования: JavaScript, Scala, PHP и других. О секретах различных фреймворков, их сравнении и выборе для определенных задач, а также об архитектурных вопросах будет идти речь на потоке Frameworks/Architecture.\n",
        "link": "https://habr.com/ru/company/rootuamedia/blog/226999/"
    },
    {
        "title": "Парсинг формул с функциями",
        "body": "Доброго времени суток!\n\nПонадобилось сделать небольшой проект. В проекте разбор и вычисление математических формул. \nТребования: вложенные функции, неограниченная глубина вложения и внешние переменные.\n\nВ интернете много решений, но все не то, или не так. Или без формул, или без переменных или простейшие возможности типа «1+(2-3)/4». Зато большинство ответов были в сторону лексического анализа и обратной польской нотации. Вот их я и применил, взяв примеры с разных источников.\n\nСначала разберем лексический анализ. Потому что простой анализ формулы по символам с поиском в ней функций, операторов, переменных и прочего получился бы крайне нечитабельный. \n\nРеализацию алгоритмов можно взять в интернете и подредактировать под свои нужды.\n\nДля лексического анализа внес небольшие изменения:\n\nзагрузка списка переменных. В конструкторе происходит замена переменных их значениями;\nзамена разделителей целой-дробной части числа на тот что используется в системе;\nдобавил унарный минус;\nудалил лишние для меня лексемы.\n\nВот что получилось. Ниже будет ссылка на исходники.\n",
        "link": "https://habr.com/ru/post/246707/"
    },
    {
        "title": "Веб-парсинг на Ruby",
        "body": "\nЭто перевод статьи «Web Scraping with Ruby», которую я нашел полезной при изучении языка программирования Ruby. Парсинг меня интересует в личных целях. Мне кажется, это не только полезный навык, но и хороший способ изучить язык. \n",
        "link": "https://habr.com/ru/post/252379/"
    },
    {
        "title": "Простой разбор URL с помощью изоморфного Javascript",
        "body": "Во многих веб-приложениях требуется разбор URL, такой как извлечение доменного имени, имплиментация REST API или поиск пути к файлам изображений. Типичная структура URL показана на рисунке ниже:\n\n\n",
        "link": "https://habr.com/ru/post/252533/"
    },
    {
        "title": "Приемы разработки ASMX веб-сервисов",
        "body": "В этой статье я расскажу о различных приемах разработки SOAP веб-сервисов по технологии ASMX, а также об этой технологии в целом. Кроме SOAP, также будет рассмотрена реализация AJAX. Статья будет полезна как тем, кто уже знаком с ней, так и тем, кто только собирается создать свой первый веб-сервис.\n",
        "link": "https://habr.com/ru/post/254165/"
    },
    {
        "title": "Python, xlsx с картинками, макросами, media-art, внедренными объектами",
        "body": "Приветствую, хабросообщество.\n\nРешил написать немного про работу python с xlsx.\nДа, я знаю, что про это написано много, но тем не менее, я не смог найти готовое решение для своей задачи.\nНужно заполнять несколько десятков ячеек у готового файла xls.\n\nВсе бы ничего, но файл содержал макросы, картинки, объекты media-art, внедреные объекты и много чего еще.\nПеребрав популярные решения (openpyxl, xlutils.copy и пару других), я понял, что они немного портят файл.\nА задача сводилась именно к точечной правке ячеек и чтоб все остальное осталось как было.\n\n",
        "link": "https://habr.com/ru/post/254167/"
    },
    {
        "title": "Пишем свой упрощенный OpenGL на Rust — часть 2 (проволочный рендер)",
        "body": "Итак, в продолжение предыдущей статьи пишу 2-ю часть, где мы попробуем добраться до того, чтобы написать проволочный рендер. Напоминаю, что цель этого цикла статей — написать сильно упрощенный аналог OpenGL на Rust. В качестве основы используется «Краткий курс компьютерной графики» от  haqreu, в своих же статьях я сосредоточиваюсь больше не на графике как таковой, а на особенностях реализации при помощи Rust: возникающие проблемы и их решения, личные впечатления, полезные ресурсы для изучающих Rust. Сама получившаяся программа не имеет особенной ценности, польза от этого дела в изучении нового перспективного ЯП и основ трехмерной графики. Наконец, это занятие довольно таки увлекательно.\n\nНапоминаю также, что поскольку я не являюсь профессионалом ни в Rust ни в 3D-графике, а изучаю эти вещи прямо по ходу написания статьи, то в ней могут быть грубые ошибки и упущения, которые я, впрочем, рад исправить, если мне на них укажут в комментариях.\n\n\nМашинка, которую мы получим в конце статьи\n",
        "link": "https://habr.com/ru/post/261739/"
    },
    {
        "title": "Как сделать грамматику в Perl 6",
        "body": "Грамматика в программировании – это набор правил для разбора текста. Это очень полезная вещь – к примеру, грамматику можно использовать для проверки того, подчиняется ли строка текста конкретным стандартам или нет. У Perl 6 есть встроенная поддержка грамматик. Их настолько просто создавать, что единожды начав, вы обнаружите, что используете их везде.\n\nВ последнее время я работал над Module::Minter, простым приложением для создания базовой структуры модуля Perl 6. Мне надо было проверить, что предлагаемое имя модуля соответствует стандартам именования Perl 6.\n\nИмена модулей – это идентификаторы, разделённые двумя двоеточиями. Идентификатор должен начинаться с алфавитного символа (a-z) или подчёркивания, за которым могут идти алфавитно-цифровые символы. Правда, у некоторых модулей может быть только один идентификатор, без двоеточий, а у других их может быть много (HTTP::Server::Async::Plugins::Router::Simple). \n\nОпределяем грамматику\nВ Perl 6 грамматики строятся на регулярках. Мне нужны две: одна для идентификаторов, другая – для разделителей в виде двоеточий. Для идентификаторов я задал:\n\n<[A..Za..z_]> # начинается с буквы или подчёркивания\n<[A..Za..z0..9]> ** 0..* # ноль или больше алфавитно-цифровых\n\n\nПомните, что мы используем регулярки из Perl 6, и тут всё выглядит несколько по-другому. Класс символа определяется <[… ]>, а диапазон определяется оператором… вместо тире. Эта регулярка совпадает с любой первой буквой или подчёркиванием, за которым идёт ноль или более алфавитно-цифровых символов.\n",
        "link": "https://habr.com/ru/post/263965/"
    },
    {
        "title": "AdBlockBlock — обходим блокировщики рекламы. Метод 1",
        "body": "Заниматься чем-то, нарушающим священное волеизъявление здешних господ на контент, который и только который они хотят видеть вокруг себя — дело, конечно, неблагодарное и кармически опасное. Но гонки вооружений между блокировщиками рекламы и рекламными системами не избежать, поэтому говорить об этом нужно. Сейчас, когда общий объем вырезанного трафика крутится около 1% — всё несколько вяленько, но уже есть оглядывающиеся владельцы сайтов, недополучающие до 30% денег с рекламы. Рекламные сети начинают общаться между собой, обмениваться спецификациями, есть уже какой-то израильский стартап на эту тему — думаю, соблазнительно с минимальными усилиями увеличить доход сразу и на проценты. В российском сегменте всё пока обходится увещевательными объявлениями вида «Вы отключили рекламу — это мешает нам развиваться» или простым игнорированием факта существования таких пользователей. Надо сказать, пусть оно всё так и остается. \n\nЗдесь, исключительно в режиме минимального доказательства работоспособности — будем обходить самый распространенный тип блокировщиков рекламы — по паттерну URL. Метод должен поддерживать:\n\n\nхранения cookie рекламных систем на стороне пользователя \nпередавать не меньшее количество информации о пользователя, чем браузер: User-Agent, IP \nтребовать минимальной настройки большинства стандартных рекламных тэгов\nбыть легко подключаемым и изменяемым для случаев, когда кто-то не поленился и всё-таки добавил кастомное правило, попавшее в мейнстрим\n \nДля достижения результата — будем маскировать все URL рекламных сетей через своеобразное прокси между сервером издателя и рекламодателя.",
        "link": "https://habr.com/ru/post/267911/"
    },
    {
        "title": "AngularJS: Миграция с 1.2 на 1.4, ч.1",
        "body": "О преимуществах перехода с версии 1.2 написано немало статей. Однако, согласно статистике, более 45% сайтов всё ещё используют версию 1.2, только 31% перешёл на более новую 1.3 и всего 5% используют 1.4.\n\nИ это когда космические корабли бороздят просторы вселенной версия 1.2.0 вышла в релиз почти два года назад, версия 1.3.0 − год назад, версия 1.4.0 − ещё этой весной, а 1.5.0 уже выходит в бету.\n\n\n\nКак правило, большие проекты от перехода сдерживают непрозрачность этого процесса и скудность материалов на данную тематику.\nВ официальном гайде можно найти лишь маленький кусочек всех возможных проблем, а блоги, как правило, лишь пересказывают его.\n\nВ этой статье мы поговорим о том, с чем можно столкнуться при миграции на новые версии, и разберём наиболее проблемные места.\n",
        "link": "https://habr.com/ru/post/268265/"
    },
    {
        "title": "Rust в деталях: пишем масштабируемый чат с нуля, часть 1",
        "body": "Часть 1: Реализуем WebSocket. Введение.\nВ этом цикле статей мы рассмотрим процесс создания масштабируемого чата, который будет работать в реальном времени.\nЦелью данного обзора является пошаговое изучение основ быстро набирающего популярность языка программирования Rust на практике, с попутным охватом системных интерфейсов.\n\nВ первой части мы рассмотрим начальную настройку окружения и реализацию простейшего WebSocket-сервера. Чтобы понять технические детали статьи вам не потребуется опыта работы с языком Rust, хотя знание основ системных API (POSIX) и C/C++ лишним не будет. Прежде чем начинать чтение, заготовьте немного времени (и кофе) — статья описывает все максимально подробно и поэтому довольно длинная.\n\n",
        "link": "https://habr.com/ru/post/268609/"
    },
    {
        "title": "Angular XSLT module",
        "body": "Недавно мне попался маленький проект, где я предложил использование Angular и XSLT, на что я получил такой вопрос: «С чего бы использовать устаревшую технологию XSLT, ведь ее используют только с Java, да к тому же, только для Enterprise»?\n\nЭтот вопрос и явился причиной того, что я решил написать данную статью.\n\nИтак, разрешите представить вашему вниманию «химеру» под названием Angular XSLT module. Ангулар разделяет business логику и view логику, но с модулем XSLT, view логику Angular можно вообще отдать XSLT.\n\nЕсть конечно пара подводных камней, это:\n\n1) Результат не будет рендерится,\n2) Angular команды не будут вызываться.\n\nНо легким движением руки, эти проблемы решаются на раз-два!\n",
        "link": "https://habr.com/ru/post/268825/"
    },
    {
        "title": "Управление осциллографами Tektronix из Visual Studio",
        "body": "С подобными задачами сталкиваешься редко, однако если это происходит, очень приятно прочитать исчерпывающую статью, которая поможет быстро начать продуктивную работу, а не ломать целый день голову вопросами «Что скачать?», «Где найти?», «Как это вообще работает?». У меня подобная задача возникла в рамках разработки автоматизированного стенда для тестирования плат. В процессе ее решения возник ряд проблем, а информации в интернете по этому поводу достаточно мало ввиду узости проблемы. Данная статья максимально подробно и емко описывает основные моменты для быстрого начала работы с осциллографами Tektronix из Visual Studio.\n",
        "link": "https://habr.com/ru/post/271641/"
    },
    {
        "title": "Парсинг формул в 50 строк на Python",
        "body": "Вдохновение — задача с собеседования Яндекса и статья «Парсинг формул в 40 строк».\n\nМоей целью было посмотреть, как будет выглядеть «pythonic» решение этой задачи. Хотелось, чтобы решение было простым, код читаемым и разделённым. В итоге ещё получился и пример применения цепочки генераторов (generators pipeline).\n",
        "link": "https://habr.com/ru/post/273253/"
    },
    {
        "title": "Java и время: часть первая",
        "body": "Восемь лет назад я принимал участие в проектировании и разработке сервиса, который был должен обслуживать запросы пользователей со всех уголков земного шара и координировать их действия. Работая над проектом я понял, что очень часто многие важные аспекты работы со временем просто игнорируются. Иногда это действительно не очень критично: если сервис локален и им пользуются только на определенной территории, либо пользователи естественным образом разделены на почти не взаимодействующие между собой географические кластеры. Однако же, если сервис объединяет пользователей по всему миру, то без четкого понимания принципов работы со временем уже не обойтись. Представим сервис, в котором общие события (совещания например) начинаются в какое-то строго определенное время, а пользователи рассчитывают на это. Какое время им показывать, в какой момент их беспокоить уведомлениями, что такое день рождения и когда можно поздравить человека — в статье я попробую это осмыслить. \n\n\n\nСтатья не претендует на глубину и/или академичность. Это попытка систематизировать опыт и обратить внимание разработчиков на не очень очевидные аспекты.\n\n",
        "link": "https://habr.com/ru/post/274811/"
    },
    {
        "title": "JSON Schema и ее использование для валидация JSON-документов в C++",
        "body": "В данной статье описывается стандарт JSON Schema и его использование для проверки соответствия заданному формату на языке C++ средствами библиотеки valijson.\n\nНемного истории\nДля начала вспомним, что привело к повсеместному вытеснению JSON-ом XML-а и что в этом было плохого. XML изначально создавался как метаязык разметки документов, позволяя использовать унифицированный код парсера и валидатора документов. Будучи первым стандартом такого рода, да еще и пришедшимся на период бурного внедрения цифровых корпоративных информационных систем, XML послужил основой для бесчисленного множества стандартов сериализации данных и протоколов взаимодействия, т.е. хранения и передачи структурированных данных. Тогда как создавался он прежде всего для разметки документов.\n",
        "link": "https://habr.com/ru/post/276305/"
    },
    {
        "title": "Патчим gnupg или пара RSA-32768 за 106 минут",
        "body": "\n\nНа самом деле патчим gnupg и libgcrypt…\n\nКогда-то давным давно, чтобы использовать 8192 и 16384 RSA ключи я правил размер в keygen.c и размер SECMEM буффера по соседству. Дела давно минувших дней, теперь SECMEM вынесена в config.h и именуется SECMEM_BUFFER_SIZE.\n\nВ итоге после скачивания верии 2.0.29 под свежий debian 8.3, за место убитой 12й убунты апдейтом на 14ую, я быстренько подкрутил размер ключика и размер буфера и радостно сгенерировал на 5200U 16кбит ключ за 18 (или 19) минут, что раньше занимало 45-50 минут на P6200.\n\nНо вот 32кбит дали мне пачку ошибок. Свободное время есть — разбираемся.\n",
        "link": "https://habr.com/ru/post/278051/"
    },
    {
        "title": "Правильная работа с датой и временем",
        "body": "Практически все проекты сталкиваются с проблемами, вызванными неправильной обработкой и хранением даты и времени. Даже если проект используется в одном часовом поясе, все равно после перехода на зимнее/летнее время можно получить неприятные неожиданности. При этом мало кто озадачивается реализацией правильного механизма со старта, потому что кажется, что с этим проблем быть не может, так как все тривиально. К сожалению, в последствии реальность показывает, что это не так.\n",
        "link": "https://habr.com/ru/post/278527/"
    },
    {
        "title": "Использование lambda в качестве локальных функций",
        "body": "Наверняка вы сталкивались с ситуацией, когда есть достаточно жирный метод, и вам приходится вынести часть его кода в отдельный метод и ваш класс/модуль переполняется методами, которые относятся к одному единственному методу и нигде более не используется. Ужасный каламбур, правда?\nЕсли вы просто хотите ознакомиться с реализацией класса, то эти самые вспомогательные методы очень сильно мозолят глаза, приходится прыгать по коду туда-сюда. Да, конечно, можно разнести их по отдельным модулям, но я считаю, что зачастую это слишком избыточно (я, например, не хочу создавать модуль, который, по сути, определяет только один метод, декомпозированный на n частей). Особенно неприятно, когда эти вспомогательные функции состоят из одной строки (например, метод, который выдергивает определенный элемент из распарсенного JSON).",
        "link": "https://habr.com/ru/post/303594/"
    },
    {
        "title": "Введение в futures-rs: асинхронщина на Rust [перевод]",
        "body": "\nЭтот документ поможет вам изучить контейнер для языка программирования Rust — futures, который обеспечивает реализацию futures и потоков с нулевой стоимостью. Futures доступны во многих других языках программирования, таких как C++, Java, и Scala, и контейнер futures черпает вдохновение из библиотек этих языков. Однако он отличается эргономичностью, а также придерживается философии абстракций с нулевой стоимостью, присущей Rust, а именно: для создания и композиции futures не требуется выделений памяти, а для Task, управляющего ими, нужна только одна аллокация. Futures должны стать основой асинхронного компонуемого высокопроизводительного ввода/вывода в Rust, и ранние замеры производительности показывают, что простой HTTP сервер, построенный на futures, действительно быстр.\n",
        "link": "https://habr.com/ru/post/310234/"
    },
    {
        "title": "Ещё один интерпретатор Brainfuck",
        "body": "Brainfuck — язык программирования, созданный с одной целью: написать для него интерпретатор. Их было написано так много, что даже не буду давать на них ссылки. В этой статье на пальцах объясняется простой, но эффективный способ его оптимизации.\n\n",
        "link": "https://habr.com/ru/post/321630/"
    },
    {
        "title": "Нужны ли нам нейронные сети?",
        "body": "Или повесть о том, как я сделал распознавания изображений с помощью свёрточной нейронной сети без нейронной сети. Интересно? Тогда прошу под кат.\n",
        "link": "https://habr.com/ru/post/325526/"
    },
    {
        "title": "Аудит актуальных уязвимостей без регистрации и смс",
        "body": "Вступление\nКак известно каждому, кто хоть раз подписывался на рассылки по ИБ, количество найденных за день уязвимостей часто превышает возможности человека по их разбору. Особенно, если серверов — много, особенно если там зоопарк из ОС и версий.\n\nВ этом топике я расскажу о том, как мы решили эту проблему. И да, Perl* жив :)",
        "link": "https://habr.com/ru/post/326084/"
    },
    {
        "title": "Как подружиться с Realm",
        "body": "В этой статье мы хотели бы поделиться опытом использования набирающей популярность библиотеки для хранения данных — Realm. Перед любым проектом вначале разработки встает вопрос что использовать для хранения данных — что-то проверенное или попробовать инструменты из разряда для хипстеров.\n\nМы — небольшой стартап, разрабатывающий детский лаунчер. Хотя мы стартап и у нас небольшая команда, но большое внимание мы уделяем качеству кода. За два года разработки довольно сильно менялись требования, функционал и выбранные нами технологии. Вплоть до того, что мы перешли с полностью нативного приложения на гибридное, на основе Cordova. Также, одним из этих изменений стал переход с BaaS от Facebook'а Parse на Realm. В этой статье мы хотим рассказать о проблемах, с которыми мы столкнулись при переходе на Realm и стоит ли пробовать новые библиотеки, если со старыми уже \"подружились\".",
        "link": "https://habr.com/ru/company/fairbear/blog/326152/"
    },
    {
        "title": "QuadBraces III",
        "body": "Доброго всем здравия!\n\nПрошло практически ровно два года с момента моей первой публикации о парсере QuadBraces — альтернативе MODX Evolution для простейших проектов, требующих шаблонизации. Это могут быть одностраничники с типовыми публикациями, портфолио, сайты-визитки, состоящие из почти статических страниц, и прочее подобное. С тех пор я обновлял свою разработку и незаметно для сообщества дополз до третьей версии. Нынешняя версия парсера QuadBraces содержит столько изменений, что я просто обязан опубликовать подробный туториал. Итак…",
        "link": "https://habr.com/ru/post/338018/"
    },
    {
        "title": "Как работает JS: цикл событий, асинхронность и пять способов улучшения кода с помощью async / await",
        "body": "[Советуем почитать] Другие 19 частей циклаЧасть 1: Обзор движка, механизмов времени выполнения, стека вызовов\nЧасть 2: О внутреннем устройстве V8 и оптимизации кода\nЧасть 3: Управление памятью, четыре вида утечек памяти и борьба с ними\nЧасть 4: Цикл событий, асинхронность и пять способов улучшения кода с помощью async / await\nЧасть 5: WebSocket и HTTP/2+SSE. Что выбрать?\nЧасть 6: Особенности и сфера применения WebAssembly\nЧасть 7: Веб-воркеры и пять сценариев их использования\nЧасть 8: Сервис-воркеры\nЧасть 9: Веб push-уведомления\nЧасть 10: Отслеживание изменений в DOM с помощью MutationObserver\nЧасть 11: Движки рендеринга веб-страниц и советы по оптимизации их производительности\nЧасть 12: Сетевая подсистема браузеров, оптимизация её производительности и безопасности\nЧасть 12: Сетевая подсистема браузеров, оптимизация её производительности и безопасности\nЧасть 13: Анимация средствами CSS и JavaScript\nЧасть 14: Как работает JS: абстрактные синтаксические деревья, парсинг и его оптимизация\nЧасть 15: Как работает JS: классы и наследование, транспиляция в Babel и TypeScript\nЧасть 16: Как работает JS: системы хранения данных\nЧасть 17: Как работает JS: технология Shadow DOM и веб-компоненты\nЧасть 18: Как работает JS: WebRTC и механизмы P2P-коммуникаций\nЧасть 19: Как работает JS: пользовательские элементы\nПеред вами четвёртая часть серии материалов, посвящённых внутренним особенностям работы JavaScript. Эти материалы, с одной стороны, направлены на изучение базовых элементов языка и экосистемы JS, с другой, содержат рекомендации, основанные на практике разработки ПО в компании SessionStack. Конкурентоспособное JS-приложение должно быть быстрым и надёжным. Создание таких приложений — та цель, к которой, в конечном счёте, стремится любой, интересующийся механизмами JavaScript.\n\n",
        "link": "https://habr.com/ru/company/ruvds/blog/340508/"
    },
    {
        "title": "Система сбора, анализа, уведомлений и визуализации логов на syslog-ng, elasticsearch, kibana, grafana, elasticalert",
        "body": "\nЧто мы получим после этой статьи:\nСистему сбора и анализа логов на syslog-ng, elasticsearch в качестве хранилища данных, kibana и grafana в качестве систем визуализации данных, kibana для удобного поиска по логам, elasticalert для отправки уведомлений по событиям. Приготовьтесь, туториал объемный.\nКакие логи будем собирать:\n\nвсе системные логи разложенные по индексам в зависимости от их facility(auth,syslog,messages и т.д.);\nлоги nginx — access и error;\nлоги pm2;\nи др.\n\nОбоснование выбора системы\nПочему я выбрал связку с syslog-ng в качестве отправителя, парсера и приемщика логов? Да потому что он очень быстрый, надежный, не требовательный к ресурсам(да да — logstash в качестве агентов на серверах и виртуальных машинах просто убожество в плане пожирания ресурсов и требованием java), с внятным синтаксисом конфигов(вы видели rsyslog? — это тихий ужас), с широкими возможностями — парсинг, фильтрация, большое количество хранилищ данных(postgresql,mysql,elasticsearch,files и т.д.), буферизация(upd не поддерживает буферизацию), сторонние модули и другие фишки.\nТребования:\n\nUbuntu 16.04 или debian 8-9;\nvm для развертывания;\nПрямые руки.\n\nПриступим или добро пожаловать под кат",
        "link": "https://habr.com/ru/post/345968/"
    },
    {
        "title": "Лёгкий «Frontend» на Golang для ручного тестирования Ethereum смарт контракта без JavaScript и Web3",
        "body": "Привет!\nУ меня возникла идея разработать надеюсь простое решение, для ручного тестирования смарт контрактов Ethereum. Стало интересно сделать, что-то похожее на функционал вкладки Run в Remix.",
        "link": "https://habr.com/ru/post/346432/"
    },
    {
        "title": "Прямой SQL в EntityFramework. Теперь со строгой типизацией",
        "body": "Привет!\nСегодня мы немного поговорим про EntityFramework. Совсем чуть-чуть. Да, я знаю что к нему можно относиться по-разному, многие от него плюются, но за неимением лучшей альтернативы — продолжают использовать. \nТак вот. Часто ли вы используете в своём C#-проекте с настроенным ORM-ом прямые SQL-запросы в базу? Ой, да бросьте, не отнекивайтесь. Используете. Иначе как бы вы реализовывали удаление/обновление сущностей пачками и оставались живы… \nЧто мы больше всего любим в прямом SQL? Скорость и простоту. Там, где \"в лучших традициях ORM\" надо выгрузить в память вагончик объектов и всем сделать context.Remove (ну или поманипулировать Attach-ем), можнo обойтись одним мааааленьким SQL-запросом.\nЧто мы больше всего не любим в прямом SQL? Правильно. Отсутствие типизации и взрывоопасность. Прямой SQL обычно делается через DbContext.Database.ExecuteSqlCommand, а оно на вход принимает только строку. Следовательно, Find Usages в студии никогда не покажет вам какие поля каких сущностей ваш прямой SQL затронул, ну и помимо прочего вам приходится полагаться на свою память в вопросе точных имён всех таблиц/колонок которые вы щупаете. А ещё молиться, что никакой лоботряс не покопается в вашей модели и не переименует всё в ходе рефакторинга или средствами EntityFramework, пока вы будете спать. \nТак ликуйте же, адепты маленьких raw SQL-запросов! В этой статье я покажу вам как совместить их с EF, не потерять в майнтайнабильности и не наплодить детонаторов. Ныряйте же под кат скорее!",
        "link": "https://habr.com/ru/post/347820/"
    },
    {
        "title": "Получение параметров команды из человеческой фразы",
        "body": "Хотя мне и удалось разобраться с классификацией интента, осталась более сложная задача — выцепить из фразы дополнительные параметры. Я знаю, что это делается с помощью тегов. Один раз я уже успешно применил sequence_tagging, но я не очень рад тому, что нужно держать словарь векторных представлений слов размером больше 6 гигабайт.",
        "link": "https://habr.com/ru/post/350222/"
    },
    {
        "title": "Разбор предложений по шаблонам русского языка",
        "body": "Существует несколько парсеров, подходящих для русского языка. Некоторые из них могут даже выполнять синтаксический анализ, как SyntaxNet, MaltParser и AOT:\n  \n… или выявлять факты, как Tomita.\n\nГлядя на эти парсеры, я вижу какую-то огромную сложность вычислений, требования к памяти, лицензионные ограничения и… ограниченность каждого решения, увы.\n\nЧтобы понять, что же там такого сложного, мне захотелось сделать собственный парсер. Благо выходные оказались длинными.",
        "link": "https://habr.com/ru/post/350802/"
    },
    {
        "title": "«Вирусы» в расширениях на примере FastProxy",
        "body": "В этой статье я покажу насколько опасны могут быть расширения в хроме, и чем\nрасширения в фаерфоксе безопаснее.\nРечь пойдёт о расширении FastProxy.\nНи в коем случае не ставьте его в чистом виде в хроме.",
        "link": "https://habr.com/ru/post/421735/"
    },
    {
        "title": "Julia. Строки и Метапрограммирование",
        "body": "\nПродолжаем изучение молодого и перспективного языка общего назначения Julia. На этот раз уделим больше внимания строкам, начнем робкие шаги в мир метапрограммирования и научим интерпретатор производить символьные операции (Под катом всего две картинки, зато много синтаксического сахара)",
        "link": "https://habr.com/ru/post/431438/"
    },
    {
        "title": "Сжимаем список IP-адресов наилучшим образом",
        "body": "\n\nКак-то я прочитал на Хабре статью про настройку BGP на роутере. Инструкции оттуда можно использовать для настройки домашнего роутера так, чтобы трафик на определённые IP-адреса шёл через другой канал. Однако здесь есть проблема: список IP-адресов может быть очень большим.\n\nВ этот граф, помимо сетей из списка, добавлены ещё и наибольшие общие подсети соседних сетей. О том, зачем это нужно, читайте далее.",
        "link": "https://habr.com/ru/post/438242/"
    },
    {
        "title": "Работа с часовыми поясами в JavaScript",
        "body": "\n\nНедавно я работал над задачей добавления часовых поясов в JS-библиотеку календаря, которую ведёт моя команда. Мне было хорошо известно о никудышной поддержке часовых поясов в JavaScript, но я надеялся, что абстрагирование имеющихся объектов данных позволит легко решить большинство трудностей.\n\nОднако мои мечты пошли прахом. Когда я углубился в задачу, то понял, что в этом языке действительно трудно работать с часовыми поясами. Реализовать что-то сложнее простого форматирования отображения времени и вычисления даты с помощью комплексных операций (функции календаря) было чрезвычайно трудным делом. Я получил ценный опыт решения этой проблемы, и это повлекло за собой новые затруднения.\n\nВ этой статье я хочу обсудить, с чем я столкнулся и как это решал. Пока я писал текст, осознал, что причиной всех невзгод было плохое понимание мной самой темы часовых поясов. В свете этого осознания я предлагаю сначала подробно поговорить об определении и стандартах, а уже потом переходить к JavaScript.",
        "link": "https://habr.com/ru/company/vk/blog/438286/"
    },
    {
        "title": "Пример разбора C++ кода с помощью libclang на Python",
        "body": "На одном личном проекте на C++ мне потребовалось получать информацию о типах объектов во время выполнения приложения. В C++ есть встроенный механизм Run-Time Type Information (RTTI), и конечно же первая мысль была использовать именно его, но я решил написать свою реализацию, потому что не хотел тянуть весь встроенный механизм, ведь мне нужна была лишь малая часть его функционала. А еще хотелось попробовать на практике новые возможности C++ 17, с которыми я был не особо знаком.\nВ этом посте представлю пример работы с парсером libclang на языке Python.",
        "link": "https://habr.com/ru/post/439270/"
    },
    {
        "title": "Настройка НА-кластера Kubernetes на «голом железе», мониторинг, логи и примеры использования. Часть 3/3",
        "body": "\nЧасть 1/3 тут.\nЧасть 2/3 тут.\nВсем привет! А вот и третья часть руководства «Kubernetes на «голом железе»! Я уделю внимание мониторингу кластера и сбору логов, также мы запустим тестовое приложение для использования предварительно настроенных компонентов кластера. Затем проведем несколько стресс-тестов и проверим стабильность этой кластерной схемы.",
        "link": "https://habr.com/ru/company/southbridge/blog/443658/"
    },
    {
        "title": "Как реализовать язык программирования на JavaScript. Часть 2: Интерпретатор",
        "body": "Здравствуйте! Представляю вам вторую часть моего перевода руководства реализации своего языка программирования на JavaScript — PL Tutorial.\nОт переводчика\nМы создадим свой язык программирования — λзык (в оригинале — λanguage). В процессе создания мы будем использовать достаточно много интересных техник, таких как рекурсивный спуск, стиль передачи управления, базовые техники оптимизации. Будет создано две версии интерпретатора — обычный и CPS-интерпретатор, транс-компилятор в JavaScript.\nАвтор оригинала — Mihai Bazon, автор известной библиотеки UglifyJS (инструмент для минимизации и форматирования JS-кода).",
        "link": "https://habr.com/ru/post/443812/"
    },
    {
        "title": "Memory and Span pt.1",
        "body": " Starting from .NET Core 2.0 and .NET Framework 4.5 we can use new data types: Span and Memory. To use them, you just need to install the System.Memory nuget package:\nPM> Install-Package System.MemoryThese data types are notable because the CLR team has done a great job to implement their special support inside the code of .NET Core 2.1+ JIT compiler by embedding these data types right into the core. What kind of data types are these and why are they worth a whole chapter?\nIf we talk about problems that made these types appear, I should name three of them. The first one is unmanaged code.\nBoth the language and the platform have existed for many years along with means to work with unmanaged code. So, why release another API to work with unmanaged code if the former basically existed for many years? To answer this question, we should understand what we lacked before.\nThis chapter was translated from Russian jointly by author and by professional translators. You can help us with translation from Russian or English into any other language, primarily into Chinese or German. \n\nAlso, if you want thank us, the best way you can do that is to give us a star on github or to fork repository  github/sidristij/dotnetbook.\n",
        "link": "https://habr.com/ru/company/clrium/blog/443974/"
    },
    {
        "title": "Визуализация времени возрождения Рошана",
        "body": "В данной статье рассматривается перехват функций графического API на примере DirectX 9 под x64 применительно к игре Dota 2.\n\nБудет подробно рассказано, как внедриться в процесс игры, как изменить поток выполнения, приведено краткое описание внедряемой логики. В конце поговорим о других возможностях для отрисовки, которые предоставляет движок.\n\n\n\nDisclaimer: Автор не несет ответственности за применение вами знаний полученных в данной статье или ущерб в результате их использования. Вся информация здесь изложена только в познавательных целях. Особенно для компаний разрабатывающих MOBA, чтобы помочь им бороться с читерами. И, естественно, автор статьи ботовод, читер и всегда им был. ",
        "link": "https://habr.com/ru/post/446516/"
    },
    {
        "title": "TypedAPI: клиент-сервер для TypeScript",
        "body": "\n\nПредлагаю вашему вниманию TypedAPI: библиотеку API клиента-сервера для проектов, в которых фронт и бэк написаны на TypeScript. Акцент делается на максимальной простоте использования. Суть такая: вы пишете API как обычный TypeScript класс с некоторыми ограничениями, потом автоматом из класса строится интерфейс, которым будет пользоваться клиентское приложение. Также генерируется некоторая служебная информация. Остается только настроить коннекторы (доступны HTTP и WebSocket). Валидацию, хранение подключений, и др. берет на себя TypedAPI. Есть поддержка событий.",
        "link": "https://habr.com/ru/post/447052/"
    },
    {
        "title": "EFORTH для МК-161: Структуры данных",
        "body": "Эта статья — окончание цикла статей про eForth на программируемом калькуляторе. Начало здесь. \n\nКоманды входного языка «Электроники МК-161» занимают только половину файла eForth0.mkl. Вторую половину занимают таблицы, разработать которые был не меньший труд, чем написать алгоритмическую часть транслятора. Попробуем разобраться, как эти таблицы используются.\n",
        "link": "https://habr.com/ru/post/452572/"
    },
    {
        "title": "Язык REXX, к 40 летию появления",
        "body": "REXX — довольно древний, передовой для своего времени язык. Он появился, согласно википедии, в 1979 году, то есть ему недавно исполнилось 40 лет. Не самый конечно старинный язык, но возраст достойный.\n\nRexx это аббревиатура, означает она Restructured Extended Executor, что вероятно отсылает нас к его предкам EXEC/EXEC2. Я с ним познакомился в операционной системе VM/SP 3, где он пришел на замену именно этим скриптовым языкам. Потом он был популярен в OS/2, использовался во многих других ОС, было создано множество реализаций и производных диалектов. \n\n\nЕму не слишком много внимания уделялось на Хабре, постараюсь восполнить пробелы в этой статье.",
        "link": "https://habr.com/ru/post/457182/"
    },
    {
        "title": "Примеры использования некоторых новых возможностей JavaScript",
        "body": "Автор материала, перевод которого мы сегодня публикуем, говорит, что новые возможности JavaScript, которые попали в стандарт ES2019, уже официально доступны в браузерах Chrome, Firefox и Safari, а также на платформе Node.js. Если нужно поддерживать устаревшие браузеры, то воспользоваться новшествами можно, транспилируя JS-код с помощью Babel. Здесь мы рассмотрим примеры использования некоторых новых возможностей JS.\n\n",
        "link": "https://habr.com/ru/company/ruvds/blog/464295/"
    },
    {
        "title": "Секционирование в SQL Server",
        "body": "Секционирование («партицирование») в SQL Server, при кажущейся простоте («да чего там – размазываешь таблицу и индексы по файловым группам, получаешь профит в администрировании и производительности») – достаточно обширная тема. Ниже я попробую описать как создать и применить функцию и схему секционирования и с какими проблемами можно столкнуться. О преимуществах я говорить не буду, кроме одного — переключение секций, когда вы моментально убираете из таблицы огромный набор данных, либо наоборот — моментально загружаете в таблицу не менее огромный набор.",
        "link": "https://habr.com/ru/post/464665/"
    },
    {
        "title": "Let's Encrypt обслуживает почти 30% доменов",
        "body": "По-прежнему в ходу RC4/3DES/TLS 1.0 и сертификаты на сотни лет. Анализ сотен миллионов SSL-рукопожатий\nЕсли посмотреть на набор данных с 350 млн SSL-соединений, сразу возникает несколько вопросов:\n\n\nкто выдал эти сертификаты\n\nкакая там криптография\n\nкаково их время жизни\n",
        "link": "https://habr.com/ru/post/466701/"
    },
    {
        "title": "Celery taskcls: новый декоратор, новые возможности",
        "body": "Привет, Хабр! Я расскажу тебе историю своего профессионального подгорания.\nТак вышло, что я терпеть не могу рутинных однообразных действий. У меня за плечами несколько проектов, использующих Celery. Каждый раз, когда задача становится сложнее вывода 2 + 2 = 5, шаблон решения сводится к созданию класса, выполняющего задачу, и функции-стартера, с которой умеет работать Celery — бойлерплейта. В этой статье я расскажу, как я боролся с бойлерплейтом, и что из этого вышло.\n",
        "link": "https://habr.com/ru/post/470547/"
    },
    {
        "title": "Создание собственных синтаксических конструкций для JavaScript с использованием Babel. Часть 1",
        "body": "Сегодня мы публикуем первую часть перевода материала, который посвящён созданию собственных синтаксических конструкций для JavaScript с использованием Babel.\n\n",
        "link": "https://habr.com/ru/company/ruvds/blog/470876/"
    },
    {
        "title": "Работа с библиотекой Newtonsoft.Json на реальном примере. Часть 2",
        "body": "В первой части статьи был рассмотрен механизм парсинга объектов JSON с динамически изменяющейся структурой. Данные объекты приводились к типам пространства имен newtonsoft.json.linq, и затем преобразовывались в структуры языка C#. В комментариях к первой части было много критики, по большей части обоснованной. Во второй части я постараюсь учесть все замечания и пожелания.\n\n",
        "link": "https://habr.com/ru/post/482042/"
    },
    {
        "title": "Как я делал парсинг расписания",
        "body": "Привет Habr!\n\nДорогой читатель! Если тебя интересует парсинг html и разработка под Android, то эта статья для тебя. Надеюсь ты найдешь в ней много интересного и полезного. В ней я хочу поделиться своим опытом в данной сфере.\n\nОписание проблемы\nНемного обо мне. Я студент третьего курса ИТА ЮФУ. Также как и всем студентам, мне нужно каждый день смотреть расписание занятий. Причём мне нужно знать расписание не только на следующий день, но и на одну-две недели вперёд.\n\nКазалось бы, почему нельзя просто сохранить расписание и пользоваться им? К сожалению, есть ряд причин, которые этому препятствуют, а именно:\n\n\nРасписание на одну неделю может сильно отличаться от расписания на другую \nРасписание не постоянно и может меняться \n\nКонечно, есть сайт с расписанием, но он не очень удобен, так как на нём выводится просто сырая таблица с расписанием на 20 недель. Студенту приходится листать большую страницу, в поисках расписания на нужный день. Кроме того, в оффлайн режиме расписание становится недоступным.\nЯ решил сделать небольшое приложение, которое могло бы парсить сайт с расписанием моего института, и обладало бы следующим набором плюшек:\n\n\nОтображение: номера текущей недели, даты, дня недели и расписания на этот день \nВозможность перелистывать расписание кнопками «назад» и «далее» \nПри отсутствии интернета показывать последнюю загруженную оффлайн версию расписания \n",
        "link": "https://habr.com/ru/post/483284/"
    },
    {
        "title": "Как я свой хобби-проект переносил на k8s",
        "body": "\n\nВ этой статье я хотел бы рассказать о своем хобби-проекте поиска и классификации объявлений о сдаче квартир из социальной сети ВКонтакте и опыте его переезда на k8s.",
        "link": "https://habr.com/ru/post/484528/"
    },
    {
        "title": "7 рекомендаций по повышению надёжности JavaScript-кода",
        "body": "Автор статьи, перевод которой мы сегодня публикуем, решил поделиться с читателями семью рекомендациями по JavaScript. Эти рекомендации, как хочется надеяться автору, помогут писать более надёжные программы.\n\n",
        "link": "https://habr.com/ru/company/ruvds/blog/487682/"
    },
    {
        "title": "Прототип многопользовательской игры за 3 вечера?",
        "body": "И снова здравствуйте! Часто ли вам в голову приходили идеи проектов, которые буквально мешали вам спать? То чувство, когда ты волнуешься, переживаешь и не можешь нормально работать над другими вещами. У меня такое бывает несколько раз в год. Какие-то идеи пропадают сами собой после углубления в тему и понимания, что извлечь пользу из такого начинания будет крайне сложно. Но есть такие идеи, развивая которые даже пару часов, захватывают меня настолько, что аж кушать не могу. Этот пост о том, как мне удалось воплотить одну из таких идей за пару вечеров после работы и не помереть с голоду. А ведь сама идея изначально звучало довольно амбициозно — PvP игра, в которой игроки соревнуются друг с другом, отвечая на вопросы.\n",
        "link": "https://habr.com/ru/post/488152/"
    },
    {
        "title": "Подключаем производственный календарь в Zabbix",
        "body": "Как мы все знаем, рабочий процесс предприятия, в соответствии с официальными государственными и международными праздниками, зачастую требует изменения производственного процесса в части сдвига или замены рабочих и нерабочих дней. Во множестве организаций существуют внутренние производственные календари, на расписании которых работают технологические и бизнес-процессы. Системы мониторинга работающие автономно, довольно часто настроены на мониторинг бизнес-процессов в рамках обычной деятельности предприятия и имеют жёсткое фиксированное расписание по контролю информационных потоков и данных, сопровождающих бизнес процессы. В моменты изменения ежедневного рабочего расписания, администраторам требуются ручные действия по изменению логики мониторинга. Как заставить Zabbix использовать производственный календарь? Рассмотрим несколько вариантов поподробнее.",
        "link": "https://habr.com/ru/post/488504/"
    },
    {
        "title": "Создание Python-обвязки для библиотек, написанных на C/C++, с помощью SIP. Часть 2",
        "body": "В первой части статьи мы рассмотрели основы работы с утилитой SIP, предназначенной для создания Python-обвязок (Python bindings) для библиотек, написанных на языках C и C++. Мы рассмотрели основные файлы, которые нужно создать для работы с SIP и начали рассматривать директивы и аннотации. До сих пор мы делали обвязку для простой библиотеки, написанной на языке C. В этой части мы разберемся, как делать обвязку для библиотеки на языке C++, которая содержит классы. На примере этой библиотеки мы посмотрим, какие приемы могут быть полезны при работе с объектно-ориентированной библиотекой, а заодно разберемся с новыми для нас директивами и аннотациями.",
        "link": "https://habr.com/ru/post/495636/"
    },
    {
        "title": "Расширяем возможности процедурных макросов с помощью WASM",
        "body": "В рамках продолжения своих исследований различных аспектов процедурных макросов хочу поделиться подходом к расширению их возможностей. Напомню, что процедурные макросы позволяют добавить в язык элемент метапрограммирования и тем самым существенно упростить рутинные операции, такие как сериализация или обработка запросов. По своей сути макросы являются плагинами к компилятору, которые компилируются до сборки крейта, в котором они используются. У таких макросов есть некоторые существенные недостатки.\n\nСложность с поддержкой таких макросов в IDE. По сути дела нужно как-то научить анализатор кода самостоятельно компилировать, загружать и исполнять эти самые макросы с учетом всех особенностей. Это весьма нетривиальная задача.\nТак как макросы самодостаточные и ничего не знают друг о друге, то нет никакой возможности делать композицию макросов, что иногда могло бы быть полезным.\n",
        "link": "https://habr.com/ru/post/497916/"
    },
    {
        "title": "Синтаксические вкусности Julia",
        "body": "В этой статье я хочу рассказать про вкусные и полезные синтаксические плюшки Julia, которые должны подсластить горькую долю программиста.\nПоехали!\n",
        "link": "https://habr.com/ru/post/502428/"
    },
    {
        "title": "Типобезопасные матрицы на Haskell",
        "body": "Типобезопасные матрицы — извечная тема. О нужности их спорят, а для реализации списков с длинной на уровне типов пишут целые языки. Мне показалось странным, что на Haskell до сих пор нет ни одного варианта, который удовлетворял бы вменяемым критериям удобства и безопасности. Есть какие-то причины отсутствия готовых библиотек или они просто не_нужны? Давайте разбираться.\nВерный способ понять, почему чего-то (что непременно должно быть!) нет — это попробовать сделать это самому. Попробуем..",
        "link": "https://habr.com/ru/post/515442/"
    },
    {
        "title": "Продвинутое велосипедостроение или клиент-серверное приложение на базе C# .Net framework",
        "body": "Вступление\nВсё началось с того, что коллега предложил мне сделать небольшой веб сервис. Это должно было стать чем то вроде тиндера, но для IT тусовки. Функционал донельзя прост, регистрируешься, заполняешь профиль и переходишь к основной сути, а именно поиску собеседника и расширению своих связей и получению новых знакомств.\n",
        "link": "https://habr.com/ru/post/517670/"
    },
    {
        "title": "Aspect-Oriented Programming (AOP) by source-level weaving",
        "body": "\n\nAspect-oriented programming is a very appealing concept for simplifying your codebase, creating clean code, improving modularity, structure of code and minimizing copy-paste errors.\n\nToday, in most cases, weaving aspect's advices is implemented at the bytecode level, i.e. after compilation, a certain tool «weave» an additional byte code with the support of the required logic.\n\nOur approach (as well as the approach of some other tools) is modifying the source code to implement aspect logic. With introduction of the .NET Compiler Platform (aka Roslyn), it is quite easy to achieve this goal, and the result gives certain advantages over the modification of the byte code itself.",
        "link": "https://habr.com/ru/post/521232/"
    },
    {
        "title": "ZoomX. Меняем правила шаблонизации в MODX Revolution",
        "body": "Привет, друзья! Хорошая новость для модыксеров — компонент, о котором мы много говорили в сообществе, вышел. Возможно не все в курсе о чём речь. Давайте я расскажу поподробнее. \n\nЧто такое ZoomX\nЗадача, которую позволяет решать данный компонент — максимально полный отказ от встроенного шаблонизатора MODX. Таким образом, мы выбрасываем многократный парсинг контента, элементы, хранящиеся в БД, плейсхолдеры с точками и плюсами и добавляем любой современный быстрый мощный PHP шаблонизатор. Стандартные шаблоны из БД теперь используются только для привязки TV-шек к ресурсам. ",
        "link": "https://habr.com/ru/post/525158/"
    },
    {
        "title": "Роутинг и рендеринг страниц на стороне клиента с помощью History API и динамического импорта",
        "body": "\n\nДоброго времени суток, друзья!\n\nВ данной статье я хочу показать вам некоторые возможности современного JavaScript и интерфейсов, предоставляемых браузером, связанные с маршрутизацией и отрисовкой страниц без обращения к серверу.\n\nИсходный код на GitHub.\n\nПоиграть к кодом можно на CodeSandbox.\n\nПрежде чем приступить к реализации приложения, хотелось бы отметить следующее:\n\n\nМы реализуем один из самых простых вариантов клиентской маршрутизации и рендеринга, парочку более сложных и универсальных (если угодно, масштабируемых) способов можно найти здесь\nОбойтись совсем без сервера не получится. Мы будет манипулировать историей текущей сессии браузера: при ручной перезагрузке страницы браузер отдает предпочтение серверу, т.е. пытается получить несуществующую страницу, что приводит к печальным последствиям в виде невозможности установить соединение (мои попытки обмануть браузер с помощью сервис-воркера, т.е. проксировать отправляемые им запросы, не увенчались успехом). Единственной задачей нашего примитивного сервера будет ответ в виде index.html на любой запрос. Это позволит браузеру перейти к выполнению клиенского скрипта\nВезде, где это возможно и уместно, мы будет использовать динамический импорт. Он позволяет загружать только запрашиваемые ресурсы (раньше это можно было реализовать только посредством разделения кода на части (chunks) с помощью сборщиков модулей типа Webpack), что хорошо сказывается на производительности. Использование динамического импорта сделает почти весь наш код асинхронным, что, в целом, тоже неплохо, поскольку позволяет избежать блокировки потока выполнения программы\n\nИтак, поехали.",
        "link": "https://habr.com/ru/post/530746/"
    },
    {
        "title": "Превращаем рекурсию в цикл",
        "body": "Максим написал рекурсивный алгоритм, и столкнулся со Stack Overflow exception.\nЗачем Максим это сделал?\nПотому что он любит короткие и элегантные на его взгляд решения.\nОн не наслаждается, когда пишет так:\nfunction factorial(n) {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res *= i;\n  }\n  return res;\n}\nОн хочет писать вот так:\nconst factorial = (n) => (n > 1 ? n * factorial(n - 1) : 1);\nНо когда он запускает подобные этому рекурсивные алгоритмы, бывает так, что он видит это:\n",
        "link": "https://habr.com/ru/post/533034/"
    },
    {
        "title": "Передача даты с формы в базу",
        "body": "ДаноAngular, PrimeNG, Spring Boot, JDBC, PostgreSQLНадоПередавать дату с формы в базу и обратно.",
        "link": "https://habr.com/ru/post/536016/"
    },
    {
        "title": "Погружаемся в логово ржавчины. Как работает компилятор rust",
        "body": "В моей предыдущей статье о rust я попытался рассказать об истории языка, и показать откуда он пришёл. В статье было сделано множество упрощений. Просто нереальное множество. Народу не понравилось. Но в опросе, в конце статьи вы сказали, что надо бы показать кишки компилятора. Ну что же, под катом вы найдёте разбор исходных кодов компилятора rust. Мы проследим путь программы, начиная из исходного файла, прямиком к бинарнику.",
        "link": "https://habr.com/ru/post/539796/"
    },
    {
        "title": "Автоматизация сбора данных по рекламным кампаниям: сделай жизнь проще",
        "body": "Я 5 лет в интернет-маркетинге, и львиную долю своего времени трачу на сбор отчетов по рекламным размещениям. По моим наблюдениям, маркетологи не часто задаются вопросом, как облегчить сбор данных по рекламным кампаниям для аналитика или (сейчас скажу страшную вещь), как можно собирать данные самостоятельно и анализировать собственный трафик самому. Хочу поделиться best-practices и дать несколько готовых наработок, которые пригодятся и маркетологам, и состоявшимся маркетинговым аналитикам.Этот лонгрид целиком и полностью посвящён вопросам, которыми занимается web-маркетинг и основан на моем личном опыте работы с ребятами из маркетинга Лиги Ставок. (Про мобильную рекламу, mobile-marketing, как мы строили Buying Dashboard и клиентскую аналитику еще в mobio.ru я могу говорить бесконечно и, может быть, напишу отдельно.)1)    Важность разметкиКраеугольный камень всей аналитики, который может увеличивать время сбора отчета с 15 минут до 15 часов и больше — разметка рекламных кампаний. Интернет-маркетинг работает по разным моделям (CPM, CPC для медийки, комиссия, RevShare и CPA для перформанс-маркетинга). Выделяю два основных момента: источник трафика и трекер размещения. Дьявол, как известно, кроется в деталях - очень много маленьких и важных моментов, которые бы хотелось обсудить. Но обо всем по порядку:",
        "link": "https://habr.com/ru/company/ligastavok/blog/540778/"
    },
    {
        "title": "Как убедить гейм-дизайнера запустить тесты?",
        "body": "Полагаю, ни для кого не секрет, что в разработке игр участвует очень много специалистов, а не только программисты. Выпуск игры невозможен без художников, моделлеров, VFX-художников, и, конечно, гейм-дизайнеров. Кстати о последних. Мы их очень любим, но они часто ломают ресурсы. Не то чтобы они хотят это делать, но из-за особенностей работы им нужно делать много мелких правок, и шанс накосячить выше. И ведь множество ошибок — это тривиальные опечатки, недописанная или, наоборот, лишняя удалённая строка. Всё это можно исправить не отходя от кассы. Но как это сделать? Прописать в регламенте, что перед коммитом обязательно запустить %my_folder%/scripts/mega_checker? Мы проверяли — не работает. Человек — существо сложное и забывчивое. А проверять ресурсы хочется.\n\nНо мы нашли выход — теперь нельзя закоммитить в репозиторий без тестов. По крайней мере незаметно и безнаказанно.\n\n",
        "link": "https://habr.com/ru/company/playrix/blog/545726/"
    },
    {
        "title": "Создатель динамических обоев на языке Vala",
        "body": "Привет! Для создания динамических обоев в дистрибутивах GNU/Linux в большинстве случаев применяются специальные xml-файлы. Я решил создать программу, которая генерирует такой файл. Конечно, есть готовые скрипты  для этого или даже можно вручную создать такой файл, но куда удобнее работать в программе с графическим интерфейсом. Здесь я тоже не первый, так как такие программы уже имеются в репозиториях, но почему бы не написать свой вариант?",
        "link": "https://habr.com/ru/company/itsoft/blog/547072/"
    },
    {
        "title": "Новый sd-bus API от systemd",
        "body": "В новом выпуске systemd v221 мы представляем API sd-bus, поставляемый со стабильной версией systemd. sd-bus - это наша минимальная библиотека D-Bus IPC на языке программирования Си, поддерживающая в качестве бэкэндов как классическую D-Bus на основе сокетов, так и kdbus. Библиотека была частью systemd в течение некоторого времени, но использовалась только внутри проекта, поскольку мы хотели свободно вносить изменения в API, не затрагивая внешних пользователей. Однако теперь, начиная с v221, мы уверены, что сделали стабильный API.В этом посте я предоставляю обзор библиотеки sd-bus, краткое повторение основ D-Bus и его концепций, а также несколько простых примеров того, как писать клиенты и сервисы D-Bus с её помощью.",
        "link": "https://habr.com/ru/post/551532/"
    },
    {
        "title": "Работа с датой и часовыми поясами в JavaScript",
        "body": "Однажды каждый разработчик коснется работы с часовыми поясами и будет фрустрирован необходимостью съесть слона для реализации, казалось бы, минорной задачи. Оказавшись в такой ситуации я нашел эту статью, которая дала ответы на все мои вопросы.В моем случае она была столь полезной, что я решил перевести ее, чтобы запомнить получше и дебютировать с переводом на Хабре.",
        "link": "https://habr.com/ru/post/551830/"
    },
    {
        "title": "Only 39% of the functions in node_modules are unique in the default Angular project",
        "body": "Only 39% of the functions in node_modules are unique in the default Angular project created by ng new my-app.\nI think the developers of open source solve problems in the same ways, because they study the same algorithms. Well, why be honest, they copy the popular solutions from StackOverflow also.\n",
        "link": "https://habr.com/ru/post/554334/"
    },
    {
        "title": "Фреймворк Webix Jet глазами новичка. Часть 2. Взаимодействие с интерфейсом",
        "body": "В предыдущей статье “Фреймворк Webix Jet глазами новичка. Часть 1. Композиция и навигация” я подробно рассказал вам как создать интерфейс приложения с помощью UI компонентов Webix и распределить полномочия между view-модулями и логикой внутри архитектуры Jet фреймворка. В этой статье я продолжу свой рассказ о Jet фреймворке и библиотеке Webix, и реализую следующее:добавлю в уже известное вам приложение немного интерактиваорганизую серверные модели с разными подходами к загрузке и сохранению данных.С кодом готового приложения можно ознакомиться тут.",
        "link": "https://habr.com/ru/post/555616/"
    },
    {
        "title": "Худшие места в C++ для написания кода",
        "body": "Любой язык программирования, а особенно C++, предоставляет всевозможные средства для написания кода. В начале карьеры любому программисту кажется, что для того, чтобы мастерски овладеть языком, надо использовать по максимуму его возможностей. Но так ли это? Может, лучше наоборот, ограничиться необходимым минимумом средств, и не использовать сложные, подверженные ошибками конструкции? Давайте посмотрим на те возможности C++, где код нужно стараться не писать вовсе.",
        "link": "https://habr.com/ru/post/555664/"
    },
    {
        "title": "Mein Konfig: экскурсия по dotfiles (часть 2)",
        "body": "Статья-продолжение первой части, в которой не уместилось всё что хотел описать. Напомню, что в ней я начал описывать своё рабочее окружение и dotfiles.\n\n",
        "link": "https://habr.com/ru/post/563428/"
    },
    {
        "title": "Разработка REST-серверов на Go. Часть 6: аутентификация",
        "body": "Перед вами — шестой материал из серии статей, посвящённых разработке REST-серверов на Go. Наша сегодняшняя тема — безопасность, а именно — аутентификация. Если бы сервер, разработанный в предыдущих материалах, был бы развёрнут, и к нему мог бы обратиться кто угодно, то у любого, имеющего выход в интернет, был бы полный доступ к его API. Хотя некоторым REST-серверам это вполне подходит, такой сценарий работы с сервером желателен далеко не всегда. Обычно как минимум часть API должна быть защищена таким образом, чтобы доступ к ней могли бы получить лишь аутентифицированные пользователи.\n\n\n\n                        Предыдущие части:\n                        Разработка REST-серверов на Go. Часть 1: стандартная библиотека\nРазработка REST-серверов на Go. Часть 2: применение маршрутизатора gorilla/mux\nРазработка REST-серверов на Go. Часть 3: использование веб-фреймворка Gin\nРазработка REST-серверов на Go. Часть 4: применение OpenAPI и Swagger\nРазработка REST-серверов на Go. Часть 5: Middleware\nВы тут  — Разработка REST-серверов на Go. Часть 6: аутентификация\n\n                    ",
        "link": "https://habr.com/ru/company/ruvds/blog/567280/"
    },
    {
        "title": "Data Science на JavaScript без Python",
        "body": "Мы уже писали о том, как запустить Python в браузере, а сегодня к старту флагманского курса по Data Science расскажем, как привычные для Python задачи решаются на JavaScript. Если вы знакомы только с JS и хотите попробовать Data Science, не покидая зону комфорта, (или, наоборот, хотите познакомиться с JS), просто хочется необычных экспериментов или нужно интегрировать небольшую управляемую визуализацию о статистике на сайт, читайте подробности под катом.Автор, переводом статьи которого о множестве Мандельброта мы уже делились в блоге, также включил  ссылку на репозиторий polyglot_fit с решением задачи из сегодняшней статьи на других языках.",
        "link": "https://habr.com/ru/company/skillfactory/blog/568292/"
    },
    {
        "title": "Что нового в .NET 6?",
        "body": "На момент написания этих строк вышло уже семь превью-версий .NET 6. Дальше — только релиз-кандидаты. Все основные фичи уже добавлены во фреймворк, идёт отладка, тестирование и оптимизация. Ожидать чего-то кардинально нового в RC-версиях, пожалуй, уже не стоит. Пришла пора рассмотреть .NET 6 поближе.\nПресс-релиз для каждой версии содержит огромное количество восхвалений и убеждений в том, что теперь-то всем станет ещё лучше, и как мы вообще жили раньше — уму непостижимо. Где-то авторы не врут, где-то не договаривают, где-то преувеличивают. Пришлось тщательно прочитать все семь пресс-релизов, изучить массу смежных материалов и просмотреть огромное количество тикетов на Гитхабе. Всё для того, чтобы понять, чем они там занимаются и что выкатывают нам посмотреть.\nПоговорим об этом.",
        "link": "https://habr.com/ru/post/573434/"
    },
    {
        "title": "Как работать с Tarantool на Golang вместо Lua",
        "body": "\nЯдро Tarantool-а написано на C, а вся бизнес-логика создаётся на Lua. Это не самый сложный язык, но и не самый популярный. Поэтому сегодня я расскажу, как начать работать с Tarantool, написав всего три строчки кода на Lua. А всё остальное приложение написано на Golang. Чтобы было еще интереснее, я даю альтернативный вариант на Python. Что за проект? Делаем приложение, которое позволяет ставить метки на карте: дом, работа, первое свидание, первый Hello World, первый \"too long wal write\" Tarantool.\nПоехали!",
        "link": "https://habr.com/ru/company/vk/blog/574542/"
    },
    {
        "title": "Эволюция Docker. Часть 2.1",
        "body": "Данная статья является второй, в цикле по истории развития и изучению исходного кода Docker. В ней мы разберем, что представлял собой первый публичный релиз от 23 марта 2013 года. Изначально я планировал уложить весь материал, посвященный этой версии, в одной статье, но в процессе стало ясно, что она получается слишком большой, поэтому я решил разделить ее на две. В текущей части (2.1) будет рассмотрена лишь общая структура и начальный код, а последующая часть (2.2) будет посвящена принципу работы и коду конкретных команд. Некоторые части кода уже были разобраны в первой статье, так что для полноты восприятия, рекомендую начать с нее, а также пятиминутной презентации The Future of Linux Containers, на которой и была представлена первая версия Docker.",
        "link": "https://habr.com/ru/post/574750/"
    },
    {
        "title": "Прокачка статического анализа проектов на Unreal Engine 4 и проверка автосимулятора Carla",
        "body": "Одним из механизмов статического анализа является аннотирование методов популярных библиотек. Аннотации позволяют обладать большей информацией при диагностировании ошибок в коде. Впечатляющий свободный проект на С++ CARLA помог нам внедрить этот механизм. Впоследствии симулятор стал целью для проверки улучшенным статанализатором PVS-Studio.\n",
        "link": "https://habr.com/ru/company/pvs-studio/blog/590305/"
    },
    {
        "title": "Книга «Black Hat Python: программирование для хакеров и пентестеров, 2-е изд»",
        "body": " Привет, Хаброжители! Когда речь идет о создании мощных и эффективных хакерских инструментов, большинство аналитиков по безопасности выбирают Python. Во втором издании бестселлера Black Hat Python вы исследуете темную сторону возможностей Python — все от написания сетевых снифферов, похищения учетных данных электронной почты и брутфорса каталогов до разработки мутационных фаззеров, анализа виртуальных машин и создания скрытых троянов. \n\nС тех пор как я написал предисловие к первому чрезвычайно успешному изданию Black Hat Python, прошло шесть лет. За это время в мире многое изменилось, но я по-прежнему пишу чертовски много кода на Python. В сфере компьютерной безопасности все еще встречаются инструменты, написанные на разных языках, в зависимости от назначения. Эксплойты для ядра создают на C, средства фаззинга для веб-страниц — на JavaScript, а прокси-серверы могут быть написаны на таком новомодном языке, как Rust. Однако Python остается главной рабочей лошадкой в этой отрасли. Я считаю, что это все еще самый простой язык для начинающих и лучший выбор для быстрой разработки инструментов, решающих сложные задачи простым способом, учитывая большое количество доступных библиотек. Большая часть средств компьютерной безопасности и эксплойтов, как и раньше, написана на Python. Это касается фреймворков создания эксплойтов наподобие CANVAS, классических фаззеров, таких как Sulley, и всего остального.",
        "link": "https://habr.com/ru/company/piter/blog/592287/"
    },
    {
        "title": "String.format() в 3 раза быстрее в Java 17",
        "body": "Одним из самых удобных способов построения сложных строк является String.format(). Раньше он был чрезмерно медленным, но в Java 17 стал примерно в 3 раза быстрее. В данном выпуске мы выясним, в чем разница и где это вам поможет. А также когда следует использовать format() вместо обычного сложения строк с помощью +.",
        "link": "https://habr.com/ru/company/otus/blog/592585/"
    },
    {
        "title": "02. Я уже даже не вижу код. Я вижу блондинку, брюнетку и рыжую",
        "body": "Предыдущие статьи о реверсе данных автомобильных навигаторов Siemens VDO Dayton CARMiNРеверс черного тессеракта01 Сшей красное с красным, желтое с желтым, белое с белым. Наверняка будет хорошо",
        "link": "https://habr.com/ru/post/598673/"
    },
    {
        "title": "Почему я против enum",
        "body": "Меня зовут Саша Терентьев, я из команды ленты ВКонтакте. В этой статье поделюсь мыслями о проблемах кода, где используются enum и сопоставления типов. Часто встречаю такой код в проектах, ресурсах, примерах. Мы обсуждали это с коллегами на внутреннем событии, и из моего доклада выросла эта статья.Букв будет много. Но, думаю, материал пригодится широкому кругу разработчиков — и не только iOS. Примеры основаны на псевдо-Swift и написаны по мотивам использования UIKit. Но могут пригодиться для работы с разными платформами и в любой области, где возникают сопоставления с образцом, приведения типов, переборы множеств типов.",
        "link": "https://habr.com/ru/company/vk/blog/646789/"
    },
    {
        "title": "Vulnerabilities due to XML files processing: XXE in C# applications in theory and in practice",
        "body": "How can simple XML files processing turn into a security weakness? How can a blog deployed on your machine cause a data leak? Today we'll find answers to these questions, learn what XXE is and how it looks like.\n",
        "link": "https://habr.com/ru/company/pvs-studio/blog/650933/"
    },
    {
        "title": "Уязвимости из-за обработки XML-файлов: XXE в C# приложениях в теории и на практике",
        "body": "Как простая обработка XML-файлов может стать дефектом безопасности? Каким образом блог, развёрнутый на вашей машине, может стать причиной утечки данных? Сегодня мы ответим на эти вопросы и разберём, что такое XXE и как эта уязвимость выглядит в теории и на практике.\n",
        "link": "https://habr.com/ru/company/pvs-studio/blog/650935/"
    },
    {
        "title": "Why does my app send network requests when I open an SVG file?",
        "body": "\nYou decided to make an app that works with SVG. Encouraged by the enthusiasm, you collected libraries and successfully made the application. But suddenly you find that the app is sending strange network requests. And data is leaking from the host-machine. How so?",
        "link": "https://habr.com/ru/company/pvs-studio/blog/652253/"
    },
    {
        "title": "Почему моё приложение при открытии SVG-файла отправляет сетевые запросы?",
        "body": "\nВы решили сделать приложение, работающее с SVG. Набрали библиотек, запаслись энтузиазмом, и в итоге всё удалось. Но вот незадача! Внезапно вы обнаруживаете, что приложение отправляет странные сетевые запросы. Кроме того, с хост-машины утекают данные. Как же так?",
        "link": "https://habr.com/ru/company/pvs-studio/blog/652255/"
    },
    {
        "title": "GraphQL-gRPC API Gateway на Java",
        "body": "В данной статье я хочу рассказать про процесс создания концепта API Gateway для обеспечения взаимодействия фронтенда, использующего GraphQL, и бэкенда, использующего gRPC, на Java с использованием фреймворка Quarkus.",
        "link": "https://habr.com/ru/post/662594/"
    },
    {
        "title": "Интеллектуальный брутфорс: пишем головоломку и солвер для неё",
        "body": "\nНебольшое предисловие\nВ колледже я много играл в головоломки. В статье под головоломками я буду подразумевать очень узкое подмножество таких игр. Вот некоторые из примеров:\n\n\nStephen's Sausage Roll\nEnglish Country Tune\nSokobond\n\nТакже мне посчастливилось изучать структуры данных в Политехническом институте Ренсселера, где в то время студенты профессора Катлера (привет, Барб!) ежегодно участвовали в соревновании по написанию солвера головоломок. Каждый год игра менялась, и в мой год это была Ricochet Robots, которая по сути является головоломкой со скольжением по льду для нескольких игроков. Мне очень понравилось это задание (и я победил в соревновании!), после чего я продолжил участвовать в соревнованиях в качестве ассистента преподавателя.\n\nЦель этой задачи заключалась в том, чтобы познакомить всех с рекурсией и поиском в глубину. Программе передавались исходное состояние игры, а также максимальная глубина рекурсии. Необходимо было вернуть или кратчайшее решение или все возможные решения минимальной длины. В соревнованиях игрокам могли или сообщать, или не сообщать предел глубины; кроме того, возможны были головоломки, не имеющие решения. Я многому научился и получил кучу удовольствия, так что, возможно, вам это тоже понравится.",
        "link": "https://habr.com/ru/company/beeline/blog/663852/"
    },
    {
        "title": "Система сбора распределенной телеметрии на Cassandra и Kotlin Spring",
        "body": "Сердцем любого backend являются данные. Существует два сценария использования данных. В одном из них данные изменяются редко, но при этом активно используются в сыром или агрегированном виде и применяются для целей аналитики в реальном времени (такие системы принято называть OLAP). В других системах важно обеспечить сохранение с высокой скоростью большого количество неструктурированных или полуструктурированных объектов, поступающих от устройств Интернета вещей, из источников произвольных событий, наблюдений за активностью пользователя (такие системы называются OLTP - Online Transaction Processing, ориентированные на большое количество транзакций с минимальной задержкой обработки). Для таких систем важно обеспечить надежность хранения данных, поддержку распределенного хранения на нескольких серверах и/или дата-центрах и сохранение консистентности распределенного хранилища. При этом сами объекты могут отличаться от привычной реляционной модели данных и представляться, например, в виде json-документов с произвольной схемой, объектов с полями со множественными значениями или графов. Разумеется это приводит к необходимости изучения новых подходов к поиску и добавлению данных, использованию специальных драйверов. Но что если соединить распределенное надежное хранилище и синтаксис запросов, близкий к SQL? В этой статье мы познакомимся с проектом Apache Cassandra и обсудим на примере разработки API на Kotlin для сбора телеметрии с датчиков, расположенных по всему миру (с поддержкой отказоустойчивости и управляемой репликации между дата-центрами).",
        "link": "https://habr.com/ru/company/otus/blog/668524/"
    },
    {
        "title": "Пишем свой Credential Provider на C# для авторизации в Windows",
        "body": "Credential Provider, используется для передачи пользовательских учетных данных в стек безопасности Windows. По умолчанию в системе присутствуют поставщики для входа через пароль, PIN-код, смарт-карту и Windows Hello. Однако что делать если они нам не подходят?",
        "link": "https://habr.com/ru/post/669594/"
    },
    {
        "title": "Создай себе инструмент. Часть 1: скрипт на Dart",
        "body": "Можно легко упустить момент, когда работа с кодом становится рутинной. Логичный шаг — автоматизировать её. Стартуем серию статей о тулинге: расскажу, как начать и куда смотреть дальше.",
        "link": "https://habr.com/ru/company/surfstudio/blog/670244/"
    },
    {
        "title": "Тестирование миграции данных на python с pytest-bdd и testcontainers",
        "body": "В рамках проекта цифровой модернизации для одного из наших клиентов возникла задача миграции данных из одной модели хранения в другую. Для тестирования такого решения мы обратились к BDD практикам и виртуализации зависимостей с помощью контейнеров. В данном посте мы рассмотрим как можно организовать тестирование подобного решения с помощью pytest-bdd и testcontainers на python.",
        "link": "https://habr.com/ru/post/690216/"
    },
    {
        "title": "Пишем свой XML-парсер",
        "body": "Предыстория\nРешив запустить небольшой сервис на подаренном мне хостинге, оказалось, что там нету ни одного xml-парсера: ни SimpleXML, ни DOMXML, а только libxml и xml-rpc. Недолго думая, я решил написать свой. Мне требовался разбор не сложных rss-лент, поэтому хватило достаточно просто класса xml => array.[1]\n\nНо для интересной статьи этого было явно не достаточно, поэтому сейчас мы напишем свою замену для SimpleXML. А заодно пробежимся по многим интересным возможностям PHP 5.\n\nПостановка задачи\nДоступ к элементам у нас будет осуществляться как доступ к свойствам класса, например $xml->element, а доступ к атрибутам элемента, как к массиву, те $xml->element['attr'], также реализуем проверку на существование атрибута при помощи isset() и итерацию по элементам при помощи foreach. И так, начнем.\n",
        "link": "https://habr.com/ru/post/30353/"
    },
    {
        "title": "Вышло долгожданное обновление Velocity: шаблонить стало немного проще",
        "body": "Обзор новых возможностей шаблонного движка\nПервого декабря 2008 г. Apache объявила о выпуске новой версии давно не обновлявшегося шаблонного движка Velocity, за номером 1.6, а еще двумя неделями позже появился апдейт со свежими фиксами, Velocity Engine 1.6.1. Те, кто используют Velocity в своих проектах, будут рады узнать о новых возможностях, появившихся в новой версии. Те же, кто Velocity не используют, возможно, откроют для себя новый полезный инструмент.\n",
        "link": "https://habr.com/ru/post/47564/"
    },
    {
        "title": "Mac Maniac. DropCopy под Windows",
        "body": "Помните пост про извлечение дивайсов и носителей как в Маке? Так вот, у той милой иконки Eject появился друг — DropCopy:\n\nВступление\nКогда я работал на маках, я просто наслаждался простотой перекидывания файлов между компьютерами в сети с помощью DropCopy. Кидаешь в чёрную дыру файлы, выбираешь из выпадающего списка куда отправить, и на рабочем столе адресата появляются эти самые файлы. Класс! Но с момента моего увольнения прошло уже 2 года и некоторая ломка по макам осталась (особенно по Final Cut Pro *прослезился*). В комнате рядом сидит брат за своим компом, я за своим, есть ещё ноутбук которым пользуются все по очереди и постоянно возникает проблема, когда надо перекинуть файл с одного компа на другой. Чего только мы не вытворяли:\n\nПересылка по почте\nПо аське\nЧерез флешку\nЧерез ФТП (это самый логичный способ)\n\nСтоит отметить важный момент — Общие Документы Сети Microsoft возможно и помогли бы в данной ситуации, но они отключены давно и так основательно, что как их включить обратно я уже не знаю\\не помню\\не хочу, поэтому я начал копать в другую сторону и в итоге получилось (по-моему) гораздо лучше. Так что тем у кого данная вещь функционирует я думаю не имеет смысла читать дальше.\n",
        "link": "https://habr.com/ru/post/57139/"
    },
    {
        "title": "Opera Unite для разработчиков",
        "body": "А не написать ли нам какой-нибудь сервис под Опера Юнайт? Здесь я расскажу об особенностях программирования под новинку от Оперы на примере своего сервиса \"Stream media\". Официальная документация пока что неполная и содержит много ошибок, и в этой статье мы попытаемся их обойти.\n\nДалее, будем вникать в технологию постепенно. Желательно, чтобы Вы уже прочли мануал по созданию первого приложения, поскольку некоторые очевидные факты здесь опускаются.\n",
        "link": "https://habr.com/ru/post/66869/"
    },
    {
        "title": "Хабраподсветка или эксперименты в изолированном окружении Python",
        "body": "Протестировать свежую версию любимого фреймоврка. Запустить приложение со специфичным набором библиотек. Установить необходимые библиотеки по списку зависимостей. Как решить все эти задачи не затронув системные файлы? В этой статье речь пойдет об утилитах virutalenv и pip.\n",
        "link": "https://habr.com/ru/post/70353/"
    },
    {
        "title": ".NET 4.0: что нового в базовых классах (BCL)? Подробный обзор",
        "body": "\nVisual Studio 2010 и .NET Framework 4 Beta 2 уже доступны для загрузки. .NET 4 Beta 2 содержит некоторое количество нового функционала и улучшений в базовых классах (BCL) в дополнение к тем, которые мы представили ранее в .NET 4 Beta 1. Многие эти улучшения были произведены благодаря отзывам и рекомендациям от клиентов, полученным через Microsoft Connect.\n",
        "link": "https://habr.com/ru/post/73359/"
    },
    {
        "title": "Различия между Silverlight на Windows и Windows Phone",
        "body": "Данный топик описывает различия реализации между Silverlight 3 на Windows и Silverlight на Windows Phone.\nСоветую ознакомиться, что поддерживает Silverlight на Windows Phone, а также более детально ознакомиться с информацией о не поддерживаемых типах и членах. ",
        "link": "https://habr.com/ru/post/88182/"
    },
    {
        "title": "Пишем виджет ХабраКарма ex-CarmaWidget для Android",
        "body": "Вчера я таки обновил CarmaWidget, виджет, который отображает вашу карму на рабочем столе смартфона. Сегодня я расскажу о том, как написать виджет.\n\n\n\nПринцип таков:\n\nКласс — настройки для виджета, который запускается при добавлении последнего на рабочий стол.\nКласс — провайдер информации для виджета, в котором живут все таймеры.\nБаза данных — для хранения информации о пользователе.\nДва layout'а — для виджета и настройщика.\n\n\n",
        "link": "https://habr.com/ru/post/91815/"
    },
    {
        "title": "Секционирование. Автоматическое добавление секций",
        "body": "В версии 11g в Oracle появилась несколько новых замечательных схем секционирования — например, удобная функциональность интервального секционирования — автоматического создания секций по мере выхода range из заданных границ.\nВ версиях до 11g необходимо периодически вручную либо заранее добавлять секции, либо разбивать секцию по умолчанию. То есть постоянно необходимо отслеживать состояние таких таблиц. В данной статье я поделюсь своими решениями для автоматизации таких задач секционирования.\nСначала приведу пример для 11g:\n\ncreate table res (\n  res_id     number not null,\n  res_date  date,\n  hotel_id  number(3),\n  guest_id  number\n)\npartition by range (res_id)\ninterval (100) store in (users)\n(\n  partition p1 values less than (101)\n);\n\nЭтот скрипт создает секцию p1 для записей, значение столбца res_id которых находится в диапазоне 1-100. Когда вставляются записи со значением столбца res_id меньшим 101, они помещаются в секцию p1, а когда в новой записи значение этого столбца равно или больше 101, сервер Oracle Database 11g создает новую секцию, имя которой генерируется системой. Подробнее с этим примером и прочими новыми схемами секционирования вы можете познакомиться в переводе статьи Арупа Нанды в русском издании Oracle Magazine.\nРассмотренные ниже решения можно применить и в других СУБД, не поддерживающих автоматическое добавление секций\n",
        "link": "https://habr.com/ru/post/105759/"
    },
    {
        "title": "Реализация целочисленной арифметики на Haskell",
        "body": "Долгое время считалось, что натуральные числа, как и числа в целом, являются неопределяемыми понятиями, первичными; их можно познать только интуицией. Однако в настоящее время всем числовым множествам было дано четкое определение.\n\nНаиболее удобным способом является определение по Пеано. Однако оно определяет счетные множества, но не даёт определенного сконструированного множества. Другой подход — определить натуральное число как специальное кардинальное, а именно мощность конечного множества. Третий — нумералы Чёрча.\n",
        "link": "https://habr.com/ru/post/111063/"
    },
    {
        "title": "Войны в песочнице — Часть 2. Обход HTTPS",
        "body": "Ранее была получена возможность перехватывать весь трафик исследуемого субъекта. Однако банальный анализ логов tcpdump не даёт значимого результата, так как большинство сервисов использует шифрование с помощью SSL для передачи важных данных, в том числе паролей.\n",
        "link": "https://habr.com/ru/post/111714/"
    },
    {
        "title": "Портрет Нуба",
        "body": "Чем старше я становлюсь, тем менее важной становится запятая. Пусть читатель сам решает, где ему ставить паузы. — Elizabeth Clarkson Zwart\n\nПримерно так я комментировал свой код двадцать лет назад (внимание, чуток драмы):\n\n/*\n * Когда мы дойдем сюда, наша структура уже будет готова. \n * К тому же, мы создали достаточно большой буфер, в который \n * можно засунуть все входные данные, плюс есть немного места\n * про запас. Я не уверен, понадобится ли оно, но хуже не будет. \n * Теперь нам надо обновить счетчик, предполагая, что клиент \n * уже прочитал значение, но еще не использовал его. Сначала \n * я хотел переложить обязанность инкремента на плечи вызывающего\n * кода. С другой стороны, это означает, что инкремент нужно делать всем, \n * поэтому я решил, что будет лучше перенести его сюда. Но мы можем \n * пересмотреть это решение позже, если вдруг кому-то из внешних функций \n * захочется делать инкремент самому.\n*/\ncounter++; // инкрементировать счетчик для потребляемого значения\n\n/*\n * Теперь нужно просмотреть весь буфер с данными. Для этой \n * операции нам понадобится еще один индекс, иначе перед \n * выходом из функции мы потеряем начальное значение. \n * Я хотел назвать эту переменную ‘ref’, потому что в некотором\n * смысле мы будем обращаться с ней как со ссылкой на данные. \n * В конце концов я пришел к выводу, что самым лучшим  \n * названием для нее будет ‘pos’. Если что, я не против обсудить\n * это решение.\n*/\nchar* pos = buffer; // начинаем наш обход данных\n\n/*\nТеперь, мы...\n*/\n\nНу что, узнаете? А должны! Если быть предельно невежливым, весь код выше написал нуб. (Между прочим, если вы не знаете, кто такой нуб, значит вы — нуб).\n\n",
        "link": "https://habr.com/ru/post/127635/"
    },
    {
        "title": "Компиляция «на ходу» в эрланге",
        "body": "В некоторых случаях бывает удобно скомпилировать определенные части программы во время работы приложения. Например, в мире явы так происходит компиляция веб сервером .jsp страниц в сервлеты. Другими возможными применениями подобной техники являются разные языки шаблонов, регулярные выражения и т.д.\n\nВ эрланге транслятор встроен в библиотеку времени исполнения, и позволяет полностью управлять всеми стадиями трансляции.\n\nКак это сделать\n",
        "link": "https://habr.com/ru/post/129205/"
    },
    {
        "title": "Пишем примитивный и никому не нужный компилятор",
        "body": "Я считаю, что каждый программист должен написать свой компилятор.\n\nЯ сам долгое время считал, что создание компиляторов — это удел элиты, а простому смертному программисту не постичь этой науки. Попробую доказать, что это не так.\n\nВ посте мы рассмотрим, как можно написать свой компилятор C-подобного языка меньше чем за час, исписав всего 300 строчек кода. В качестве бонуса, сюда входит и код виртуальной машины, в байткод которой будет компилироваться исходник.\n",
        "link": "https://habr.com/ru/post/133780/"
    },
    {
        "title": "Погода для Windows Phone 7. Работа с XML",
        "body": "Об авторе: Паси Маннинен разрабатывает мобильные и веб-приложения, является Чемпионом Nokia Developer и Профессионалом Adobe Community, сертифицированным экспертом и преподавателем Adobe по Flex, Flash и Flash Mobile. Окончил магистратуру Университета Ювяскюля (одного из крупнейших вузов Финляндии) по специальностям «Прикладная математика» и «Компьютерные науки».\n\nЭта статья рассказывает, как работать с данными XML на примере приложения, отображающего прогноз погоды в любых городах мира.\n\nВступление\nВ этой статье я покажу как создать приложение для Window Phone 7, которое загружает прогноз погоды из службы World Weather Online. Вы можете почитать интересную статью по работе с Weather Online, но я хочу углубиться именно в принципы хранения избранных городов в телефоне и методику создания панорамного режима просмотра прогноза погоды для различных городов.\n\n\n\nПриложение выполнено в виде панорамы для WP7. Сначала приложение загружает сохранённый список городов и API-ключ для доступа к Weather Online из памяти устройства, после чего получает прогноз погоды для всех городов. Каждый прогноз отображается в собственном Panorama View. Пользователь же может указать ApiKey и избранные города на странице настроек.\n \nAPI-ключ для Weather Online\nВам будет нужен ваш собственный API-ключ для доступа к Weather Online. Из соответствующей статьи можно узнать, как это сделать.\n\nWindows Phone 7.1 SDK\nДля разработки приложений под устройства Windows Phone 7 нужно установить соответствующий SDK. Загрузить последнюю версию SDK для Windows Phone можно здесь.\n\n",
        "link": "https://habr.com/ru/company/microsoftlumia/blog/138325/"
    },
    {
        "title": "Переименование файлов, скачанных с rutracker.org",
        "body": "Хочу поделиться небольшим скриптом, который делает для меня простую, но весьма полезную вещь — производит групповое переименование скачанных файлов так, что файлы получают удобно читаемое имя со страницы на сайте торрент трекера.\nВ итоге вместо \"God.Bless.America.2011.HDTVRiP720.mkv\" я получаю файл с именем \"Боже, Благослови Америку God Bless America (Боб Голдтуэйт Bobcat Goldthwait) (2011) США, триллер, чёрная комедия, криминал, HDTVRip-AVC.mkv\"\nВ продолжение к теме Можно ли прибраться на компе раз и навсегда?\n",
        "link": "https://habr.com/ru/post/144938/"
    },
    {
        "title": "Статический анализ PHP-кода с помощью HipHop",
        "body": "Неожиданно не нашёл информации на русском языке о такой замечательной возможности HipHop, как статический анализ кода для PHP, а потому встречайте обзор, на идею которого меня натолкнула презентация Расмуса на DevConf.\n\nА как это вообще?\nСтатический анализ кода — вещь весьма полезная, ведь иначе ошибку мы не увидим, пока функция, её содержащая, не будет вызвана. Как же это делает HipHop? Он транслирует PHP в C++!\n\nТаким образом мы получаем возможность статически проанализировать C++ код, что, в общем, давно никого не удивляет, а потом применить полученную информацию к PHP (естественно автоматически).\n\nИтак, начнём.\n",
        "link": "https://habr.com/ru/post/145683/"
    },
    {
        "title": "QJson как библиотека для работы с JSON в Qt",
        "body": "\nПривет, хабр!\n\nНа хабре еще не писали про QJson — отличный и очень простой инструмент для работы с JSON на Qt. Вообще Qt рекоммендуют использовать XML — но мне кажется что в очень многих случаях он бывает чересчур уж избыточным или лишним. В некоторых случаях лучше использовать JSON. В этой заметке я расскажу как скачать, собрать и использовать QJson для работы с JSON в Qt.\n\nВнимание! Этот пост — заметка. Все что вы тут прочитаете можно найти в гугле и на офф сайте проекта — но я думаю что такая заметка не будет лишней.\n",
        "link": "https://habr.com/ru/post/147952/"
    },
    {
        "title": "Как работает парсер Mediawiki",
        "body": "\nПеревод статьи The MediaWiki parser, uncovered.\n\nАктуальность перевода статьи 2009 года в том, что, во-первых, костяк парсера с тех пор существенно не поменялся, и во-вторых, с ним приходится ежедневно сталкиваться тем, кто пишет расширения для Mediawiki, на котором крутятся их корпоративные сайты.\n\n\nПарсер Mediawiki — фундаментальная часть кода движка Mediawiki. Без него вы бы не смогли вставлять в свои статьи Википедии различные метки: секции, ссылки или картинки. Вы даже не смогли бы увидеть или быстро изменить разметку других статей. Вики-разметка достаточно гибка, чтобы дать возможность одинаково легко писать статьи как новичкам, так и HTML-экспертам. Из-за этого код парсера несколько сложноват, и с годами проходил через множество попыток его улучшить. Тем не менее, даже сегодня он все еще достаточно быстро работает для Википедии, одного из самых больших веб-сайтов в мире. Давайте взглянем на внутренности этого ценного (но чуть-чуть заумного) куска кода.\n",
        "link": "https://habr.com/ru/post/148756/"
    },
    {
        "title": "Построение приложений командной строки (CLI)",
        "body": "Данная статья написана под влиянием книги Дэвида Коупленда «Build Awesome Command-Line Application in Ruby» (купить, скачать и изучить дополнительные материалы). Большая её часть будет посвящена проектированию дизайна CLI-приложений вне зависимости от используемого языка. По ходу будут обсуждаться и вещи специфичные для ruby, но не страшно, если вы его не знаете, кода будет не слишком много. Можно считать эту статью довольно подробным обзором вышеупомянутой книги с вкраплениями собственного опыта. Книжку рекомендую!\n\nДля начала я задам вопрос. Если посмотреть на сообщества IT-шников, можно заметить, что несмотря на обилие программ с красивым графическим интерфейсом, приложения командной строки остаются весьма популярны. Почему?\nОтветов несколько. Во-первых, это красиво удобно — если вы можете описать задачу командой в командной строке, то её гораздо проще автоматизировать, чем если вам приходится анализировать передвижения мыши и клики на разные пункты меню. Во-вторых, это даёт возможность комбинировать программы невероятным числом способов, чего сложно добиться с помощью графических интерфейсов.\nВ значительной степени философия Unix базируется на том принципе, что множество маленьких утилит, каждая из которых умеет делать свою конкретную задачу — это лучше, чем одна многофункциональная программа-универсал. И это одна из причин успеха Unix-систем в мире IT-шников.\nНаверное, каждый понимает, что обычного пользователя вряд ли удастся сманить от GUI к CLI, давайте сосредоточимся на нас, «компьютерщиках» и конкретизируем наши пожелания к CLI-приложениям.",
        "link": "https://habr.com/ru/post/150950/"
    },
    {
        "title": "Самая короткая запись асинхронных вызовов в tornado v2, или патчим AST",
        "body": "Меня очень заинтересовала статья Самая короткая запись асинхронных вызовов в tornado или патчим байткод в декораторе, не столько с практической точки зрения, сколько с точки зрения реализации.\nВсё-таки модификация байткода в рантайме это слишком опасная и ненадежная операция. И уж наверняка не поддерживаемая альтернативными интерпретаторами Python.\n\nПопробуем исправить этот недостаток способом, который для этого предназначен куда больше и который применяется для схожих целей во многих других языках (я точно встречал в Lisp или Erlang). Этот способ — модификация Абстрактного синтаксического дерева (AST) программы.\n",
        "link": "https://habr.com/ru/post/153949/"
    },
    {
        "title": "Мониторинг сообщений и звонков в Android",
        "body": "На разрабатываемом мною проекте под Android возникла необходимость мониторинга входящих и исходящих звонков и сообщений. Полез читать документацию и подручные книги и к сожалению понял, что задача не совсем из тривиальных, так как каждая часть одной проблемы требует различного подхода к реализации. Вообще заметил, что многие книги или же статьи всегда стараются подавать более легкие примеры, например обработка входящего сообщения, а вот про исходящее ни слова если реализация более сложна. Возможно это мое предубеждение, но уже не первый раз обращаю на это внимание\nРешил собрать все воедино и поделиться с теми, кто возможно будет набивать себе оскомину пытаясь найти решение данной проблемы. На оптимальность не претендую, так как сам учусь\n",
        "link": "https://habr.com/ru/post/162181/"
    },
    {
        "title": "Русская версия «Экономики разработчиков 2013»",
        "body": "От издателей: Коллеги, представляем вам русское издание великолепного исследования Developer Economics 2013. Мы подготовили русский перевод этого исследования и надеемся, что он будет полезен вам в вашей работе. Спасибо!\n\nDeveloper Economics 2013 — четвертое исследование экономики разработки. Этот отчет фокусируется на инструментах разработчиков, исследует шесть секторов: рекламные сети и посреднические платформы, backend-as-a-service, кросс платформенные инструменты, кросс промо сети, пользовательскую аналитику и голосовые сервисы.\n\nМы также поближе взглянули на критические для разработчиков вопросы, такие как самые популярные платформы, возможности и проблемы HTML5, кросс экранную разработку, модели получения прибыли, потенциал монетизации и многое другое. Данные этого отчета основаны на онлайновом опросе более 3400 разработчиков и 20 интервью, предпринятых в октябре 2012 года. Наша выборка по настоящему всемирная, в ней сбалансировано представлены Северная Америка, Европа и Азия, а также значительно меньшее число разработчиков из Африки, Океании и Латинской Америки.\n\nМы надеемся, что этот отчет даст вам внутренний взгляд на самые последние тренды в мобильной разработке и понимание правил новой экономики приложений, возникающей вокруг приложений и экосистем. Мы надеемся, что вы получите удовольствие от его прочтений – такое же, какое мы получили от его написания!",
        "link": "https://habr.com/ru/company/apps4all/blog/174961/"
    },
    {
        "title": "24 совета javascript-разработчику",
        "body": "От переводчика: Не смотря на то что оригинал данной статьи датирован январем 2009 года, она не потеряла актуальности и теперь. Я надеюсь что даже те, кто используют JavaScript не первый год, почерпнут для себя что-то полезное. \n\n1. Используйте === вместо ==\nВ JavaScript существует два разных типа операций сравния: === / !== и == / !=. Считается хорошим тоном всегда использовать первую пару для сравнения.\n“Если два операнда одного типа и значения, то === вернет true, а !== false” \nJavaScript: The Good Parts",
        "link": "https://habr.com/ru/post/175283/"
    },
    {
        "title": "Что-то посложнее факториала",
        "body": "Давным-давно, когда трава была зеленее, а деревья выше, жил-был тролль, по имени Xenocephal. Жил он, в принципе, во многих местах, но мне повезло встретить его на одном форуме, где я, в то время, набирался ума-разума. Я уже не вспомню топика, в котором протекала беседа, но суть ее сводилась к тому, что Xenocephal пытался убедить всех окружающих, что Lisp (с его макросами) — всему голова, а C++, с его шаблонами, жалкое подобие левой руки. Также утверждалось, что наметапрограммировать в нем что-то сложнее набившего оскомину факториала не представляется возможным.\n",
        "link": "https://habr.com/ru/post/179089/"
    },
    {
        "title": "GSM Modem M95 от QUECTEL — опыт освоения",
        "body": "GSM Modem M95 от QUECTEL — опыт освоения\nВ начале\nВ первых строках своего поста хочу честно признаться что ранее опыта работы с GSM-модемами у меня не было, однако волею судьбы и служебной необходимостью набрел на сайт питерской конторы «Сатрон»  — официального представителя QUECTEL. На сей ресурс забрел в поисках очередной железки — подходящего мне по параметрам GSM-модема и бютжетного GPS-приемника. Так получилось что информацию о продукции в виде даташитов и прочих полезных файлов можно было получить только после регистрации. Так и сделал.\n",
        "link": "https://habr.com/ru/post/180023/"
    },
    {
        "title": "Дайджест новостей из мира мобильной разработки за последнюю неделю №12 (13 — 19 мая 2013)",
        "body": "На этой неделе Mail.ru опубликовала очень интересное исследование для разработчиков, начинающих делать мобильные приложения, Google представил ряд инновационных сервисов, Microsoft поделилась тем, как использовать Единую мобильную платформу города Москвы. А еще множество историй о разработке приложений и руководства по отдельным техникам и технологиям.\n\n",
        "link": "https://habr.com/ru/company/apps4all/blog/180203/"
    },
    {
        "title": "Решаем квартирный вопрос при помощи API Яндекс.Карт",
        "body": "В жизни даже самого «махрового» IT-шника порой наступает момент, когда нужно не только вылезти из своей берлоги на улицу, но целиком перенести себя на новое место жительства. Обычный человек в таких случаях вооружается Интернетом и прочёсывает сайты недвижимости в поисках подходящих вариантов, которые отмечаются на карте, выписываются или распечатываются, а затем планомерно прозваниваются. Если наступает конец цикла, а задача ещё не выполнена — goto line 1… А на каком-то этапе человеку это надоедает и он идёт в агенство.\n\nВот и в моей жизни пришло время для переезда, но проведя несколько дней за такой рутинной деятельностью я вспомнил, что незря ношу бороду есть такой чудесный сервис, как Яндекс.Карты, и у них есть не менее чудесное API. Посидев одно утро и скомбинировав всё с простейшим граббером на PHP и XPath я получил такую вот красочную карту, где разными маркерами можно отмечать объекты (квартиры) по любому из критериев, или просто одним взглядом оценить, какие из них ближе к желаемому месту дислокации (в моём случае это было метро):\n\n\n\n",
        "link": "https://habr.com/ru/post/184334/"
    },
    {
        "title": "Создание patch’ей на Wix при помощи PatchWiz. Часть 2",
        "body": "\nДобрый день всем! В своей прошлой статье я поставил задачу генерации патчей и начал обзор технологии их создания на Wix (с использованием PatchWiz). Там же мы пришли к выводу, что для полноценного решения задачи нужно «что-то еще». Добро пожаловать в часть 2, где я опишу наши организационный и технический подходы со всеми исходниками.\n\n",
        "link": "https://habr.com/ru/post/190654/"
    },
    {
        "title": "Готовим web-приложение под зоопарк версий Android",
        "body": "Совсем недавно и достаточно неожиданно для самого себя я оказался ответственным за разработку программки для Android. Но ни под Android, ни вообще на Java мне ранее писать не приходилось. Нужно было сделать web-приложение, вроде phonegap и прочих, которое почти полностью работает в компоненте браузера. И все это под версии 2.2 — 4.3 (SDK 8 — 18).\n\nО некоторых выкрутасах Android и костылях под них с точки зрения человека, впервые это все увидевшего, я и хотел бы рассказать. Надеюсь, вышло без HelloWorld, «OMG! Java», и т.п.\n\nПоворот экрана/смена ориентации\nNetwork unreachable\nГрузим локальные ресурсы\nМост между Java и JavaScript\n\n",
        "link": "https://habr.com/ru/post/196546/"
    },
    {
        "title": "Пишем свой синтаксический анализатор JSON (в горошек и с перламутровыми пуговицами)",
        "body": "Эта статья была написана Аароном Паттерсоном, Ruby разработчиком из Сиэтла, штат Вашингтон. Он увлечен разработкой на Ruby вот уже 7 лет и будет рад поделиться своей любовью к этому замечательному языку.\n\nСалют всем! Надеюсь, у вас отличное настроение. Сегодня солнце ненадолго выглянуло из-за туч, так что уж у меня-то точно все прекрасно!\n\nВ этой статье мы рассмотрим ряд инструментов компиляции для использования в связке с Ruby. А для погружения в предмет мы напишем синтаксический анализатор JSON. Уже слышу недовольные возгласы вроде: «ну Аарон, ну зачем? Разве их уже не 1,234,567 штук понаписано?» Вот именно! У нас уже 1,234,567 анализаторов JSON написанных на Ruby! И мы тоже будем производить анализ JSON, потому что грамматика его достаточно проста для завершения работы за один раз, и потому что она тем не менее достаточно сложна, чтобы можно было с умом применить разработанные для Ruby инструменты компиляции.\n\nПрежде чем вы продолжите чтение, хочу обратить внимание на то, что это отнюдь не статья о том, как анализировать JSON, а о том, как использовать инструменты анализа и компиляции в Ruby.\n",
        "link": "https://habr.com/ru/post/196676/"
    },
    {
        "title": "Runtime-генерирование .Net-кода для тех, кому некогда",
        "body": "Инфраструктура .Net содержит встроенные средства генерирования кода (On-the-Fly Code Generation). Это позволяет .Net-программе в момент своего исполнения самостоятельно (без участия программиста) скомпилировать текст, написанный на каком-либо языке программирования и исполнить получившийся код. Логично было бы ожидать, что для осуществления этих действий в стандартной .Net-библиотеке предусмотрен простейший метод соответствующего класса. Но к сожалению это не так. Microsoft, проделав огромный путь по встраиванию в среду .Net средств генерирования кода, не сделала самый последний шаг навстречу простейшим потребностям программистов. Значит, придётся сделать этот шаг самостоятельно.\n\nСамое простое средство предлагаемое Microsoft для решения описанной задачи — это класс CSharpCodeProvider, который входит в стандартную библиотеку .Net. Использование этого класса — не очень сложная задача, но тем не менее было бы полезно иметь инструмент, превращающий использование сгенерированного на лету кода в задачу тривиальную.\n",
        "link": "https://habr.com/ru/post/199266/"
    },
    {
        "title": "Язык программирования J. За что любить?",
        "body": "\nJ – самый ненормальный и самый эффективный язык из известных мне языков. Он позволяет быстро разрабатывать, а также вызывать ненормативную лексику у людей, незнакомых с ним и смотрящих на код.\n\nJ слишком необычный. И сложный для изучения. У людей, сталкивающихся с J не хватает мотивации, чтобы его изучить. Синтаксис непривычный.\nВ этом посте я хотел помочь вам заглянуть дальше, что будет, если вы его изучите и чем он интересен. По своему опыту знаю, что преимущества этого языка сразу не очевидны. В посте я не собираюсь останавливаться на разборе конструкций. Только в обзоре. Предлагаю просто окунуться в примеры, попробовать ощутить мощь языка. Узнать, чем прекрасен язык, без изучения. Писать статьи, обучающие программированию на нем – дело сложное и думаю, не нужное. Он не так прост, чтобы это сделать кратко, а с обучающими материалами на официальном сайте нет никаких проблем. Главное – желание. Им и займемся.\n",
        "link": "https://habr.com/ru/post/201470/"
    },
    {
        "title": "Написание парсера с нуля: так ли страшен черт?",
        "body": "В прошлом топике я рассказывал о том, как мы с другом решили ради развлечения написать свой встраиваемый язык программирования для платформы .NET. У первой версии был серьезный недостаток — парсер был реализован на F# с помощью сторонней библиотеки. Из-за этого требовалась куча зависимостей, парсер работал медленно, а поддержка его была крайне муторным занятием.\n\nОчевидно, что парсер нужно было переписать на C#, но при мысли о написании парсера с нуля вдруг находилась дюжина других срочных дел. Таким образом таск перекидывался и откладывался практически полгода и казался непосильным, а в итоге был сделан за 4 дня. Под катом я расскажу об удобном способе, позволившим реализовать парсер достаточно сложной грамматики без использования сторонних библиотек и не тронуться умом, а также о том, как это позволило улучшить язык LENS.\n\nНо обо всем по порядку.",
        "link": "https://habr.com/ru/post/202622/"
    },
    {
        "title": "Xalan, Saxon и 8 ферзей",
        "body": "\nСегодня я хочу рассказать об XSLT. Этот, весьма своеобразный, язык может оказаться очень полезным в тех случаях, когда требуется обработать XML-данные, сколь нибудь не тривиальным образом. Я расскажу о двух наиболее популярных (в среде Java-разработчиков) реализациях XSLT-процессора, подробно остановлюсь на вопросах их использования из Java-кода и попытаюсь сравнить их производительность. В качестве теста для сравнения производительности, я буду использовать широко известную задачу о расстановке 8-ми ферзей на шахматной доске. \n\nПоскольку решение подобных задач, с использованием XSLT вряд ли можно отнести к категории нормальной деятельности, топик помещен в соответствующий раздел. В то же время, я надеюсь, что эта статья будет полезна, в качестве учебного материала.\n",
        "link": "https://habr.com/ru/post/203004/"
    },
    {
        "title": "Детский лаунчер 2.Х и единый премиум-аккаунт",
        "body": "\n\nЧто нового\nПосле публикации первой версии приложения к нам поступило большое количество отзывов. Собрав воедино пожелания пользователей и наши собственные идеи, мы начали работу над второй версией. Спустя два месяца упорного труда обновленные приложения Детский Лаунчер и Родительский Контроль доступны для скачивания в Google Play.",
        "link": "https://habr.com/ru/company/appgranula/blog/203116/"
    },
    {
        "title": "Опыт разработки сервис-ориентированной системы",
        "body": "Некоторое время назад мы вместе с небольшой командой программистов начали разработку достаточно интересного с технической точки зрения аналитического проекта. Основной его целью была обработка данных, получаемых с различных веб-страниц. Нужно было обрабатывать эти данные, приводя в удобный вид и после этого анализировать собранную статистику.\n\nДо тех пор, пока у нас не было большого количества всевозможных данных, мы не имели каких-то нестандартных проблем и все решения были достаточно прямолинейными. Но проект разрастался, и размер собираемой информации, хотя сначала и не очень быстро, но все же увеличивался. Росла и кодовая база. И через некоторое время мы осознали весьма печальный факт — из-за всяких костылей и быстро-фиксов мы нарушили почти все возможные принципы проектирования. И если сначала организация кода была не столь важна, то со временем стало понятно, что без хорошего рефакторинга далеко мы не уедем.\n",
        "link": "https://habr.com/ru/post/207528/"
    },
    {
        "title": "Создание клиентского MVC приложения с помощью RequireJS",
        "body": "Как веб-разработчик, вы, наверное, часто писали код JavaScript в одном файле, и, когда количество кода становится все больше и больше, его трудно поддерживать. Для решения этой проблемы вы можете разделить свой ​​код на несколько файлов, добавить дополнительные теги script и использовать глобальные переменные для доступа к функциям, объявленным в других файлах. Но это загрязняет глобальное пространство имен и для каждого файла дополнительный запрос HTTP снижает пропускную способность, что увеличивает время загрузки страницы.\n\nЕсли это знакомо вам, наверное вы осознали необходимость в реорганизации вашего фронтенд кода, особенно если вы создаете крупно-масштабируемое web-приложение с тысячами строк кода JavaScript. Мы должны по-новому организовать всю эту неразбериху, чтобы код стало легче поддерживать. Новый метод заключается в использовании загрузчиков скриптов. В интернете можно найти много реализаций, но мы возьмем один из лучших, под названием RequireJS.\n\nВ этой пошаговой инструкции вы узнаете, как построить простое MVC (Model — View — Controller) приложение с помощью RequireJS. Вам не потребуются какие-либо предварительные знания в загрузке скриптов, основы мы рассмотрим в этой статье.\n",
        "link": "https://habr.com/ru/post/209228/"
    },
    {
        "title": "Генератор космических кораблей из арматуры",
        "body": "Доброго времени на вашей стороне планеты, Хабр.\nСегодня на хабре прямо день космических кораблей, столько интересных статей про последнюю битву в EVE Online, ну а я в свободное время я продолжаю делать свою двухмерную космическую игру и после длительного перерыва взялся за генератор кораблей. Пусть корабли и не такие шикарные как в EVE, зато свои. \n\n\n\nКому интересно как такой рендер на канве сделать, прошу под кат.\n",
        "link": "https://habr.com/ru/post/210622/"
    },
    {
        "title": "Построение RESTful Message Based веб-сервисов на WCF",
        "body": "Введение\nЯ уже писал о том, как сделать SOAP Message Based веб-сервис на WCF. А сейчас хочу рассказать о проектировании и построении RESTful Message Based веб-сервисов на WCF. Для понимания данной статьи необходимы базовые знания о REST и о том, как создавать RESTful веб-сервисы на WCF. Для ознакомления с RESTful веб-сервисами вы можете ознакомиться с: A Guide to Designing and Building RESTful Web Services with WCF 3.5.\n\nВ статье я постараюсь раскрыть и решить проблемы дизайна RESTful. Вы узнаете, как построить RESTful веб-сервис, который:\n\nОбладает стабильным и универсальным интерфейсом.\nПередает данные в соответствие с паттерном DTO.\n\n",
        "link": "https://habr.com/ru/post/218149/"
    },
    {
        "title": "Разработка приложения для Firefox OS на реальном примере",
        "body": "Мобильные приложения созданные с помощью веб-технологий понемногу захватывают мир. Но создание таких приложений, под популярные платформы, связанны с кучей проблем — от неизвестных истории багов, зоопарка размеров экрана, до проблем с производительностью, которые не решаются просто переписыванием тонких мест. \n\nНо к счастью, этот топик не будет наполнен обыденной трагедией разработки, подобных приложений. Поскольку сегодня, я покажу на реальном примере, как разрабатывать приложения под Firefox OS, которая поддерживает большую часть современных веб-технологий, и вообще говоря создана для них и благодаря им. \n\n",
        "link": "https://habr.com/ru/company/surfo/blog/218819/"
    },
    {
        "title": "Основы парсинга с помощью Python+lxml",
        "body": "Добрый день, уважаемые читатели.\nВ сегодняшней статье я покажу основы разбора HTML разметки страниц с помощью библиотеки lxml для Python.\nЕсли вкратце, то lxml это быстрая и гибкая библиотека для обработки разметки XML и HTML на Python. Кроме того, в ней присутствует возможность разложения элементов документа в дерево. В статье я постараюсь показать, насколько просто ее применение на практике.\n\n",
        "link": "https://habr.com/ru/post/220125/"
    },
    {
        "title": "Списки с разными типами элементов и разными провайдерами данных",
        "body": "Предисловие\nОднажды понадобилось мне выводить в одном ListView карточки разных типов, да еще и полученные с сервера по разным API. Мол, пусть пользователь порадуется и в одной ленте новостей увидит:\n\nкарточки видео, с тамнейлами и описаниями;\nкарточки авторов или тегов, с большой кнопкой «подписаться».\n\nОчевидно, что мастерить один большой layout, в котором учитывать все мыслимые варианты карточек — плохо, да и расширяться это будет так себе.\n\n\n\nВторой сложностью было то, что источниками данных для карточек могли быть совершенно разные ресурсы сервера, список должен был собираться с помощью одновременных запросов к нескольким разным API, отдающим разные типы данных.\n\n\n\nНу и чтобы жизнь медом не казалась, серверное API менять нельзя.\n",
        "link": "https://habr.com/ru/post/221851/"
    },
    {
        "title": "Вызов функции, соответствующей заданной строке",
        "body": "Привет!\nНе знал, как поточнее назвать статью, но хотелось бы разобрать одну маленькую задачку, которая звучит следующим образом:\nНа вход подаётся отформатированная некоторым образом строка, в которой указаны имя функции, её аргументы и типы аргументов. Нужно иметь возможность вызвать соответствующий обработчик функции, корректно передав все аргументы.\nНапример, так ActionScript пытается вызвать функцию test с тремя аргументами str, false, 1.0(соответственно типы аргументов: String, Boolean, Number):\n<invoke name=\"test\" returntype=\"xml\"><arguments><string>str</string><false/><number>1.0</number></arguments></invoke>\n\nХотелось бы, чтобы со стороны C++ была вызвана соответствующая функция:\nvoid test_handler(const std::wstring& str, bool flag, double n);\n\n\nПод катом — реализация с использованием нового стандарта и, для сравнения, реализация с использованием старого стандарта(и капельки boost-а).\n",
        "link": "https://habr.com/ru/post/223865/"
    },
    {
        "title": "Написание бота для Stronghold Kingdoms",
        "body": "История написания бота для Stronghold Kingdoms\nДолгое время я подходил к вопросу написания бота для этой игры, но то опыта не хватало, то лень, то не с той стороны заходить пытался.\nВ итоге, набравшись опыта написания и обратной разработки кода на C# я решил добиться своего.\n\nДа, как Вы могли заметить, C# не спроста – игра написана именно на нем, с использованием .net 2.0, что в последствии вставило мне некоторые палки в колеса.\n\n\nИзначально я думал написать сокетного бота, который бы лишь эмулировал сетевой протокол (который никак не шифруется), а имея «исходные коды» (результат декомпиляции il-кода) легко восстанавливается в стороннем приложении.\n\nНо мне это показалось нудным и муторным, ведь зачем городить велосипед, если имеются те самые «исходные коды».\n\nВооружившись Reflector’ом я начал разбираться с точкой входа игры (код которой вообще никак не обфусцирован более трех лет, диву даюсь разработчикам) – ничего особенного.\n",
        "link": "https://habr.com/ru/post/225663/"
    },
    {
        "title": "Реактивное программирование под Android",
        "body": "Отказоустойчивость, отзывчивость, ориентированность на события и масштабируемость — четыре принципа нынче популярного реактивного программирования. Именно следуя им создаётся backend больших систем с одновременной поддержкой десятков тысяч соединений. \n\nОтзывчивость, простота, гибкость и расширяемость кода — принципы, которые можно закрепить за реактивным UI.\n\nНаверняка, если совместить реактивные backend и UI, то можно получить качественный продукт. Именно его мы и попытались сделать, разрабатывая 2GIS Dialer — звонилки, которая работает через API и при этом должна оставаться быстрой и удобной.\n\n\n",
        "link": "https://habr.com/ru/company/2gis/blog/228125/"
    },
    {
        "title": "Пример IoT: Делаем bitcoin-монитор из экрана от Nokia, платы от Netduino и облака",
        "body": "Моего интерна и меня попросили выступить в Дурбанском технологическом университете перед студентами третьего курса для того чтобы вдохновить их возможностями использования Netduino и/или Windows Phone в их проектах.\n\nНам хотелось показать не просто мигающий светодиод, но что-нибудь что будет иметь отношение к реальным живым сценариям. И мы решили продемонстрировать это:\n\n\n\nПросим прощения за ужасный GIF. Вы можете назвать это трекером изменения цены на биткоин. Граф отражает изменение, а светодиод меняет цвет на зеленый при росте цены и на красный, когда цена падает. (На экране вы можете обнаружить опечатку – вместо USD должно выводиться BTC).\n",
        "link": "https://habr.com/ru/company/microsoft/blog/228285/"
    },
    {
        "title": "Свой dynamic dns на Go с помощью Cloudflare",
        "body": "Зачем вообще это нужно?\nТак получилось, что с работы мне довольно часто надо получить ssh доступ к своему домашнему компьютеру, а провайдер выдает белый, но динамически меняющийся ip адрес. Разумеется, выбор пал на динамический dns и я взял первого попавшегося бесплатного провайдера no-ip. Их демон прекрасно справлялся с задачей, меняя dns-запись на бесплатном домене третьего уровня от сервиса, а на моем домене был прописан CNAME на их домен.\n\nВсе это прекрасно работало до того момента, как я купил себе Zyxel Keenetic Giga. Он дружит с no-ip из коробки, но почему-то с моего домена теперь зайти не получалось. Эту проблему можно было бы решить покупкой статического ip у провайдера, записью в конфигурации ssh по прекрасному гайду от amarao, но так же не интересно! Итак, пришло время написать свой сервис!\n",
        "link": "https://habr.com/ru/post/229179/"
    },
    {
        "title": "Как устроен Grunt: смотрим исходники",
        "body": "\n\nGrunt.js уже давно обрел популярность отличного инструмента для оптимизации и автоматизации рабочего процесса. Признан лучшим проектом с открытым кодом в области веб-технологий за 2014 год. Он прост в применении, эффективен в работе, используется во множестве проектов. Не будем рассказывать о том, что с помощью него можно делать, подразумевается что в этом нет надобности. Лучше попробуем посмотреть что там внутри.\n",
        "link": "https://habr.com/ru/post/230753/"
    },
    {
        "title": "Изучаем Javascript перебирая косточки Backbone.js",
        "body": "В этом посте любитель javascript тряхнет костями, доставая что-нибудь полезно-интересное из исходника Backbone.\n\nТут не будет рассматриваться вопрос применения библиотеки, это на Хабре уже давно сделали, а будет простой конспект-шпаргалка по js с примерами, в роли примеров — сам Backbone. \n",
        "link": "https://habr.com/ru/post/240969/"
    },
    {
        "title": "Выразительный JavaScript: Функции высшего порядка",
        "body": "Содержание\n\nВведение\nВеличины, типы и операторы\nСтруктура программ\nФункции\nСтруктуры данных: объекты и массивы\nФункции высшего порядка\nТайная жизнь объектов\nПроект: электронная жизнь\nПоиск и обработка ошибок\nРегулярные выражения\nМодули\nПроект: язык программирования\nJavaScript и браузер\nDocument Object Model\nОбработка событий\nПроект: игра-платформер\nРисование на холсте\nHTTP\nФормы и поля форм\nПроект: Paint\nNode.js\nПроект: веб-сайт по обмену опытом\nПесочница для кода\n\n\nЦу-ли и Цу-су похвалялись размерами своих новых программ. «Двести тысяч строк»,- сказал Цу-ли,- «не считая комментариев!» Цу-су ответил: «Пф-ф, моя – почти миллион строк». Мастер Юнь-Ма сказал: «Моя лучшая программа занимает пятьсот строк». Услышав это, Цу-ли и Цу-су испытали просветление.\n\nМастер Юнь-Ма, Книга программирования\n\nЕсть два способа построения программ: сделать их настолько простыми, что там очевидно не будет ошибок, или же настолько сложными, что там не будет очевидных ошибок.\n\nЭнтони Хоар, 1980 лекция на вручении премии Тьюринга\n\n\nБольшая программа – затратная программа, и не только из-за времени её написания. Большой размер обычно означает сложность, а сложность сбивает с толку программистов. Сбитые с толку программисты делают ошибки в программах. Большая программа означает, что багам есть где спрятаться и их получается труднее отыскать.",
        "link": "https://habr.com/ru/post/241155/"
    },
    {
        "title": "Печать из Google Apps Script",
        "body": "Часть 1. Challenge\nЧитая ленту на oDesk, наткнулся на интересный проект по моему направлению (а я отслеживаю, в основном, задачи на написать что-то, прикрутить что-то или иным способом замучить Google Apps Script или приложения Google Apps). Клиент просил написать скрипт, который будет отсылать ему выделенный фрагмент из Google Spreadsheet по нажатию кнопки. Но была в описании одна фраза, зацепившая меня — «Мне сказали, что невозможно создать скрипт, который будет печатать из Google Apps». Я всегда очень любил и люблю «невозможные» задачи: \n— Мы сами знаем, что она не имеет решения, — сказал Хунта, немедленно ощетиниваясь. — Мы хотим знать, как её решать.\nАркадий и Борис Стругацкие. Понедельник начинается в субботу\nСтатья рассчитана на читателей, уже знакомых с Google Apps Script и сопутствующими технологиями.\n",
        "link": "https://habr.com/ru/post/243421/"
    },
    {
        "title": "Подготовка к сертификационному экзамену Microsoft 70-483 «Programming in C#»",
        "body": "\nВо время подготовки к экзамену номер 70-483 нашел множество разрозненных сайтов с различными ссылками на мануалы, которые мне немного помогли. Но, что помогло мне больше, так это то, что я составил для себя памятку на нескольких страницах, выдержками из которой и хочу поделиться.\nЦелью не является подробное описание C#, целью является освежить в памяти и заострить внимание на некоторых необходимых темах. Если какие-то темы вам незнакомы, то это значит, что у вас есть пробелы, которые необходимо устранить. \nРаскрывать вопросы тестирования я не могу (да и не помню я уже их), но, если многие из перечисленных ниже нюансов, трюков и тонкостей, помогут вам, то вы на меня не обижайтесь (написано с иронией).\n",
        "link": "https://habr.com/ru/post/245067/"
    },
    {
        "title": "Sortable v1.0: Новые возможности",
        "body": " Привет хабр! В преддверии нового года хочу поделится своей радостью — выходом Sortable v1.0. Ровно год назад я представил на ваш суд мой маленький инструмент для сортировки списка при помощи drag’n’drop. Всё это время я скрупулезно собирал обратную связь, добавлял новые возможности и правил мелкие баги. Под катом я расскажу о новых возможностях, интеграции с AngularJS, Meteor и других нюансах.\n",
        "link": "https://habr.com/ru/post/246373/"
    },
    {
        "title": "Urban Airship закрывает бесплатную лицензию",
        "body": "Совсем скоро — 31 декабря, Новый год. Но вместе с этим и закроектся бесплатная Developer Edition в системе рассылки Push-уведомлений Urban Airship. Компания предлагает либо купить платную подписку, либо уйти к другим push-провайдерам.\n\nДавайте посмотрим, какие у нас есть варианты.\n\n\n",
        "link": "https://habr.com/ru/post/246395/"
    }
]